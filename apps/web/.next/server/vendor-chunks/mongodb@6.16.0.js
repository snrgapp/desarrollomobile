"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb@6.16.0";
exports.ids = ["vendor-chunks/mongodb@6.16.0"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/admin.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/admin.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference,\n            timeoutMS: options?.timeoutMS ?? this.s.db.timeoutMS\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return await this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return await this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, { timeoutMS: this.s.db.timeoutMS, ...options }));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return await this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9hZG1pbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsZUFBZSxtQkFBTyxDQUFDLDhGQUFRO0FBQy9CLDRCQUE0QixtQkFBTyxDQUFDLDhJQUFnQztBQUNwRSx5QkFBeUIsbUJBQU8sQ0FBQyx3SUFBNkI7QUFDOUQsc0JBQXNCLG1CQUFPLENBQUMsa0lBQTBCO0FBQ3hELHNCQUFzQixtQkFBTyxDQUFDLGtJQUEwQjtBQUN4RCw4QkFBOEIsbUJBQU8sQ0FBQyxrSkFBa0M7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpQkFBaUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOElBQThJLDZCQUE2QjtBQUMzSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMElBQTBJLDRDQUE0QztBQUN0TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQ7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcYWRtaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFkbWluID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4vYnNvblwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgbGlzdF9kYXRhYmFzZXNfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXNcIik7XG5jb25zdCByZW1vdmVfdXNlcl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9yZW1vdmVfdXNlclwiKTtcbmNvbnN0IHJ1bl9jb21tYW5kXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3J1bl9jb21tYW5kXCIpO1xuY29uc3QgdmFsaWRhdGVfY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uXCIpO1xuLyoqXG4gKiBUaGUgKipBZG1pbioqIGNsYXNzIGlzIGFuIGludGVybmFsIGNsYXNzIHRoYXQgYWxsb3dzIGNvbnZlbmllbnQgYWNjZXNzIHRvXG4gKiB0aGUgYWRtaW4gZnVuY3Rpb25hbGl0eSBhbmQgY29tbWFuZHMgZm9yIE1vbmdvREIuXG4gKlxuICogKipBRE1JTiBDYW5ub3QgZGlyZWN0bHkgYmUgaW5zdGFudGlhdGVkKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XG4gKlxuICogY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KCdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3Jyk7XG4gKiBjb25zdCBhZG1pbiA9IGNsaWVudC5kYigpLmFkbWluKCk7XG4gKiBjb25zdCBkYkluZm8gPSBhd2FpdCBhZG1pbi5saXN0RGF0YWJhc2VzKCk7XG4gKiBmb3IgKGNvbnN0IGRiIG9mIGRiSW5mby5kYXRhYmFzZXMpIHtcbiAqICAgY29uc29sZS5sb2coZGIubmFtZSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgQWRtaW4ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBZG1pbiBpbnN0YW5jZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgICAgIHRoaXMucyA9IHsgZGIgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIGNvbW1hbmRcbiAgICAgKlxuICAgICAqIFRoZSBkcml2ZXIgd2lsbCBlbnN1cmUgdGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIHNlbnQgdG8gdGhlIHNlcnZlcjpcbiAgICAgKiAtIGBsc2lkYCAtIHNvdXJjZWQgZnJvbSBhbiBpbXBsaWNpdCBzZXNzaW9uIG9yIG9wdGlvbnMuc2Vzc2lvblxuICAgICAqIC0gYCRyZWFkUHJlZmVyZW5jZWAgLSBkZWZhdWx0cyB0byBwcmltYXJ5IG9yIGNhbiBiZSBjb25maWd1cmVkIGJ5IG9wdGlvbnMucmVhZFByZWZlcmVuY2VcbiAgICAgKiAtIGAkZGJgIC0gc291cmNlZCBmcm9tIHRoZSBuYW1lIG9mIHRoaXMgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIElmIHRoZSBjbGllbnQgaGFzIGEgc2VydmVyQXBpIHNldHRpbmc6XG4gICAgICogLSBgYXBpVmVyc2lvbmBcbiAgICAgKiAtIGBhcGlTdHJpY3RgXG4gICAgICogLSBgYXBpRGVwcmVjYXRpb25FcnJvcnNgXG4gICAgICpcbiAgICAgKiBXaGVuIGluIGEgdHJhbnNhY3Rpb246XG4gICAgICogLSBgcmVhZENvbmNlcm5gIC0gc291cmNlZCBmcm9tIHJlYWRDb25jZXJuIHNldCBvbiB0aGUgVHJhbnNhY3Rpb25PcHRpb25zXG4gICAgICogLSBgd3JpdGVDb25jZXJuYCAtIHNvdXJjZWQgZnJvbSB3cml0ZUNvbmNlcm4gc2V0IG9uIHRoZSBUcmFuc2FjdGlvbk9wdGlvbnNcbiAgICAgKlxuICAgICAqIEF0dGFjaGluZyBhbnkgb2YgdGhlIGFib3ZlIGZpZWxkcyB0byB0aGUgY29tbWFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGFzIHRoZSBkcml2ZXIgd2lsbCBvdmVyd3JpdGUgdGhlIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbW1hbmQgLSBUaGUgY29tbWFuZCB0byBleGVjdXRlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBjb21tYW5kKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyBydW5fY29tbWFuZF8xLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbihjb21tYW5kLCB7XG4gICAgICAgICAgICAuLi4oMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyksXG4gICAgICAgICAgICBzZXNzaW9uOiBvcHRpb25zPy5zZXNzaW9uLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgdGltZW91dE1TOiBvcHRpb25zPy50aW1lb3V0TVMgPz8gdGhpcy5zLmRiLnRpbWVvdXRNU1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBzZXJ2ZXIgYnVpbGQgaW5mb3JtYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgYnVpbGRJbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29tbWFuZCh7IGJ1aWxkaW5mbzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHNlcnZlciBidWlsZCBpbmZvcm1hdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBzZXJ2ZXJJbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29tbWFuZCh7IGJ1aWxkaW5mbzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhpcyBkYidzIHNlcnZlciBzdGF0dXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHNlcnZlclN0YXR1cyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbW1hbmQoeyBzZXJ2ZXJTdGF0dXM6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBpbmcgdGhlIE1vbmdvREIgc2VydmVyIGFuZCByZXRyaWV2ZSByZXN1bHRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHBpbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb21tYW5kKHsgcGluZzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgdXNlciBmcm9tIGEgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSAtIFRoZSB1c2VybmFtZSB0byByZW1vdmVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZVVzZXIodXNlcm5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyByZW1vdmVfdXNlcl8xLlJlbW92ZVVzZXJPcGVyYXRpb24odGhpcy5zLmRiLCB1c2VybmFtZSwgeyBkYk5hbWU6ICdhZG1pbicsIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbiBleGlzdGluZyBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY29sbGVjdGlvbiB0byB2YWxpZGF0ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHZhbGlkYXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgdmFsaWRhdGVfY29sbGVjdGlvbl8xLlZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbih0aGlzLCBjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBhdmFpbGFibGUgZGF0YWJhc2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGxpc3REYXRhYmFzZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IGxpc3RfZGF0YWJhc2VzXzEuTGlzdERhdGFiYXNlc09wZXJhdGlvbih0aGlzLnMuZGIsIHsgdGltZW91dE1TOiB0aGlzLnMuZGIudGltZW91dE1TLCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IFJlcGxpY2FTZXQgc3RhdHVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxTZXRHZXRTdGF0dXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb21tYW5kKHsgcmVwbFNldEdldFN0YXR1czogMSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkFkbWluID0gQWRtaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZG1pbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/beta.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/beta.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./index */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/index.js\"), exports);\n/**\n * @internal\n *\n * Since we don't bundle tslib helpers, we need to polyfill this method.\n *\n * This is used in the generated JS.  Adapted from https://github.com/microsoft/TypeScript/blob/aafdfe5b3f76f5c41abeec412ce73c86da94c75f/src/compiler/factory/emitHelpers.ts#L1202.\n */\nfunction __exportStar(mod) {\n    for (const key of Object.keys(mod)) {\n        Object.defineProperty(exports, key, {\n            enumerable: true,\n            get: function () {\n                return mod[key];\n            }\n        });\n    }\n}\n//# sourceMappingURL=beta.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9iZXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxnR0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcYmV0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbmRleFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIFNpbmNlIHdlIGRvbid0IGJ1bmRsZSB0c2xpYiBoZWxwZXJzLCB3ZSBuZWVkIHRvIHBvbHlmaWxsIHRoaXMgbWV0aG9kLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiB0aGUgZ2VuZXJhdGVkIEpTLiAgQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9ibG9iL2FhZmRmZTViM2Y3NmY1YzQxYWJlZWM0MTJjZTczYzg2ZGE5NGM3NWYvc3JjL2NvbXBpbGVyL2ZhY3RvcnkvZW1pdEhlbHBlcnMudHMjTDEyMDIuXG4gKi9cbmZ1bmN0aW9uIF9fZXhwb3J0U3Rhcihtb2QpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtb2QpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/beta.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toUTF8 = exports.getBigInt64LE = exports.getFloat64LE = exports.getInt32LE = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSONError = exports.BSON = exports.Binary = void 0;\nexports.parseToElementsToArray = parseToElementsToArray;\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\nexports.resolveBSONOptions = resolveBSONOptions;\nexports.parseUtf8ValidationOption = parseUtf8ValidationOption;\n/* eslint-disable no-restricted-imports */\nconst bson_1 = __webpack_require__(/*! bson */ \"(rsc)/../../node_modules/.pnpm/bson@6.10.3/node_modules/bson/lib/bson.cjs\");\nvar bson_2 = __webpack_require__(/*! bson */ \"(rsc)/../../node_modules/.pnpm/bson@6.10.3/node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_2.BSON; } }));\nObject.defineProperty(exports, \"BSONError\", ({ enumerable: true, get: function () { return bson_2.BSONError; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"calculateObjectSize\", ({ enumerable: true, get: function () { return bson_2.calculateObjectSize; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return bson_2.deserialize; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"EJSON\", ({ enumerable: true, get: function () { return bson_2.EJSON; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return bson_2.serialize; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nfunction parseToElementsToArray(bytes, offset) {\n    const res = bson_1.BSON.onDemand.parseToElements(bytes, offset);\n    return Array.isArray(res) ? res : [...res];\n}\nexports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;\nexports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;\nexports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;\nexports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\n/** @internal */\nfunction parseUtf8ValidationOption(options) {\n    const enableUtf8Validation = options?.enableUtf8Validation;\n    if (enableUtf8Validation === false) {\n        return { utf8: false };\n    }\n    return { utf8: { writeErrors: false } };\n}\n//# sourceMappingURL=bson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nexports.mergeBatchResults = mergeBatchResults;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernTimeout });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${bson_1.EJSON.stringify(this.result)})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this.serverError = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this.serverError.code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this.serverError.errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this.serverError.errInfo;\n    }\n    toJSON() {\n        return this.serverError;\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nasync function executeCommands(bulkOperation, options) {\n    if (bulkOperation.s.batches.length === 0) {\n        return new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    }\n    for (const batch of bulkOperation.s.batches) {\n        const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n            ...options,\n            ordered: bulkOperation.isOrdered\n        });\n        if (finalOptions.bypassDocumentValidation !== true) {\n            delete finalOptions.bypassDocumentValidation;\n        }\n        // Is the bypassDocumentValidation options specific\n        if (bulkOperation.s.bypassDocumentValidation === true) {\n            finalOptions.bypassDocumentValidation = true;\n        }\n        // Is the checkKeys option disabled\n        if (bulkOperation.s.checkKeys === false) {\n            finalOptions.checkKeys = false;\n        }\n        if (finalOptions.retryWrites) {\n            if (isUpdateBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n            }\n            if (isDeleteBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n            }\n        }\n        const operation = isInsertBatch(batch)\n            ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n            : isUpdateBatch(batch)\n                ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                : isDeleteBatch(batch)\n                    ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                    : null;\n        if (operation == null)\n            throw new error_1.MongoRuntimeError(`Unknown batchType: ${batch.batchType}`);\n        let thrownError = null;\n        let result;\n        try {\n            result = await (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation, finalOptions.timeoutContext);\n        }\n        catch (error) {\n            thrownError = error;\n        }\n        if (thrownError != null) {\n            if (thrownError instanceof error_1.MongoWriteConcernError) {\n                mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n                const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n                throw new MongoBulkWriteError({\n                    message: thrownError.result.writeConcernError.errmsg,\n                    code: thrownError.result.writeConcernError.code\n                }, writeResult);\n            }\n            else {\n                // Error is a driver related error not a bulk op error, return early\n                throw new MongoBulkWriteError(thrownError, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n            }\n        }\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        bulkOperation.handleWriteError(writeResult);\n    }\n    bulkOperation.s.batches.length = 0;\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    bulkOperation.handleWriteError(writeResult);\n    return writeResult;\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(_server, session, timeoutContext) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return await executeCommands(this.bulkOperation, { ...this.options, timeoutContext });\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        this.collection = collection;\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        (0, utils_1.maybeAddIdToDocuments)(this.collection, document, {\n            forceServerObjectId: this.shouldForceServerObjectId()\n        });\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = this.shouldForceServerObjectId();\n            const document = op.insertOne && op.insertOne.document == null\n                ? // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n                    op.insertOne\n                : op.insertOne.document;\n            (0, utils_1.maybeAddIdToDocuments)(this.collection, document, { forceServerObjectId });\n            return this.addToOperationsList(exports.BatchType.INSERT, document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get length() {\n        return this.s.currentIndex;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return await (0, execute_operation_1.executeOperation)(this.s.collection.client, operation, finalOptions.timeoutContext);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            throw new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult);\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            throw new MongoBulkWriteError(writeConcernError, writeResult);\n        }\n    }\n    shouldForceServerObjectId() {\n        return (this.s.options.forceServerObjectId === true ||\n            this.s.collection.s.db.options?.forceServerObjectId === true);\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/ordered.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/ordered.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL29yZGVyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQywrRkFBUztBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyx1R0FBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvR0FBb0cseUJBQXlCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcYnVsa1xcb3JkZXJlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3JkZXJlZEJ1bGtPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBCU09OID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgT3JkZXJlZEJ1bGtPcGVyYXRpb24gZXh0ZW5kcyBjb21tb25fMS5CdWxrT3BlcmF0aW9uQmFzZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucywgdHJ1ZSk7XG4gICAgfVxuICAgIGFkZFRvT3BlcmF0aW9uc0xpc3QoYmF0Y2hUeXBlLCBkb2N1bWVudCkge1xuICAgICAgICAvLyBHZXQgdGhlIGJzb25TaXplXG4gICAgICAgIGNvbnN0IGJzb25TaXplID0gQlNPTi5jYWxjdWxhdGVPYmplY3RTaXplKGRvY3VtZW50LCB7XG4gICAgICAgICAgICBjaGVja0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB1c2VyIHNlbGVjdGVkIGZvciBCU09OIG9wdGlvbnMgaGVyZSxcbiAgICAgICAgICAgIC8vIGVyciBvbiB0aGUgc2FmZSBzaWRlLCBhbmQgY2hlY2sgdGhlIHNpemUgd2l0aCBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlLlxuICAgICAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICAgICAgICBpZiAoYnNvblNpemUgPj0gdGhpcy5zLm1heEJzb25PYmplY3RTaXplKVxuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBDaGFuZ2UgdGhpcyB0byBNb25nb0JTT05FcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgRG9jdW1lbnQgaXMgbGFyZ2VyIHRoYW4gdGhlIG1heGltdW0gc2l6ZSAke3RoaXMucy5tYXhCc29uT2JqZWN0U2l6ZX1gKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIG9iamVjdCBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBvbmVcbiAgICAgICAgaWYgKHRoaXMucy5jdXJyZW50QmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heEtleVNpemUgPSB0aGlzLnMubWF4S2V5U2l6ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXggYmF0Y2ggb3Agc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSArIDEgPj0gdGhpcy5zLm1heFdyaXRlQmF0Y2hTaXplIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXhCYXRjaFNpemVCeXRlcy4gT25seSBtYXR0ZXJzIGlmIGJhdGNoIGFscmVhZHkgaGFzIGEgZG9jLFxuICAgICAgICAgICAgLy8gc2luY2Ugd2UgY2FuJ3Qgc2VudCBhbiBlbXB0eSBiYXRjaFxuICAgICAgICAgICAgKHRoaXMucy5jdXJyZW50QmF0Y2hTaXplID4gMCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgKyBtYXhLZXlTaXplICsgYnNvblNpemUgPj0gdGhpcy5zLm1heEJhdGNoU2l6ZUJ5dGVzKSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHRoZSBuZXcgb3AgZG9lcyBub3QgaGF2ZSB0aGUgc2FtZSBvcCB0eXBlIGFzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLmJhdGNoVHlwZSAhPT0gYmF0Y2hUeXBlKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBiYXRjaCB0byB0aGUgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB0aGlzLnMuYmF0Y2hlcy5wdXNoKHRoaXMucy5jdXJyZW50QmF0Y2gpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgY3VycmVudCBzaXplIHRyYWNrZXJzXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZUJ5dGVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuSU5TRVJUKSB7XG4gICAgICAgICAgICB0aGlzLnMuYnVsa1Jlc3VsdC5pbnNlcnRlZElkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5zLmN1cnJlbnRJbmRleCxcbiAgICAgICAgICAgICAgICBfaWQ6IGRvY3VtZW50Ll9pZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcGVyYXRpb24gcGFzc2VkIGluIGNhbm5vdCBiZSBhbiBBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3JpZ2luYWxJbmRleGVzLnB1c2godGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgKz0gMTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyArPSBtYXhLZXlTaXplICsgYnNvblNpemU7XG4gICAgICAgIHRoaXMucy5jdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5PcmRlcmVkQnVsa09wZXJhdGlvbiA9IE9yZGVyZWRCdWxrT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3JkZXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/unordered.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/unordered.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(writeResult) {\n        if (this.s.batches.length) {\n            return;\n        }\n        return super.handleWriteError(writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL3Vub3JkZXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLCtGQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLHVHQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRyx5QkFBeUI7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGJ1bGtcXHVub3JkZXJlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5vcmRlcmVkQnVsa09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEJTT04gPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uIGV4dGVuZHMgY29tbW9uXzEuQnVsa09wZXJhdGlvbkJhc2Uge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMsIGZhbHNlKTtcbiAgICB9XG4gICAgaGFuZGxlV3JpdGVFcnJvcih3cml0ZVJlc3VsdCkge1xuICAgICAgICBpZiAodGhpcy5zLmJhdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmhhbmRsZVdyaXRlRXJyb3Iod3JpdGVSZXN1bHQpO1xuICAgIH1cbiAgICBhZGRUb09wZXJhdGlvbnNMaXN0KGJhdGNoVHlwZSwgZG9jdW1lbnQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBic29uU2l6ZVxuICAgICAgICBjb25zdCBic29uU2l6ZSA9IEJTT04uY2FsY3VsYXRlT2JqZWN0U2l6ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgY2hlY2tLZXlzOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgdXNlciBzZWxlY3RlZCBmb3IgQlNPTiBvcHRpb25zIGhlcmUsXG4gICAgICAgICAgICAvLyBlcnIgb24gdGhlIHNhZmUgc2lkZSwgYW5kIGNoZWNrIHRoZSBzaXplIHdpdGggaWdub3JlVW5kZWZpbmVkOiBmYWxzZS5cbiAgICAgICAgICAgIGlnbm9yZVVuZGVmaW5lZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRocm93IGVycm9yIGlmIHRoZSBkb2MgaXMgYmlnZ2VyIHRoYW4gdGhlIG1heCBCU09OIHNpemVcbiAgICAgICAgaWYgKGJzb25TaXplID49IHRoaXMucy5tYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBDaGFuZ2UgdGhpcyB0byBNb25nb0JTT05FcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgRG9jdW1lbnQgaXMgbGFyZ2VyIHRoYW4gdGhlIG1heGltdW0gc2l6ZSAke3RoaXMucy5tYXhCc29uT2JqZWN0U2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIb2xkcyB0aGUgY3VycmVudCBiYXRjaFxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBHZXQgdGhlIHJpZ2h0IHR5cGUgb2YgYmF0Y2hcbiAgICAgICAgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLklOU0VSVCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHRoaXMucy5jdXJyZW50SW5zZXJ0QmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuVVBEQVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdGhpcy5zLmN1cnJlbnRVcGRhdGVCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5ERUxFVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB0aGlzLnMuY3VycmVudFJlbW92ZUJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heEtleVNpemUgPSB0aGlzLnMubWF4S2V5U2l6ZTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIG9iamVjdCBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBvbmVcbiAgICAgICAgaWYgKHRoaXMucy5jdXJyZW50QmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4IGJhdGNoIG9wIHNpemVcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplICsgMSA+PSB0aGlzLnMubWF4V3JpdGVCYXRjaFNpemUgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heEJhdGNoU2l6ZUJ5dGVzLiBPbmx5IG1hdHRlcnMgaWYgYmF0Y2ggYWxyZWFkeSBoYXMgYSBkb2MsXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSBjYW4ndCBzZW50IGFuIGVtcHR5IGJhdGNoXG4gICAgICAgICAgICAodGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplID4gMCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZUJ5dGVzICsgbWF4S2V5U2l6ZSArIGJzb25TaXplID49IHRoaXMucy5tYXhCYXRjaFNpemVCeXRlcykgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB0aGUgbmV3IG9wIGRvZXMgbm90IGhhdmUgdGhlIHNhbWUgb3AgdHlwZSBhcyB0aGUgY3VycmVudCBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5iYXRjaFR5cGUgIT09IGJhdGNoVHlwZSkge1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgYmF0Y2ggdG8gdGhlIGV4ZWN1dGlvbiBzdGFja1xuICAgICAgICAgICAgdGhpcy5zLmJhdGNoZXMucHVzaCh0aGlzLnMuY3VycmVudEJhdGNoKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRvY3VtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3BlcmF0aW9uIHBhc3NlZCBpbiBjYW5ub3QgYmUgYW4gQXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLm9wZXJhdGlvbnMucHVzaChkb2N1bWVudCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3JpZ2luYWxJbmRleGVzLnB1c2godGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50SW5kZXggPSB0aGlzLnMuY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgLy8gU2F2ZSBiYWNrIHRoZSBjdXJyZW50IEJhdGNoIHRvIHRoZSByaWdodCB0eXBlXG4gICAgICAgIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5JTlNFUlQpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50SW5zZXJ0QmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICAgICAgdGhpcy5zLmJ1bGtSZXN1bHQuaW5zZXJ0ZWRJZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBfaWQ6IGRvY3VtZW50Ll9pZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuVVBEQVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudFVwZGF0ZUJhdGNoID0gdGhpcy5zLmN1cnJlbnRCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5ERUxFVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50UmVtb3ZlQmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IGJhdGNoIHNpemVcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplICs9IDE7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZUJ5dGVzICs9IG1heEtleVNpemUgKyBic29uU2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5Vbm9yZGVyZWRCdWxrT3BlcmF0aW9uID0gVW5vcmRlcmVkQnVsa09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVub3JkZXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\");\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        let serverSelectionTimeoutMS;\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n            serverSelectionTimeoutMS = parent.s.db.client.options.serverSelectionTimeoutMS;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n            serverSelectionTimeoutMS = parent.client.options.serverSelectionTimeoutMS;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n            serverSelectionTimeoutMS = parent.options.serverSelectionTimeoutMS;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.contextOwner = Symbol();\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this.isClosed = false;\n        this.mode = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this.cursorStream?.removeAllListeners('data');\n            }\n        });\n        if (this.options.timeoutMS != null) {\n            this.timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS: this.options.timeoutMS,\n                serverSelectionTimeoutMS\n            });\n        }\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const hasNext = await this.cursor.hasNext();\n                    return hasNext;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n                            throw error;\n                        }\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const change = await this.cursor.next();\n                    const processedChange = this._processChange(change ?? null);\n                    return processedChange;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n                            throw error;\n                        }\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const change = await this.cursor.tryNext();\n                    return change ?? null;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null)\n                            throw error;\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this.isClosed || this.cursor.closed;\n    }\n    /**\n     * Frees the internal resources used by the change stream.\n     */\n    async close() {\n        this.timeoutContext?.clear();\n        this.timeoutContext = undefined;\n        this.isClosed = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this.mode === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this.mode = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this.mode === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this.mode = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, {\n            ...options,\n            timeoutContext: this.timeoutContext\n                ? new abstract_cursor_1.CursorTimeoutContext(this.timeoutContext, this.contextOwner)\n                : undefined\n        });\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().then(undefined, utils_1.squashError);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this.cursorStream ?? cursor.stream();\n        this.cursorStream = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n            this.timeoutContext?.refresh();\n        });\n        stream.on('error', error => this._processErrorStreamMode(error, this.cursor.id != null));\n    }\n    /** @internal */\n    _endStream() {\n        this.cursorStream?.removeAllListeners('data');\n        this.cursorStream?.removeAllListeners('close');\n        this.cursorStream?.removeAllListeners('end');\n        this.cursorStream?.destroy();\n        this.cursorStream = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this.isClosed) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError, cursorInitialized) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this.isClosed)\n            return;\n        if (cursorInitialized &&\n            ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) ||\n                changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n            this._endStream();\n            this.cursor\n                .close()\n                .then(() => this._resume(changeStreamError), e => {\n                (0, utils_1.squashError)(e);\n                return this._resume(changeStreamError);\n            })\n                .then(() => {\n                if (changeStreamError instanceof error_1.MongoOperationTimeoutError)\n                    this.emit(ChangeStream.ERROR, changeStreamError);\n            }, () => this._closeEmitterModeWithError(changeStreamError));\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError, cursorInitialized) {\n        if (this.isClosed) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (cursorInitialized &&\n            ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) ||\n                changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n            try {\n                await this.cursor.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            await this._resume(changeStreamError);\n            if (changeStreamError instanceof error_1.MongoOperationTimeoutError)\n                throw changeStreamError;\n        }\n        else {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            throw changeStreamError;\n        }\n    }\n    async _resume(changeStreamError) {\n        this.timeoutContext?.refresh();\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServer(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream',\n                timeoutContext: this.timeoutContext\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n(0, resource_management_1.configureResourceManagement)(ChangeStream.prototype);\n//# sourceMappingURL=change_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst client_encryption_1 = __webpack_require__(/*! ./client_encryption */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */ exports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */ class AutoEncrypter {\n    /** @internal */ static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */ constructor(client, options){\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */ this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        this._credentialProviders = options.credentialProviders;\n        if (options.credentialProviders?.aws && !(0, providers_1.isEmptyCredentials)('aws', this._kmsProviders)) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Can only provide a custom AWS credential provider when the state machine is configured for automatic AWS credential fetching');\n        }\n        const mongoCryptOptions = {\n            enableMultipleCollinfo: true,\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap) ? options.schemaMap : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap) ? options.encryptedFieldsMap : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        } else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = [\n                '$SYSTEM'\n            ];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibRequired && !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if ((options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') && !net.getDefaultAutoSelectFamily) {\n                // Only set family if autoSelectFamily options are not supported.\n                clientOptions.family = 4;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore: TS complains as this always returns true on versions where it is present.\n            if (net.getDefaultAutoSelectFamily) {\n                // AutoEncrypter is made inside of MongoClient constructor while options are being parsed,\n                // we do not have access to the options that are in progress.\n                // TODO(NODE-6449): AutoEncrypter does not use client options for autoSelectFamily\n                Object.assign(clientOptions, (0, client_encryption_1.autoSelectSocketOptions)(this._client.s?.options ?? {}));\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */ async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        } catch (error) {\n            throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', {\n                cause: error\n            });\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */ async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */ async encrypt(ns, cmd, options = {}) {\n        options.signal?.throwIfAborted();\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: (0, client_encryption_1.autoSelectSocketOptions)(this._client.s.options)\n        });\n        return (0, bson_1.deserialize)(await stateMachine.execute(this, context, options), {\n            promoteValues: false,\n            promoteLongs: false\n        });\n    }\n    /**\n     * Decrypt a command response\n     */ async decrypt(response, options = {}) {\n        options.signal?.throwIfAborted();\n        const context = this._mongocrypt.makeDecryptionContext(response);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: (0, client_encryption_1.autoSelectSocketOptions)(this._client.s.options)\n        });\n        return await stateMachine.execute(this, context, options);\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */ async askForKMSCredentials() {\n        return await (0, providers_1.refreshKMSCredentials)(this._kmsProviders, this._credentialProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */ get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = constants_1.kDecorateResult; //# sourceMappingURL=auto_encrypter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientEncryption = void 0;\nexports.autoSelectSocketOptions = autoSelectSocketOptions;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        const { timeoutMS } = (0, utils_1.resolveTimeoutOptions)(client, options);\n        this._timeoutMS = timeoutMS;\n        this._credentialProviders = options.credentialProviders;\n        if (options.credentialProviders?.aws && !(0, index_1.isEmptyCredentials)('aws', this._kmsProviders)) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Can only provide a custom AWS credential provider when the state machine is configured for automatic AWS credential fetching');\n        }\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = options?.timeoutContext ??\n            timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }));\n        const dataKey = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, {\n            writeConcern: { w: 'majority' },\n            timeoutMS: timeoutContext?.csotEnabled()\n                ? timeoutContext?.getRemainingTimeMSOrThrow()\n                : undefined\n        });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }));\n        const { v: dataKeys } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' },\n            timeoutMS: timeoutContext.csotEnabled() ? timeoutContext?.remainingTimeMS : undefined\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before', timeoutMS: this._timeoutMS });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before',\n            timeoutMS: this._timeoutMS\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, {\n                        masterKey,\n                        // clone the timeoutContext\n                        // in order to avoid sharing the same timeout for server selection and connection checkout across different concurrent operations\n                        timeoutContext: timeoutContext?.csotEnabled() ? timeoutContext?.clone() : undefined\n                    })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields,\n                timeoutMS: timeoutContext?.csotEnabled()\n                    ? timeoutContext?.getRemainingTimeMSOrThrow()\n                    : undefined\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return await this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"range\" and algorithm is \"Range\".\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return await this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return await (0, index_1.refreshKMSCredentials)(this._kmsProviders, this._credentialProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        return v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n/**\n * Get the socket options from the client.\n * @param baseOptions - The mongo client options.\n * @returns ClientEncryptionSocketOptions\n */\nfunction autoSelectSocketOptions(baseOptions) {\n    const options = { autoSelectFamily: true };\n    if ('autoSelectFamily' in baseOptions) {\n        options.autoSelectFamily = baseOptions.autoSelectFamily;\n    }\n    if ('autoSelectFamilyAttemptTimeout' in baseOptions) {\n        options.autoSelectFamilyAttemptTimeout = baseOptions.autoSelectFamilyAttemptTimeout;\n    }\n    return options;\n}\n//# sourceMappingURL=client_encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = void 0;\nexports.makeAES256Hook = makeAES256Hook;\nexports.randomHook = randomHook;\nexports.sha256Hook = sha256Hook;\nexports.makeHmacHook = makeHmacHook;\nexports.signRsaSha256Hook = signRsaSha256Hook;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2NyeXB0b19jYWxsYmFja3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCO0FBQzNLLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQix5QkFBeUI7QUFDekIsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsdUJBQXVCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY2xpZW50LXNpZGUtZW5jcnlwdGlvblxcY3J5cHRvX2NhbGxiYWNrcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBleHBvcnRzLmhtYWNTaGE1MTJIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IHZvaWQgMDtcbmV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSBtYWtlQUVTMjU2SG9vaztcbmV4cG9ydHMucmFuZG9tSG9vayA9IHJhbmRvbUhvb2s7XG5leHBvcnRzLnNoYTI1Nkhvb2sgPSBzaGEyNTZIb29rO1xuZXhwb3J0cy5tYWtlSG1hY0hvb2sgPSBtYWtlSG1hY0hvb2s7XG5leHBvcnRzLnNpZ25Sc2FTaGEyNTZIb29rID0gc2lnblJzYVNoYTI1Nkhvb2s7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuZnVuY3Rpb24gbWFrZUFFUzI1Nkhvb2sobWV0aG9kLCBtb2RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIGl2LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG9bbWV0aG9kXShtb2RlLCBrZXksIGl2KTtcbiAgICAgICAgICAgIGNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjaXBoZXIudXBkYXRlKGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsID0gY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgICBpZiAoZmluYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgZmluYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJhbmRvbUhvb2soYnVmZmVyLCBjb3VudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhidWZmZXIsIDAsIGNvdW50KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmZ1bmN0aW9uIHNoYTI1Nkhvb2soaW5wdXQsIG91dHB1dCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShpbnB1dCkuZGlnZXN0KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xufVxuZnVuY3Rpb24gbWFrZUhtYWNIb29rKGFsZ29yaXRobSkge1xuICAgIHJldHVybiAoa2V5LCBpbnB1dCwgb3V0cHV0KSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjcnlwdG8uY3JlYXRlSG1hYyhhbGdvcml0aG0sIGtleSkudXBkYXRlKGlucHV0KS5kaWdlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNpZ25Sc2FTaGEyNTZIb29rKGtleSwgaW5wdXQsIG91dHB1dCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ3NoYTI1NldpdGhSU0FFbmNyeXB0aW9uJyk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbShgLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuJHtrZXkudG9TdHJpbmcoJ2Jhc2U2NCcpfVxcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cXG5gKTtcbiAgICAgICAgcmVzdWx0ID0gc2lnbmVyLnVwZGF0ZShpbnB1dCkuZW5kKCkuc2lnbihwcml2YXRlS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG59XG5leHBvcnRzLmFlczI1NkNiY0VuY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZUNpcGhlcml2JywgJ2Flcy0yNTYtY2JjJyk7XG5leHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZURlY2lwaGVyaXYnLCAnYWVzLTI1Ni1jYmMnKTtcbmV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlQ2lwaGVyaXYnLCAnYWVzLTI1Ni1jdHInKTtcbmV4cG9ydHMuYWVzMjU2Q3RyRGVjcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlRGVjaXBoZXJpdicsICdhZXMtMjU2LWN0cicpO1xuZXhwb3J0cy5obWFjU2hhNTEySG9vayA9IG1ha2VIbWFjSG9vaygnc2hhNTEyJyk7XG5leHBvcnRzLmhtYWNTaGEyNTZIb29rID0gbWFrZUhtYWNIb29rKCdzaGEyNTYnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b19jYWxsYmFja3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQ0FBK0MsR0FBRyxzQ0FBc0MsR0FBRyxnREFBZ0QsR0FBRyxvQ0FBb0MsR0FBRyxzQ0FBc0MsR0FBRyx1QkFBdUI7QUFDclAsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDLHdEQUF3RCxjQUFjLEtBQUssT0FBTztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQyw4Q0FBOEMsY0FBYyxLQUFLLE9BQU87QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNsaWVudC1zaWRlLWVuY3J5cHRpb25cXGVycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdEVycm9yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IHNvbWV0aGluZyB3ZW50IHdyb25nIHNwZWNpZmljYWxseSB3aXRoIE1vbmdvREIgQ2xpZW50IEVuY3J5cHRpb25cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0Vycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEVycm9yID0gTW9uZ29DcnlwdEVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhbiBpbnZhbGlkIGFyZ3VtZW50IHdhcyBwcm92aWRlZCB0byBhbiBlbmNyeXB0aW9uIEFQSS5cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvciA9IE1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGBDbGllbnRFbmNyeXB0aW9uLmNyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb24oKWAgZmFpbGVkIHRvIGNyZWF0ZSBkYXRhIGtleXNcbiAqL1xuY2xhc3MgTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKGVuY3J5cHRlZEZpZWxkcywgeyBjYXVzZSB9KSB7XG4gICAgICAgIHN1cGVyKGBVbmFibGUgdG8gY29tcGxldGUgY3JlYXRpbmcgZGF0YSBrZXlzOiAke2NhdXNlLm1lc3NhZ2V9YCwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5lbmNyeXB0ZWRGaWVsZHMgPSBlbmNyeXB0ZWRGaWVsZHM7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciA9IE1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBgQ2xpZW50RW5jcnlwdGlvbi5jcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uKClgIGZhaWxlZCB0byBjcmVhdGUgYSBjb2xsZWN0aW9uXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihlbmNyeXB0ZWRGaWVsZHMsIHsgY2F1c2UgfSkge1xuICAgICAgICBzdXBlcihgVW5hYmxlIHRvIGNyZWF0ZSBjb2xsZWN0aW9uOiAke2NhdXNlLm1lc3NhZ2V9YCwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5lbmNyeXB0ZWRGaWVsZHMgPSBlbmNyeXB0ZWRGaWVsZHM7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciA9IE1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBtb25nb2RiLWNsaWVudC1lbmNyeXB0aW9uIGZhaWxlZCB0byBhdXRvLXJlZnJlc2ggQXp1cmUgS01TIGNyZWRlbnRpYWxzLlxuICovXG5jbGFzcyBNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBib2R5KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yID0gTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIE1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvciA9IE1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.spawnPath = '';\n        this.spawnArgs = [];\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnPath') && extraOptions.mongocryptdSpawnPath) {\n            this.spawnPath = extraOptions.mongocryptdSpawnPath;\n        }\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnArgs') &&\n            Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nexports.MongocryptdManager = MongocryptdManager;\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\n//# sourceMappingURL=mongocryptd_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL21vbmdvY3J5cHRkX21hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVEsRUFBRSxtQkFBTyxDQUFDLG9DQUFlO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNsaWVudC1zaWRlLWVuY3J5cHRpb25cXG1vbmdvY3J5cHRkX21hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvY3J5cHRkTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQW4gaW50ZXJuYWwgY2xhc3MgdGhhdCBoYW5kbGVzIHNwYXduaW5nIGEgbW9uZ29jcnlwdGQuXG4gKi9cbmNsYXNzIE1vbmdvY3J5cHRkTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoZXh0cmFPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5zcGF3blBhdGggPSAnJztcbiAgICAgICAgdGhpcy5zcGF3bkFyZ3MgPSBbXTtcbiAgICAgICAgdGhpcy51cmkgPVxuICAgICAgICAgICAgdHlwZW9mIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFVSSSA9PT0gJ3N0cmluZycgJiYgZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFVSSVxuICAgICAgICAgICAgICAgIDogTW9uZ29jcnlwdGRNYW5hZ2VyLkRFRkFVTFRfTU9OR09DUllQVERfVVJJO1xuICAgICAgICB0aGlzLmJ5cGFzc1NwYXduID0gISFleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRCeXBhc3NTcGF3bjtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZXh0cmFPcHRpb25zLCAnbW9uZ29jcnlwdGRTcGF3blBhdGgnKSAmJiBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3blBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3Bhd25QYXRoID0gZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25QYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duKGV4dHJhT3B0aW9ucywgJ21vbmdvY3J5cHRkU3Bhd25BcmdzJykgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25BcmdzKSkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bkFyZ3MgPSB0aGlzLnNwYXduQXJncy5jb25jYXQoZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25BcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zcGF3bkFyZ3NcbiAgICAgICAgICAgIC5maWx0ZXIoYXJnID0+IHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgLmV2ZXJ5KGFyZyA9PiBhcmcuaW5kZXhPZignLS1pZGxlU2h1dGRvd25UaW1lb3V0U2VjcycpIDwgMCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Bhd25BcmdzLnB1c2goJy0taWRsZVNodXRkb3duVGltZW91dFNlY3MnLCAnNjAnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIGNoZWNrIHRvIHNlZSBpZiBhIG1vbmdvY3J5cHRkIGlzIHVwLiBJZiBpdCBpcyBub3QgdXAsIGl0IHdpbGwgYXR0ZW1wdFxuICAgICAqIHRvIHNwYXduIGEgbW9uZ29jcnlwdGQgaW4gYSBkZXRhY2hlZCBwcm9jZXNzLCBhbmQgdGhlbiB3YWl0IGZvciBpdCB0byBiZSB1cC5cbiAgICAgKi9cbiAgICBhc3luYyBzcGF3bigpIHtcbiAgICAgICAgY29uc3QgY21kTmFtZSA9IHRoaXMuc3Bhd25QYXRoIHx8ICdtb25nb2NyeXB0ZCc7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgIGNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbiAgICAgICAgLy8gU3Bhd25lZCB3aXRoIHN0ZGlvOiBpZ25vcmUgYW5kIGRldGFjaGVkOiB0cnVlXG4gICAgICAgIC8vIHRvIGVuc3VyZSBjaGlsZCBjYW4gb3V0bGl2ZSBwYXJlbnQuXG4gICAgICAgIHRoaXMuX2NoaWxkID0gc3Bhd24oY21kTmFtZSwgdGhpcy5zcGF3bkFyZ3MsIHtcbiAgICAgICAgICAgIHN0ZGlvOiAnaWdub3JlJyxcbiAgICAgICAgICAgIGRldGFjaGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9jaGlsZC5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBGcm9tIHRoZSBGTEUgc3BlYzpcbiAgICAgICAgICAgIC8vIFwiVGhlIHN0ZG91dCBhbmQgc3RkZXJyIG9mIHRoZSBzcGF3bmVkIHByb2Nlc3MgTVVTVCBub3QgYmUgZXhwb3NlZCBpbiB0aGUgZHJpdmVyXG4gICAgICAgICAgICAvLyAoZS5nLiByZWRpcmVjdCB0byAvZGV2L251bGwpLiBVc2VycyBjYW4gcGFzcyB0aGUgYXJndW1lbnQgLS1sb2dwYXRoIHRvXG4gICAgICAgICAgICAvLyBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MgaWYgdGhleSBuZWVkIHRvIGluc3BlY3QgbW9uZ29jcnlwdGQgbG9ncy5cbiAgICAgICAgICAgIC8vIElmIHNwYXduaW5nIGlzIG5lY2Vzc2FyeSwgdGhlIGRyaXZlciBNVVNUIHNwYXduIG1vbmdvY3J5cHRkIHdoZW5ldmVyIHNlcnZlclxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uIG9uIHRoZSBNb25nb0NsaWVudCB0byBtb25nb2NyeXB0ZCBmYWlscy4gSWYgdGhlIE1vbmdvQ2xpZW50IGZhaWxzIHRvXG4gICAgICAgICAgICAvLyBjb25uZWN0IGFmdGVyIHNwYXduaW5nLCB0aGUgc2VydmVyIHNlbGVjdGlvbiBlcnJvciBpcyBwcm9wYWdhdGVkIHRvIHRoZSB1c2VyLlwiXG4gICAgICAgICAgICAvLyBUaGUgQXV0b0VuY3J5cHRlciBhbmQgTW9uZ29DcnlwdGRNYW5hZ2VyIHNob3VsZCB3b3JrIHRvZ2V0aGVyIHRvIHNwYXduXG4gICAgICAgICAgICAvLyBtb25nb2NyeXB0ZCB3aGVuZXZlciBuZWNlc3NhcnkuICBBZGRpdGlvbmFsbHksIHRoZSBgbW9uZ29jcnlwdGRgIGludGVudGlvbmFsbHlcbiAgICAgICAgICAgIC8vIHNodXRzIGRvd24gYWZ0ZXIgNjBzIGFuZCBnZXRzIHJlc3Bhd25lZCB3aGVuIG5lY2Vzc2FyeS4gIFdlIHJlbHkgb24gc2VydmVyXG4gICAgICAgICAgICAvLyBzZWxlY3Rpb24gdGltZW91dHMgd2hlbiBjb25uZWN0aW5nIHRvIHRoZSBgbW9uZ29jcnlwdGRgIHRvIGluZm9ybSB1c2VycyB0aGF0IHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaGFzIGJlZW4gY29uZmlndXJlZCBpbmNvcnJlY3RseS4gIEZvciB0aG9zZSByZWFzb25zLCB3ZSBzdXBwcmVzcyBzdGRlcnIgZnJvbVxuICAgICAgICAgICAgLy8gdGhlIGBtb25nb2NyeXB0ZGAgcHJvY2VzcyBhbmQgaW1tZWRpYXRlbHkgdW5yZWYgdGhlIHByb2Nlc3MuXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB1bnJlZiBjaGlsZCB0byByZW1vdmUgaGFuZGxlIGZyb20gZXZlbnQgbG9vcFxuICAgICAgICB0aGlzLl9jaGlsZC51bnJlZigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmbmAgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGFzeW5jIHdpdGhSZXNwYXduKGZuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGJ5cGFzc2luZyBzcGF3bmluZywgdGhlbiB3ZSBzaG91bGQgcmV0cnkgb25jZSBvbiBhIE1vbmdvVGltZW91dEVycm9yIChzZXJ2ZXIgc2VsZWN0aW9uIGVycm9yKVxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU3Bhd24gPSBlcnIgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya1RpbWVvdXRFcnJvciAmJiAhdGhpcy5ieXBhc3NTcGF3bjtcbiAgICAgICAgICAgIGlmICghc2hvdWxkU3Bhd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5zcGF3bigpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29jcnlwdGRNYW5hZ2VyID0gTW9uZ29jcnlwdGRNYW5hZ2VyO1xuTW9uZ29jcnlwdGRNYW5hZ2VyLkRFRkFVTFRfTU9OR09DUllQVERfVVJJID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29jcnlwdGRfbWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAWSCredentials = loadAWSCredentials;\nconst aws_temporary_credentials_1 = __webpack_require__(/*! ../../cmap/auth/aws_temporary_credentials */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders, provider) {\n    const credentialProvider = new aws_temporary_credentials_1.AWSSDKCredentialProvider(provider);\n    // We shouldn't ever receive a response from the AWS SDK that doesn't have a `SecretAccessKey`\n    // or `AccessKeyId`.  However, TS says these fields are optional.  We provide empty strings\n    // and let libmongocrypt error if we're unable to fetch the required keys.\n    const { SecretAccessKey = '', AccessKeyId = '', Token } = await credentialProvider.getCredentials();\n    const aws = {\n        secretAccessKey: SecretAccessKey,\n        accessKeyId: AccessKeyId\n    };\n    // the AWS session token is only required for temporary credentials so only attach it to the\n    // result if it's present in the response from the aws sdk\n    Token != null && (aws.sessionToken = Token);\n    return { ...kmsProviders, aws };\n}\n//# sourceMappingURL=aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9hd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLG9DQUFvQyxtQkFBTyxDQUFDLGdLQUEyQztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnREFBZ0Q7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY2xpZW50LXNpZGUtZW5jcnlwdGlvblxccHJvdmlkZXJzXFxhd3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRBV1NDcmVkZW50aWFscyA9IGxvYWRBV1NDcmVkZW50aWFscztcbmNvbnN0IGF3c190ZW1wb3JhcnlfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jbWFwL2F1dGgvYXdzX3RlbXBvcmFyeV9jcmVkZW50aWFsc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRBV1NDcmVkZW50aWFscyhrbXNQcm92aWRlcnMsIHByb3ZpZGVyKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gbmV3IGF3c190ZW1wb3JhcnlfY3JlZGVudGlhbHNfMS5BV1NTREtDcmVkZW50aWFsUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgIC8vIFdlIHNob3VsZG4ndCBldmVyIHJlY2VpdmUgYSByZXNwb25zZSBmcm9tIHRoZSBBV1MgU0RLIHRoYXQgZG9lc24ndCBoYXZlIGEgYFNlY3JldEFjY2Vzc0tleWBcbiAgICAvLyBvciBgQWNjZXNzS2V5SWRgLiAgSG93ZXZlciwgVFMgc2F5cyB0aGVzZSBmaWVsZHMgYXJlIG9wdGlvbmFsLiAgV2UgcHJvdmlkZSBlbXB0eSBzdHJpbmdzXG4gICAgLy8gYW5kIGxldCBsaWJtb25nb2NyeXB0IGVycm9yIGlmIHdlJ3JlIHVuYWJsZSB0byBmZXRjaCB0aGUgcmVxdWlyZWQga2V5cy5cbiAgICBjb25zdCB7IFNlY3JldEFjY2Vzc0tleSA9ICcnLCBBY2Nlc3NLZXlJZCA9ICcnLCBUb2tlbiB9ID0gYXdhaXQgY3JlZGVudGlhbFByb3ZpZGVyLmdldENyZWRlbnRpYWxzKCk7XG4gICAgY29uc3QgYXdzID0ge1xuICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IFNlY3JldEFjY2Vzc0tleSxcbiAgICAgICAgYWNjZXNzS2V5SWQ6IEFjY2Vzc0tleUlkXG4gICAgfTtcbiAgICAvLyB0aGUgQVdTIHNlc3Npb24gdG9rZW4gaXMgb25seSByZXF1aXJlZCBmb3IgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIHNvIG9ubHkgYXR0YWNoIGl0IHRvIHRoZVxuICAgIC8vIHJlc3VsdCBpZiBpdCdzIHByZXNlbnQgaW4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIGF3cyBzZGtcbiAgICBUb2tlbiAhPSBudWxsICYmIChhd3Muc2Vzc2lvblRva2VuID0gVG9rZW4pO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgYXdzIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tokenCache = exports.AzureCredentialCache = exports.AZURE_BASE_URL = void 0;\nexports.addAzureParams = addAzureParams;\nexports.prepareRequest = prepareRequest;\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\nexports.loadAzureCredentials = loadAzureCredentials;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/** Base URL for getting Azure tokens. */\nexports.AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?';\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n * Get the Azure endpoint URL.\n */\nfunction addAzureParams(url, resource, username) {\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', resource);\n    if (username) {\n        url.searchParams.append('client_id', username);\n    }\n    return url;\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? exports.AZURE_BASE_URL);\n    addAzureParams(url, 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    try {\n        const response = await (0, utils_1.get)(url, { headers });\n        return await parseResponse(response);\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadGCPCredentials = loadGCPCredentials;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\n//# sourceMappingURL=gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9nY3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGVBQWUsbUJBQU8sQ0FBQyxrR0FBWTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBLEtBQUs7QUFDTCxhQUFhLHdCQUF3QjtBQUNyQztBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbGllbnQtc2lkZS1lbmNyeXB0aW9uXFxwcm92aWRlcnNcXGdjcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEdDUENyZWRlbnRpYWxzID0gbG9hZEdDUENyZWRlbnRpYWxzO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG4vKiogQGludGVybmFsICovXG5hc3luYyBmdW5jdGlvbiBsb2FkR0NQQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgZ2NwTWV0YWRhdGEgPSAoMCwgZGVwc18xLmdldEdjcE1ldGFkYXRhKSgpO1xuICAgIGlmICgna01vZHVsZUVycm9yJyBpbiBnY3BNZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4ga21zUHJvdmlkZXJzO1xuICAgIH1cbiAgICBjb25zdCB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSA9IGF3YWl0IGdjcE1ldGFkYXRhLmluc3RhbmNlKHtcbiAgICAgICAgcHJvcGVydHk6ICdzZXJ2aWNlLWFjY291bnRzL2RlZmF1bHQvdG9rZW4nXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBnY3A6IHsgYWNjZXNzVG9rZW4gfSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2NwLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyCredentials = isEmptyCredentials;\nexports.refreshKMSCredentials = refreshKMSCredentials;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders, credentialProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders, credentialProviders?.aws);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQyw2SEFBTztBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQyxpSUFBUztBQUNqQyxjQUFjLG1CQUFPLENBQUMsNkhBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbGllbnQtc2lkZS1lbmNyeXB0aW9uXFxwcm92aWRlcnNcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5Q3JlZGVudGlhbHMgPSBpc0VtcHR5Q3JlZGVudGlhbHM7XG5leHBvcnRzLnJlZnJlc2hLTVNDcmVkZW50aWFscyA9IHJlZnJlc2hLTVNDcmVkZW50aWFscztcbmNvbnN0IGF3c18xID0gcmVxdWlyZShcIi4vYXdzXCIpO1xuY29uc3QgYXp1cmVfMSA9IHJlcXVpcmUoXCIuL2F6dXJlXCIpO1xuY29uc3QgZ2NwXzEgPSByZXF1aXJlKFwiLi9nY3BcIik7XG4vKipcbiAqIEF1dG8gY3JlZGVudGlhbCBmZXRjaGluZyBzaG91bGQgb25seSBvY2N1ciB3aGVuIHRoZSBwcm92aWRlciBpcyBkZWZpbmVkIG9uIHRoZSBrbXNQcm92aWRlcnMgbWFwXG4gKiBhbmQgdGhlIHNldHRpbmdzIGFyZSBhbiBlbXB0eSBvYmplY3QuXG4gKlxuICogVGhpcyBpcyBkaXN0aW5jdCBmcm9tIGEgbnVsbGlzaCBwcm92aWRlciBrZXkuXG4gKlxuICogQGludGVybmFsIC0gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlDcmVkZW50aWFscyhwcm92aWRlck5hbWUsIGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0ga21zUHJvdmlkZXJzW3Byb3ZpZGVyTmFtZV07XG4gICAgaWYgKHByb3ZpZGVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHByb3ZpZGVyID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhwcm92aWRlcikubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBMb2FkIGNsb3VkIHByb3ZpZGVyIGNyZWRlbnRpYWxzIGZvciB0aGUgdXNlciBwcm92aWRlZCBLTVMgcHJvdmlkZXJzLlxuICogQ3JlZGVudGlhbHMgd2lsbCBvbmx5IGF0dGVtcHQgdG8gZ2V0IGxvYWRlZCBpZiB0aGV5IGRvIG5vdCBleGlzdFxuICogYW5kIG5vIGV4aXN0aW5nIGNyZWRlbnRpYWxzIHdpbGwgZ2V0IG92ZXJ3cml0dGVuLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoS01TQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzLCBjcmVkZW50aWFsUHJvdmlkZXJzKSB7XG4gICAgbGV0IGZpbmFsS01TUHJvdmlkZXJzID0ga21zUHJvdmlkZXJzO1xuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F3cycsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXdzXzEubG9hZEFXU0NyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycywgY3JlZGVudGlhbFByb3ZpZGVycz8uYXdzKTtcbiAgICB9XG4gICAgaWYgKGlzRW1wdHlDcmVkZW50aWFscygnZ2NwJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBnY3BfMS5sb2FkR0NQQ3JlZGVudGlhbHMpKGZpbmFsS01TUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgaWYgKGlzRW1wdHlDcmVkZW50aWFscygnYXp1cmUnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGF6dXJlXzEubG9hZEF6dXJlQ3JlZGVudGlhbHMpKGZpbmFsS01TUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmFsS01TUHJvdmlkZXJzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ../cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst client_encryption_1 = __webpack_require__(/*! ./client_encryption */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n * guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n * nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n * we return an error when there are no matching keys.  This error is generated in\n * subsequent iterations of the state machine.\n * Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n * do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n * will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n * otherwise we'll return `{ v: [] }`.\n */\nlet EMPTY_V;\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\n// TODO(DRIVERS-2671): clarify CSOT behavior for FLE APIs\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context, options) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        // Typescript treats getters just like properties: Once you've tested it for equality\n        // it cannot change. Which is exactly the opposite of what we use state and status for.\n        // Every call to at least `addMongoOperationResponse` and `finalize` can change the state.\n        // These wrappers let us write code more naturally and not add compiler exceptions\n        // to conditions checks inside the state machine.\n        const getStatus = () => context.status;\n        const getState = () => context.state;\n        while (getState() !== MONGOCRYPT_CTX_DONE && getState() !== MONGOCRYPT_CTX_ERROR) {\n            options.signal?.throwIfAborted();\n            debug(`[context#${context.id}] ${stateToString.get(getState()) || getState()}`);\n            switch (getState()) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfoCursor = this.fetchCollectionInfo(metaDataClient, context.ns, filter, options);\n                    for await (const collInfo of collInfoCursor) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(collInfo));\n                        if (getState() === MONGOCRYPT_CTX_ERROR)\n                            break;\n                    }\n                    if (getState() === MONGOCRYPT_CTX_ERROR)\n                        break;\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (getState() === MONGOCRYPT_CTX_ERROR)\n                        break;\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command, options))\n                        : await this.markCommand(mongocryptdClient, context.ns, command, options);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter, options);\n                    if (keys.length === 0) {\n                        // See docs on EMPTY_V\n                        result = EMPTY_V ??= (0, bson_1.serialize)({ v: [] });\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    await Promise.all(this.requests(context, options));\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    if (getState() === MONGOCRYPT_CTX_ERROR) {\n                        const message = getStatus().message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = finalizedContext;\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${getState()}`);\n            }\n        }\n        if (getState() === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = getStatus().message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    async kmsRequest(request, options) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const socketOptions = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port,\n            ...(0, client_encryption_1.autoSelectSocketOptions)(this.options.socketOptions || {})\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        let netSocket;\n        let socket;\n        function destroySockets() {\n            for (const sock of [socket, netSocket]) {\n                if (sock) {\n                    sock.destroy();\n                }\n            }\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError('KMS request failed', { cause });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError('KMS request closed');\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, socketOptions);\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        let abortListener;\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                netSocket = new net.Socket();\n                const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n                netSocket\n                    .once('error', err => rejectOnNetSocketError(onerror(err)))\n                    .once('close', () => rejectOnNetSocketError(onclose()))\n                    .once('connect', () => resolveOnNetSocketConnect());\n                const netSocketOptions = {\n                    ...socketOptions,\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                };\n                netSocket.connect(netSocketOptions);\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    socketOptions.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: 'connect',\n                        destination: { host: socketOptions.host, port: socketOptions.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(socketOptions, () => {\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            abortListener = (0, utils_1.addAbortListener)(options?.signal, function () {\n                destroySockets();\n                rejectOnTlsSocketError(this.reason);\n            });\n            socket\n                .once('error', err => rejectOnTlsSocketError(onerror(err)))\n                .once('close', () => rejectOnTlsSocketError(onclose()))\n                .on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await (options?.timeoutContext?.csotEnabled()\n                ? Promise.all([\n                    willResolveKmsRequest,\n                    timeout_1.Timeout.expires(options.timeoutContext?.remainingTimeMS)\n                ])\n                : willResolveKmsRequest);\n        }\n        catch (error) {\n            if (error instanceof timeout_1.TimeoutError)\n                throw new error_1.MongoOperationTimeoutError('KMS request timed out');\n            throw error;\n        }\n        finally {\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n            abortListener?.[utils_1.kDispose]();\n        }\n    }\n    *requests(context, options) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request, options);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    fetchCollectionInfo(client, ns, filter, options) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const cursor = client.db(db).listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false,\n            timeoutContext: options?.timeoutContext && new abstract_cursor_1.CursorTimeoutContext(options?.timeoutContext, Symbol()),\n            signal: options?.signal,\n            nameOnly: false\n        });\n        return cursor;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command, options) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const bsonOptions = { promoteLongs: false, promoteValues: false };\n        const rawCommand = (0, bson_1.deserialize)(command, bsonOptions);\n        const commandOptions = {\n            timeoutMS: undefined,\n            signal: undefined\n        };\n        if (options?.timeoutContext?.csotEnabled()) {\n            commandOptions.timeoutMS = options.timeoutContext.remainingTimeMS;\n        }\n        if (options?.signal) {\n            commandOptions.signal = options.signal;\n        }\n        const response = await client.db(db).command(rawCommand, {\n            ...bsonOptions,\n            ...commandOptions\n        });\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter, options) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        const commandOptions = {\n            timeoutContext: undefined,\n            signal: undefined\n        };\n        if (options?.timeoutContext != null) {\n            commandOptions.timeoutContext = new abstract_cursor_1.CursorTimeoutContext(options.timeoutContext, Symbol());\n        }\n        if (options?.signal != null) {\n            commandOptions.signal = options.signal;\n        }\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter), commandOptions)\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvYXV0aF9wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxtQkFBbUI7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXGF1dGhfcHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF1dGhQcm92aWRlciA9IGV4cG9ydHMuQXV0aENvbnRleHQgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuLyoqXG4gKiBDb250ZXh0IHVzZWQgZHVyaW5nIGF1dGhlbnRpY2F0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0aENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBJZiB0aGUgY29udGV4dCBpcyBmb3IgcmVhdXRoZW50aWNhdGlvbi4gKi9cbiAgICAgICAgdGhpcy5yZWF1dGhlbnRpY2F0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkF1dGhDb250ZXh0ID0gQXV0aENvbnRleHQ7XG4vKipcbiAqIFByb3ZpZGVyIHVzZWQgZHVyaW5nIGF1dGhlbnRpY2F0aW9uLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgaGFuZHNoYWtlIGRvY3VtZW50IGJlZm9yZSB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZHNoYWtlRG9jIC0gVGhlIGRvY3VtZW50IHVzZWQgZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiBhIGNvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gYXV0aENvbnRleHQgLSBDb250ZXh0IGZvciBhdXRoZW50aWNhdGlvbiBmbG93XG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIF9hdXRoQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gaGFuZHNoYWtlRG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWF1dGhlbnRpY2F0ZS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBzaGFyZWQgYXV0aCBjb250ZXh0LlxuICAgICAqL1xuICAgIGFzeW5jIHJlYXV0aChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWF1dGhlbnRpY2F0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF1dGgoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LegacyAWSTemporaryCredentialProvider = exports.AWSSDKCredentialProvider = exports.AWSTemporaryCredentialProvider = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n/**\n * @internal\n *\n * Fetches temporary AWS credentials.\n */\nclass AWSTemporaryCredentialProvider {\n    static get awsSDK() {\n        AWSTemporaryCredentialProvider._awsSDK ??= (0, deps_1.getAwsCredentialProvider)();\n        return AWSTemporaryCredentialProvider._awsSDK;\n    }\n    static get isAWSSDKInstalled() {\n        return !('kModuleError' in AWSTemporaryCredentialProvider.awsSDK);\n    }\n}\nexports.AWSTemporaryCredentialProvider = AWSTemporaryCredentialProvider;\n/** @internal */\nclass AWSSDKCredentialProvider extends AWSTemporaryCredentialProvider {\n    /**\n     * Create the SDK credentials provider.\n     * @param credentialsProvider - The credentials provider.\n     */\n    constructor(credentialsProvider) {\n        super();\n        if (credentialsProvider) {\n            this._provider = credentialsProvider;\n        }\n    }\n    /**\n     * The AWS SDK caches credentials automatically and handles refresh when the credentials have expired.\n     * To ensure this occurs, we need to cache the `provider` returned by the AWS sdk and re-use it when fetching credentials.\n     */\n    get provider() {\n        if ('kModuleError' in AWSTemporaryCredentialProvider.awsSDK) {\n            throw AWSTemporaryCredentialProvider.awsSDK.kModuleError;\n        }\n        if (this._provider) {\n            return this._provider;\n        }\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n         * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n         */\n        const LEGACY_REGIONS = new Set([\n            'ap-northeast-1',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'aws-global',\n            'ca-central-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-west-1',\n            'us-west-2'\n        ]);\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        this._provider =\n            awsRegionSettingsExist && useRegionalSts\n                ? AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain({\n                    clientConfig: { region: AWS_REGION }\n                })\n                : AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain();\n        return this._provider;\n    }\n    async getCredentials() {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await this.provider();\n            return {\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            };\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message, { cause: error });\n        }\n    }\n}\nexports.AWSSDKCredentialProvider = AWSSDKCredentialProvider;\n/**\n * @internal\n * Fetches credentials manually (without the AWS SDK), as outlined in the [Obtaining Credentials](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#obtaining-credentials)\n * section of the Auth spec.\n */\nclass LegacyAWSTemporaryCredentialProvider extends AWSTemporaryCredentialProvider {\n    async getCredentials() {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`);\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return creds;\n    }\n}\nexports.LegacyAWSTemporaryCredentialProvider = LegacyAWSTemporaryCredentialProvider;\n//# sourceMappingURL=aws_temporary_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nexports.resolveCname = resolveCname;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    const response = await connection.command((0, utils_1.ns)('$external.$cmd'), command);\n    return response;\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return await initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return await negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return await client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return await resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return await resolveCname(host);\n    }\n}\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * @see https://github.com/mongodb/specifications/blob/master/source/auth/auth.md\n */\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default auth mechanism for 4.0 and higher.\n    return providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n}\nconst ALLOWED_ENVIRONMENT_NAMES = [\n    'test',\n    'azure',\n    'gcp',\n    'k8s'\n];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-qa.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure or gcp.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username &&\n                this.mechanismProperties.ENVIRONMENT &&\n                this.mechanismProperties.ENVIRONMENT !== 'azure') {\n                throw new error_1.MongoInvalidArgumentError(`username and ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.username && this.password) {\n                throw new error_1.MongoInvalidArgumentError(`No password is allowed in ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' for '${this.mechanism}'.`);\n            }\n            if ((this.mechanismProperties.ENVIRONMENT === 'azure' ||\n                this.mechanismProperties.ENVIRONMENT === 'gcp') &&\n                !this.mechanismProperties.TOKEN_RESOURCE) {\n                throw new error_1.MongoInvalidArgumentError(TOKEN_RESOURCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.ENVIRONMENT &&\n                !ALLOWED_ENVIRONMENT_NAMES.includes(this.mechanismProperties.ENVIRONMENT)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a ENVIRONMENT in ${ALLOWED_ENVIRONMENT_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (!this.mechanismProperties.ENVIRONMENT &&\n                !this.mechanismProperties.OIDC_CALLBACK &&\n                !this.mechanismProperties.OIDC_HUMAN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a ENVIRONMENT, OIDC_CALLBACK, or OIDC_HUMAN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBAWS = void 0;\nconst BSON = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_temporary_credentials_1 = __webpack_require__(/*! ./aws_temporary_credentials */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst ASCII_N = 110;\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor(credentialProvider) {\n        super();\n        this.credentialProvider = credentialProvider;\n        this.credentialFetcher = aws_temporary_credentials_1.AWSTemporaryCredentialProvider.isAWSSDKInstalled\n            ? new aws_temporary_credentials_1.AWSSDKCredentialProvider(credentialProvider)\n            : new aws_temporary_credentials_1.LegacyAWSTemporaryCredentialProvider();\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.credentialFetcher);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#conversation-5\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: saslStartResponse.conversationId,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, awsCredentialFetcher) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    const temporaryCredentials = await awsCredentialFetcher.getCredentials();\n    return makeMongoCredentialsFromAWSTemp(temporaryCredentials);\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = exports.OIDC_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst azure_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js\");\nconst gcp_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/gcp_machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js\");\nconst k8s_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/k8s_machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/k8s_machine_workflow.js\");\nconst token_cache_1 = __webpack_require__(/*! ./mongodb_oidc/token_cache */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\");\nconst token_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/token_machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** The current version of OIDC implementation. */\nexports.OIDC_VERSION = 1;\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('test', () => new token_machine_workflow_1.TokenMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('azure', () => new azure_machine_workflow_1.AzureMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('gcp', () => new gcp_machine_workflow_1.GCPMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('k8s', () => new k8s_machine_workflow_1.K8SMachineWorkflow(new token_cache_1.TokenCache()));\n/**\n * OIDC auth provider.\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor(workflow) {\n        super();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');\n        }\n        this.workflow = workflow;\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate?.done && !reauthenticating) {\n            return;\n        }\n        const credentials = getCredentials(authContext);\n        if (reauthenticating) {\n            await this.workflow.reauthenticate(connection, credentials);\n        }\n        else {\n            await this.workflow.execute(connection, credentials, response);\n        }\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const { connection } = authContext;\n        const credentials = getCredentials(authContext);\n        const result = await this.workflow.speculativeAuth(connection, credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n//# sourceMappingURL=mongodb_oidc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHNCQUFzQixHQUFHLG9CQUFvQjtBQUNuRSxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQywwSEFBaUI7QUFDakQsaUNBQWlDLG1CQUFPLENBQUMsc0tBQXVDO0FBQ2hGLCtCQUErQixtQkFBTyxDQUFDLGtLQUFxQztBQUM1RSwrQkFBK0IsbUJBQU8sQ0FBQyxrS0FBcUM7QUFDNUUsc0JBQXNCLG1CQUFPLENBQUMsZ0pBQTRCO0FBQzFELGlDQUFpQyxtQkFBTyxDQUFDLHNLQUF1QztBQUNoRjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXG1vbmdvZGJfb2lkYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29EQk9JREMgPSBleHBvcnRzLk9JRENfV09SS0ZMT1dTID0gZXhwb3J0cy5PSURDX1ZFUlNJT04gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNvbnN0IGF6dXJlX21hY2hpbmVfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9henVyZV9tYWNoaW5lX3dvcmtmbG93XCIpO1xuY29uc3QgZ2NwX21hY2hpbmVfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9nY3BfbWFjaGluZV93b3JrZmxvd1wiKTtcbmNvbnN0IGs4c19tYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvazhzX21hY2hpbmVfd29ya2Zsb3dcIik7XG5jb25zdCB0b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL3Rva2VuX2NhY2hlXCIpO1xuY29uc3QgdG9rZW5fbWFjaGluZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL3Rva2VuX21hY2hpbmVfd29ya2Zsb3dcIik7XG4vKiogRXJyb3Igd2hlbiBjcmVkZW50aWFscyBhcmUgbWlzc2luZy4gKi9cbmNvbnN0IE1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IgPSAnQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLic7XG4vKiogVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBPSURDIGltcGxlbWVudGF0aW9uLiAqL1xuZXhwb3J0cy5PSURDX1ZFUlNJT04gPSAxO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IG5ldyBNYXAoKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCd0ZXN0JywgKCkgPT4gbmV3IHRva2VuX21hY2hpbmVfd29ya2Zsb3dfMS5Ub2tlbk1hY2hpbmVXb3JrZmxvdyhuZXcgdG9rZW5fY2FjaGVfMS5Ub2tlbkNhY2hlKCkpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhenVyZScsICgpID0+IG5ldyBhenVyZV9tYWNoaW5lX3dvcmtmbG93XzEuQXp1cmVNYWNoaW5lV29ya2Zsb3cobmV3IHRva2VuX2NhY2hlXzEuVG9rZW5DYWNoZSgpKSk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnZ2NwJywgKCkgPT4gbmV3IGdjcF9tYWNoaW5lX3dvcmtmbG93XzEuR0NQTWFjaGluZVdvcmtmbG93KG5ldyB0b2tlbl9jYWNoZV8xLlRva2VuQ2FjaGUoKSkpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2s4cycsICgpID0+IG5ldyBrOHNfbWFjaGluZV93b3JrZmxvd18xLks4U01hY2hpbmVXb3JrZmxvdyhuZXcgdG9rZW5fY2FjaGVfMS5Ub2tlbkNhY2hlKCkpKTtcbi8qKlxuICogT0lEQyBhdXRoIHByb3ZpZGVyLlxuICovXG5jbGFzcyBNb25nb0RCT0lEQyBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBhdXRoIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHdvcmtmbG93KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghd29ya2Zsb3cpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ05vIHdvcmtmbG93IHByb3ZpZGVkIHRvIHRoZSBPSURDIGF1dGggcHJvdmlkZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53b3JrZmxvdyA9IHdvcmtmbG93O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGUgdXNpbmcgT0lEQ1xuICAgICAqL1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCByZWF1dGhlbnRpY2F0aW5nLCByZXNwb25zZSB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmIChyZXNwb25zZT8uc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU/LmRvbmUgJiYgIXJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KTtcbiAgICAgICAgaWYgKHJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud29ya2Zsb3cucmVhdXRoZW50aWNhdGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53b3JrZmxvdy5leGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBzcGVjdWxhdGl2ZSBhdXRoIGZvciB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndvcmtmbG93LnNwZWN1bGF0aXZlQXV0aChjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgLi4ucmVzdWx0IH07XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0RCT0lEQyA9IE1vbmdvREJPSURDO1xuLyoqXG4gKiBHZXQgY3JlZGVudGlhbHMgZnJvbSB0aGUgYXV0aCBjb250ZXh0LCB0aHJvd2luZyBpZiB0aGV5IGRvIG5vdCBleGlzdC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoTUlTU0lOR19DUkVERU5USUFMU19FUlJPUik7XG4gICAgfVxuICAgIHJldHVybiBjcmVkZW50aWFscztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvZGJfb2lkYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutomatedCallbackWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../../../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ../mongodb_oidc */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./callback_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass AutomatedCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials) {\n        // If there is a cached access token, try to authenticate with it. If\n        // authentication fails with an Authentication error (18),\n        // invalidate the access token, fetch a new access token, and try\n        // to authenticate again.\n        // If the server fails for any other reason, do not clear the cache.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        const response = await this.fetchAccessToken(credentials);\n        this.cache.put(response);\n        connection.accessToken = response.accessToken;\n        await this.finishAuthentication(connection, credentials, response.accessToken);\n    }\n    /**\n     * Fetches the access token using the callback.\n     */\n    async fetchAccessToken(credentials) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.AUTOMATED_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.AUTOMATED_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.AutomatedCallbackWorkflow = AutomatedCallbackWorkflow;\n//# sourceMappingURL=automated_callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F1dG9tYXRlZF9jYWxsYmFja193b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsdUdBQWdCO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLDJHQUFrQjtBQUM1Qyx1QkFBdUIsbUJBQU8sQ0FBQyx5SEFBaUI7QUFDaEQsNEJBQTRCLG1CQUFPLENBQUMsK0lBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRix5Q0FBeUM7QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY21hcFxcYXV0aFxcbW9uZ29kYl9vaWRjXFxhdXRvbWF0ZWRfY2FsbGJhY2tfd29ya2Zsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF1dG9tYXRlZENhbGxiYWNrV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdGltZW91dF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3RpbWVvdXRcIik7XG5jb25zdCBtb25nb2RiX29pZGNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb2RiX29pZGNcIik7XG5jb25zdCBjYWxsYmFja193b3JrZmxvd18xID0gcmVxdWlyZShcIi4vY2FsbGJhY2tfd29ya2Zsb3dcIik7XG4vKipcbiAqIENsYXNzIGltcGxlbWVudGluZyBiZWhhdmlvdXIgZm9yIHRoZSBub24gaHVtYW4gY2FsbGJhY2sgd29ya2Zsb3cuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0b21hdGVkQ2FsbGJhY2tXb3JrZmxvdyBleHRlbmRzIGNhbGxiYWNrX3dvcmtmbG93XzEuQ2FsbGJhY2tXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGh1bWFuIGNhbGxiYWNrIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlLCBjYWxsYmFjaykge1xuICAgICAgICBzdXBlcihjYWNoZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBPSURDIGNhbGxiYWNrIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBjYWNoZWQgYWNjZXNzIHRva2VuLCB0cnkgdG8gYXV0aGVudGljYXRlIHdpdGggaXQuIElmXG4gICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIGZhaWxzIHdpdGggYW4gQXV0aGVudGljYXRpb24gZXJyb3IgKDE4KSxcbiAgICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgYWNjZXNzIHRva2VuLCBmZXRjaCBhIG5ldyBhY2Nlc3MgdG9rZW4sIGFuZCB0cnlcbiAgICAgICAgLy8gdG8gYXV0aGVudGljYXRlIGFnYWluLlxuICAgICAgICAvLyBJZiB0aGUgc2VydmVyIGZhaWxzIGZvciBhbnkgb3RoZXIgcmVhc29uLCBkbyBub3QgY2xlYXIgdGhlIGNhY2hlLlxuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXNBY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmNhY2hlLmdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmZpbmlzaEF1dGhlbnRpY2F0aW9uKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuY29kZSA9PT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLkF1dGhlbnRpY2F0aW9uRmFpbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlQWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoQWNjZXNzVG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICB0aGlzLmNhY2hlLnB1dChyZXNwb25zZSk7XG4gICAgICAgIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgYXdhaXQgdGhpcy5maW5pc2hBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVzcG9uc2UuYWNjZXNzVG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBhY2Nlc3MgdG9rZW4gdXNpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGFzeW5jIGZldGNoQWNjZXNzVG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdGltZW91dENvbnRleHQ6IGNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgICAgdmVyc2lvbjogbW9uZ29kYl9vaWRjXzEuT0lEQ19WRVJTSU9OXG4gICAgICAgIH07XG4gICAgICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICAgICAgcGFyYW1zLnVzZXJuYW1lID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRpbWVvdXRfMS5UaW1lb3V0LmV4cGlyZXMoY2FsbGJhY2tfd29ya2Zsb3dfMS5BVVRPTUFURURfVElNRU9VVF9NUyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5yYWNlKFt0aGlzLmV4ZWN1dGVBbmRWYWxpZGF0ZUNhbGxiYWNrKHBhcmFtcyksIHRpbWVvdXRdKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0XzEuVGltZW91dEVycm9yLmlzKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb09JRENFcnJvcihgT0lEQyBjYWxsYmFjayB0aW1lZCBvdXQgYWZ0ZXIgJHtjYWxsYmFja193b3JrZmxvd18xLkFVVE9NQVRFRF9USU1FT1VUX01TfW1zLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aW1lb3V0LmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkF1dG9tYXRlZENhbGxiYWNrV29ya2Zsb3cgPSBBdXRvbWF0ZWRDYWxsYmFja1dvcmtmbG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b21hdGVkX2NhbGxiYWNrX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureMachineWorkflow = void 0;\nconst azure_1 = __webpack_require__(/*! ../../../client-side-encryption/providers/azure */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_RESOURCE;\n        const username = credentials?.username;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_RESOURCE_MISSING_ERROR);\n        }\n        const response = await getAzureTokenData(tokenAudience, username);\n        if (!isEndpointResultValid(response)) {\n            throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n        }\n        return response;\n    }\n}\nexports.AzureMachineWorkflow = AzureMachineWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience, username) {\n    const url = new URL(azure_1.AZURE_BASE_URL);\n    (0, azure_1.addAzureParams)(url, tokenAudience, username);\n    const response = await (0, utils_1.get)(url, {\n        headers: AZURE_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoAzureError(`Status code ${response.status} returned from the Azure endpoint. Response body: ${response.body}`);\n    }\n    const result = JSON.parse(response.body);\n    return {\n        access_token: result.access_token,\n        expires_in: Number(result.expires_in)\n    };\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return ('access_token' in token &&\n        typeof token.access_token === 'string' &&\n        'expires_in' in token &&\n        typeof token.expires_in === 'number');\n}\n//# sourceMappingURL=azure_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F6dXJlX21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGdCQUFnQixtQkFBTyxDQUFDLHlLQUFpRDtBQUN6RSxnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsdUdBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLDZJQUFvQjtBQUN2RDtBQUNBLHNDQUFzQyw4Q0FBOEM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseURBQXlELGlCQUFpQixtREFBbUQsY0FBYztBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXG1vbmdvZGJfb2lkY1xcYXp1cmVfbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVNYWNoaW5lV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBhenVyZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F6dXJlXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBtYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tYWNoaW5lX3dvcmtmbG93XCIpO1xuLyoqIEF6dXJlIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEFaVVJFX0hFQURFUlMgPSBPYmplY3QuZnJlZXplKHsgTWV0YWRhdGE6ICd0cnVlJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4vKiogSW52YWxpZCBlbmRwb2ludCByZXN1bHQgZXJyb3IuICovXG5jb25zdCBFTkRQT0lOVF9SRVNVTFRfRVJST1IgPSAnQXp1cmUgZW5kcG9pbnQgZGlkIG5vdCByZXR1cm4gYSB2YWx1ZSB3aXRoIG9ubHkgYWNjZXNzX3Rva2VuIGFuZCBleHBpcmVzX2luIHByb3BlcnRpZXMnO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBhdWRpZW5jZSBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX1JFU09VUkNFX01JU1NJTkdfRVJST1IgPSAnVE9LRU5fUkVTT1VSQ0UgbXVzdCBiZSBzZXQgaW4gdGhlIGF1dGggbWVjaGFuaXNtIHByb3BlcnRpZXMgd2hlbiBFTlZJUk9OTUVOVCBpcyBhenVyZS4nO1xuLyoqXG4gKiBEZXZpY2Ugd29ya2Zsb3cgaW1wbGVtZW50YXRpb24gZm9yIEF6dXJlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBenVyZU1hY2hpbmVXb3JrZmxvdyBleHRlbmRzIG1hY2hpbmVfd29ya2Zsb3dfMS5NYWNoaW5lV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBtYWNoaW5lIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlKSB7XG4gICAgICAgIHN1cGVyKGNhY2hlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbkF1ZGllbmNlID0gY3JlZGVudGlhbHM/Lm1lY2hhbmlzbVByb3BlcnRpZXMuVE9LRU5fUkVTT1VSQ0U7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gY3JlZGVudGlhbHM/LnVzZXJuYW1lO1xuICAgICAgICBpZiAoIXRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQXp1cmVFcnJvcihUT0tFTl9SRVNPVVJDRV9NSVNTSU5HX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UsIHVzZXJuYW1lKTtcbiAgICAgICAgaWYgKCFpc0VuZHBvaW50UmVzdWx0VmFsaWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0F6dXJlRXJyb3IoRU5EUE9JTlRfUkVTVUxUX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZU1hY2hpbmVXb3JrZmxvdyA9IEF6dXJlTWFjaGluZVdvcmtmbG93O1xuLyoqXG4gKiBIaXQgdGhlIEF6dXJlIGVuZHBvaW50IHRvIGdldCB0aGUgdG9rZW4gZGF0YS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QXp1cmVUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSwgdXNlcm5hbWUpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGF6dXJlXzEuQVpVUkVfQkFTRV9VUkwpO1xuICAgICgwLCBhenVyZV8xLmFkZEF6dXJlUGFyYW1zKSh1cmwsIHRva2VuQXVkaWVuY2UsIHVzZXJuYW1lKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCB1dGlsc18xLmdldCkodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IEFaVVJFX0hFQURFUlNcbiAgICB9KTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKGBTdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c30gcmV0dXJuZWQgZnJvbSB0aGUgQXp1cmUgZW5kcG9pbnQuIFJlc3BvbnNlIGJvZHk6ICR7cmVzcG9uc2UuYm9keX1gKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY2Nlc3NfdG9rZW46IHJlc3VsdC5hY2Nlc3NfdG9rZW4sXG4gICAgICAgIGV4cGlyZXNfaW46IE51bWJlcihyZXN1bHQuZXhwaXJlc19pbilcbiAgICB9O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIGVuZHBvaW50IGlzIHZhbGlkLlxuICogVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG5vdCBudWxsaXNoLCBjb250YWlucyB0aGUgYWNjZXNzX3Rva2VuIHJlcXVpcmVkIGZpZWxkXG4gKiBhbmQgdGhlIGV4cGlyZXNfaW4gcmVxdWlyZWQgZmllbGQuXG4gKi9cbmZ1bmN0aW9uIGlzRW5kcG9pbnRSZXN1bHRWYWxpZCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PSBudWxsIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKCdhY2Nlc3NfdG9rZW4nIGluIHRva2VuICYmXG4gICAgICAgIHR5cGVvZiB0b2tlbi5hY2Nlc3NfdG9rZW4gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICdleHBpcmVzX2luJyBpbiB0b2tlbiAmJlxuICAgICAgICB0eXBlb2YgdG9rZW4uZXhwaXJlc19pbiA9PT0gJ251bWJlcicpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackWorkflow = exports.AUTOMATED_TIMEOUT_MS = exports.HUMAN_TIMEOUT_MS = void 0;\nconst promises_1 = __webpack_require__(/*! timers/promises */ \"timers/promises\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_builders_1 = __webpack_require__(/*! ./command_builders */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\");\n/** 5 minutes in milliseconds */\nexports.HUMAN_TIMEOUT_MS = 300000;\n/** 1 minute in milliseconds */\nexports.AUTOMATED_TIMEOUT_MS = 60000;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/** The time to throttle callback calls. */\nconst THROTTLE_MS = 100;\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the callback workflow.\n     */\n    constructor(cache, callback) {\n        this.cache = cache;\n        this.callback = this.withLock(callback);\n        this.lastExecutionTime = Date.now() - THROTTLE_MS;\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and send a JwtStepRequest\n        // with the cached access token in the speculative authentication SASL payload.\n        if (this.cache.hasAccessToken) {\n            const accessToken = this.cache.getAccessToken();\n            connection.accessToken = accessToken;\n            const document = (0, command_builders_1.finishCommandDocument)(accessToken);\n            document.db = credentials.source;\n            return { speculativeAuthenticate: document };\n        }\n        return {};\n    }\n    /**\n     * Reauthenticate the callback workflow. For this we invalidated the access token\n     * in the cache and run the authentication steps again. No initial handshake needs\n     * to be sent.\n     */\n    async reauthenticate(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            // Reauthentication implies the token has expired.\n            if (connection.accessToken === this.cache.getAccessToken()) {\n                // If connection's access token is the same as the cache's, remove\n                // the token from the cache and connection.\n                this.cache.removeAccessToken();\n                delete connection.accessToken;\n            }\n            else {\n                // If the connection's access token is different from the cache's, set\n                // the cache's token on the connection and do not remove from the\n                // cache.\n                connection.accessToken = this.cache.getAccessToken();\n            }\n        }\n        await this.execute(connection, credentials);\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, response) {\n        let result;\n        if (response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.startCommandDocument)(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, token, conversationId) {\n        await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.finishCommandDocument)(token, conversationId), undefined);\n    }\n    /**\n     * Executes the callback and validates the output.\n     */\n    async executeAndValidateCallback(params) {\n        const result = await this.callback(params);\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        return result;\n    }\n    /**\n     * Ensure the callback is only executed one at a time and throttles the calls\n     * to every 100ms.\n     */\n    withLock(callback) {\n        let lock = Promise.resolve();\n        return async (params) => {\n            // We do this to ensure that we would never return the result of the\n            // previous lock, only the current callback's value would get returned.\n            await lock;\n            lock = lock\n                .catch(() => null)\n                .then(async () => {\n                const difference = Date.now() - this.lastExecutionTime;\n                if (difference <= THROTTLE_MS) {\n                    await (0, promises_1.setTimeout)(THROTTLE_MS - difference, { signal: params.timeoutContext });\n                }\n                this.lastExecutionTime = Date.now();\n                return await callback(params);\n            });\n            return await lock;\n        };\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n//# sourceMappingURL=callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.finishCommandDocument = finishCommandDocument;\nexports.startCommandDocument = startCommandDocument;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null) {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=command_builders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NvbW1hbmRfYnVpbGRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QixlQUFlLG1CQUFPLENBQUMscUdBQWU7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFlBQVk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELFlBQVk7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxhdXRoXFxtb25nb2RiX29pZGNcXGNvbW1hbmRfYnVpbGRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmlzaENvbW1hbmREb2N1bWVudCA9IGZpbmlzaENvbW1hbmREb2N1bWVudDtcbmV4cG9ydHMuc3RhcnRDb21tYW5kRG9jdW1lbnQgPSBzdGFydENvbW1hbmREb2N1bWVudDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ic29uXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vcHJvdmlkZXJzXCIpO1xuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgZmluaXNoaW5nIGNvbW1hbmQgZG9jdW1lbnQgZm9yIGF1dGhlbnRpY2F0aW9uLiBXaWxsIGJlIGFcbiAqIHNhc2xTdGFydCBvciBzYXNsQ29udGludWUgZGVwZW5kaW5nIG9uIHRoZSBwcmVzZW5jZSBvZiBhIGNvbnZlcnNhdGlvbiBpZC5cbiAqL1xuZnVuY3Rpb24gZmluaXNoQ29tbWFuZERvY3VtZW50KHRva2VuLCBjb252ZXJzYXRpb25JZCkge1xuICAgIGlmIChjb252ZXJzYXRpb25JZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBuZXcgYnNvbl8xLkJpbmFyeShic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pKVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBzYXNsQ29udGludWUgcmVxdWlyZXMgYSBjb252ZXJzYXRpb25JZCBpbiB0aGUgY29tbWFuZCB0byBiZSB2YWxpZCBzbyBpbiB0aGlzXG4gICAgLy8gY2FzZSB0aGUgc2VydmVyIGFsbG93cyBcInN0ZXAgdHdvXCIgdG8gYWN0dWFsbHkgYmUgYSBzYXNsU3RhcnQgd2l0aCB0aGUgdG9rZW5cbiAgICAvLyBhcyB0aGUgand0IHNpbmNlIHRoZSB1c2Ugb2YgdGhlIGNhY2hlZCB2YWx1ZSBoYXMgbm8gY29ycmVsYXRpbmcgY29udmVyc2F0aW5nXG4gICAgLy8gb24gdGhlIHBhcnRpY3VsYXIgY29ubmVjdGlvbi5cbiAgICByZXR1cm4ge1xuICAgICAgICBzYXNsU3RhcnQ6IDEsXG4gICAgICAgIG1lY2hhbmlzbTogcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgICAgIHBheWxvYWQ6IG5ldyBic29uXzEuQmluYXJ5KGJzb25fMS5CU09OLnNlcmlhbGl6ZSh7IGp3dDogdG9rZW4gfSkpXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGUgdGhlIHNhc2xTdGFydCBjb21tYW5kIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydENvbW1hbmREb2N1bWVudChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAoY3JlZGVudGlhbHMudXNlcm5hbWUpIHtcbiAgICAgICAgcGF5bG9hZC5uID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMSxcbiAgICAgICAgbWVjaGFuaXNtOiBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyxcbiAgICAgICAgcGF5bG9hZDogbmV3IGJzb25fMS5CaW5hcnkoYnNvbl8xLkJTT04uc2VyaWFsaXplKHBheWxvYWQpKVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kX2J1aWxkZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GCPMachineWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** GCP base URL. */\nconst GCP_BASE_URL = 'http://metadata/computeMetadata/v1/instance/service-accounts/default/identity';\n/** GCP request headers. */\nconst GCP_HEADERS = Object.freeze({ 'Metadata-Flavor': 'Google' });\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is gcp.';\nclass GCPMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_RESOURCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoGCPError(TOKEN_RESOURCE_MISSING_ERROR);\n        }\n        return await getGcpTokenData(tokenAudience);\n    }\n}\nexports.GCPMachineWorkflow = GCPMachineWorkflow;\n/**\n * Hit the GCP endpoint to get the token data.\n */\nasync function getGcpTokenData(tokenAudience) {\n    const url = new URL(GCP_BASE_URL);\n    url.searchParams.append('audience', tokenAudience);\n    const response = await (0, utils_1.get)(url, {\n        headers: GCP_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoGCPError(`Status code ${response.status} returned from the GCP endpoint. Response body: ${response.body}`);\n    }\n    return { access_token: response.body };\n}\n//# sourceMappingURL=gcp_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2djcF9tYWNoaW5lX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsdUdBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLDZJQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHVEQUF1RCxpQkFBaUIsaURBQWlELGNBQWM7QUFDdkk7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY21hcFxcYXV0aFxcbW9uZ29kYl9vaWRjXFxnY3BfbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR0NQTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBtYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tYWNoaW5lX3dvcmtmbG93XCIpO1xuLyoqIEdDUCBiYXNlIFVSTC4gKi9cbmNvbnN0IEdDUF9CQVNFX1VSTCA9ICdodHRwOi8vbWV0YWRhdGEvY29tcHV0ZU1ldGFkYXRhL3YxL2luc3RhbmNlL3NlcnZpY2UtYWNjb3VudHMvZGVmYXVsdC9pZGVudGl0eSc7XG4vKiogR0NQIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEdDUF9IRUFERVJTID0gT2JqZWN0LmZyZWV6ZSh7ICdNZXRhZGF0YS1GbGF2b3InOiAnR29vZ2xlJyB9KTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gYXVkaWVuY2UgaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9SRVNPVVJDRV9NSVNTSU5HX0VSUk9SID0gJ1RPS0VOX1JFU09VUkNFIG11c3QgYmUgc2V0IGluIHRoZSBhdXRoIG1lY2hhbmlzbSBwcm9wZXJ0aWVzIHdoZW4gRU5WSVJPTk1FTlQgaXMgZ2NwLic7XG5jbGFzcyBHQ1BNYWNoaW5lV29ya2Zsb3cgZXh0ZW5kcyBtYWNoaW5lX3dvcmtmbG93XzEuTWFjaGluZVdvcmtmbG93IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgbWFjaGluZSB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYWNoZSkge1xuICAgICAgICBzdXBlcihjYWNoZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW5BdWRpZW5jZSA9IGNyZWRlbnRpYWxzPy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlRPS0VOX1JFU09VUkNFO1xuICAgICAgICBpZiAoIXRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvR0NQRXJyb3IoVE9LRU5fUkVTT1VSQ0VfTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldEdjcFRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKTtcbiAgICB9XG59XG5leHBvcnRzLkdDUE1hY2hpbmVXb3JrZmxvdyA9IEdDUE1hY2hpbmVXb3JrZmxvdztcbi8qKlxuICogSGl0IHRoZSBHQ1AgZW5kcG9pbnQgdG8gZ2V0IHRoZSB0b2tlbiBkYXRhLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRHY3BUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoR0NQX0JBU0VfVVJMKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnYXVkaWVuY2UnLCB0b2tlbkF1ZGllbmNlKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCB1dGlsc18xLmdldCkodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IEdDUF9IRUFERVJTXG4gICAgfSk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvR0NQRXJyb3IoYFN0YXR1cyBjb2RlICR7cmVzcG9uc2Uuc3RhdHVzfSByZXR1cm5lZCBmcm9tIHRoZSBHQ1AgZW5kcG9pbnQuIFJlc3BvbnNlIGJvZHk6ICR7cmVzcG9uc2UuYm9keX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgYWNjZXNzX3Rva2VuOiByZXNwb25zZS5ib2R5IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nY3BfbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HumanCallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../../../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ../mongodb_oidc */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./callback_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass HumanCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC human callback workflow.\n     */\n    async execute(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and perform a One-Step SASL conversation\n        // using the access token. If the server returns an Authentication error (18),\n        // invalidate the access token token from the Client Cache, clear the Connection Cache,\n        // and restart the authentication flow. Raise any other errors to the user. On success, exit the algorithm.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            connection.accessToken = token;\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Check if the Client Cache has a refresh token.\n        // If it does, call the OIDC Human Callback with the cached refresh token and IdpInfo to get a\n        // new access token. Cache the new access token in the Client Cache and Connection Cache.\n        // Perform a One-Step SASL conversation using the new access token. If the the server returns\n        // an Authentication error (18), clear the refresh token, invalidate the access token from the\n        // Client Cache, clear the Connection Cache, and restart the authentication flow. Raise any other\n        // errors to the user. On success, exit the algorithm.\n        if (this.cache.hasRefreshToken) {\n            const refreshToken = this.cache.getRefreshToken();\n            const result = await this.fetchAccessToken(this.cache.getIdpInfo(), credentials, refreshToken);\n            this.cache.put(result);\n            connection.accessToken = result.accessToken;\n            try {\n                return await this.finishAuthentication(connection, credentials, result.accessToken);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeRefreshToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Start a new Two-Step SASL conversation.\n        // Run a PrincipalStepRequest to get the IdpInfo.\n        // Call the OIDC Human Callback with the new IdpInfo to get a new access token and optional refresh\n        // token. Drivers MUST NOT pass a cached refresh token to the callback when performing\n        // a new Two-Step conversation. Cache the new IdpInfo and refresh token in the Client Cache and the\n        // new access token in the Client Cache and Connection Cache.\n        // Attempt to authenticate using a JwtStepRequest with the new access token. Raise any errors to the user.\n        const startResponse = await this.startAuthentication(connection, credentials);\n        const conversationId = startResponse.conversationId;\n        const idpInfo = bson_1.BSON.deserialize(startResponse.payload.buffer);\n        const callbackResponse = await this.fetchAccessToken(idpInfo, credentials);\n        this.cache.put(callbackResponse, idpInfo);\n        connection.accessToken = callbackResponse.accessToken;\n        return await this.finishAuthentication(connection, credentials, callbackResponse.accessToken, conversationId);\n    }\n    /**\n     * Fetches an access token using the callback.\n     */\n    async fetchAccessToken(idpInfo, credentials, refreshToken) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION,\n            idpInfo: idpInfo\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        if (refreshToken) {\n            params.refreshToken = refreshToken;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.HUMAN_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.HUMAN_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.HumanCallbackWorkflow = HumanCallbackWorkflow;\n//# sourceMappingURL=human_callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2h1bWFuX2NhbGxiYWNrX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QixlQUFlLG1CQUFPLENBQUMscUdBQWU7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsdUdBQWdCO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLDJHQUFrQjtBQUM1Qyx1QkFBdUIsbUJBQU8sQ0FBQyx5SEFBaUI7QUFDaEQsNEJBQTRCLG1CQUFPLENBQUMsK0lBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLHFDQUFxQztBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxhdXRoXFxtb25nb2RiX29pZGNcXGh1bWFuX2NhbGxiYWNrX3dvcmtmbG93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IdW1hbkNhbGxiYWNrV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZXJyb3JcIik7XG5jb25zdCB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdGltZW91dFwiKTtcbmNvbnN0IG1vbmdvZGJfb2lkY18xID0gcmVxdWlyZShcIi4uL21vbmdvZGJfb2lkY1wiKTtcbmNvbnN0IGNhbGxiYWNrX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9jYWxsYmFja193b3JrZmxvd1wiKTtcbi8qKlxuICogQ2xhc3MgaW1wbGVtZW50aW5nIGJlaGF2aW91ciBmb3IgdGhlIG5vbiBodW1hbiBjYWxsYmFjayB3b3JrZmxvdy5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBIdW1hbkNhbGxiYWNrV29ya2Zsb3cgZXh0ZW5kcyBjYWxsYmFja193b3JrZmxvd18xLkNhbGxiYWNrV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBodW1hbiBjYWxsYmFjayB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYWNoZSwgY2FsbGJhY2spIHtcbiAgICAgICAgc3VwZXIoY2FjaGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgT0lEQyBodW1hbiBjYWxsYmFjayB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBDbGllbnQgQ2FjaGUgaGFzIGFuIGFjY2VzcyB0b2tlbi5cbiAgICAgICAgLy8gSWYgaXQgZG9lcywgY2FjaGUgdGhlIGFjY2VzcyB0b2tlbiBpbiB0aGUgQ29ubmVjdGlvbiBDYWNoZSBhbmQgcGVyZm9ybSBhIE9uZS1TdGVwIFNBU0wgY29udmVyc2F0aW9uXG4gICAgICAgIC8vIHVzaW5nIHRoZSBhY2Nlc3MgdG9rZW4uIElmIHRoZSBzZXJ2ZXIgcmV0dXJucyBhbiBBdXRoZW50aWNhdGlvbiBlcnJvciAoMTgpLFxuICAgICAgICAvLyBpbnZhbGlkYXRlIHRoZSBhY2Nlc3MgdG9rZW4gdG9rZW4gZnJvbSB0aGUgQ2xpZW50IENhY2hlLCBjbGVhciB0aGUgQ29ubmVjdGlvbiBDYWNoZSxcbiAgICAgICAgLy8gYW5kIHJlc3RhcnQgdGhlIGF1dGhlbnRpY2F0aW9uIGZsb3cuIFJhaXNlIGFueSBvdGhlciBlcnJvcnMgdG8gdGhlIHVzZXIuIE9uIHN1Y2Nlc3MsIGV4aXQgdGhlIGFsZ29yaXRobS5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzQWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jYWNoZS5nZXRBY2Nlc3NUb2tlbigpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5hY2Nlc3NUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5pc2hBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb0Vycm9yICYmXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5BdXRoZW50aWNhdGlvbkZhaWxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZUFjY2Vzc1Rva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgQ2xpZW50IENhY2hlIGhhcyBhIHJlZnJlc2ggdG9rZW4uXG4gICAgICAgIC8vIElmIGl0IGRvZXMsIGNhbGwgdGhlIE9JREMgSHVtYW4gQ2FsbGJhY2sgd2l0aCB0aGUgY2FjaGVkIHJlZnJlc2ggdG9rZW4gYW5kIElkcEluZm8gdG8gZ2V0IGFcbiAgICAgICAgLy8gbmV3IGFjY2VzcyB0b2tlbi4gQ2FjaGUgdGhlIG5ldyBhY2Nlc3MgdG9rZW4gaW4gdGhlIENsaWVudCBDYWNoZSBhbmQgQ29ubmVjdGlvbiBDYWNoZS5cbiAgICAgICAgLy8gUGVyZm9ybSBhIE9uZS1TdGVwIFNBU0wgY29udmVyc2F0aW9uIHVzaW5nIHRoZSBuZXcgYWNjZXNzIHRva2VuLiBJZiB0aGUgdGhlIHNlcnZlciByZXR1cm5zXG4gICAgICAgIC8vIGFuIEF1dGhlbnRpY2F0aW9uIGVycm9yICgxOCksIGNsZWFyIHRoZSByZWZyZXNoIHRva2VuLCBpbnZhbGlkYXRlIHRoZSBhY2Nlc3MgdG9rZW4gZnJvbSB0aGVcbiAgICAgICAgLy8gQ2xpZW50IENhY2hlLCBjbGVhciB0aGUgQ29ubmVjdGlvbiBDYWNoZSwgYW5kIHJlc3RhcnQgdGhlIGF1dGhlbnRpY2F0aW9uIGZsb3cuIFJhaXNlIGFueSBvdGhlclxuICAgICAgICAvLyBlcnJvcnMgdG8gdGhlIHVzZXIuIE9uIHN1Y2Nlc3MsIGV4aXQgdGhlIGFsZ29yaXRobS5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzUmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSB0aGlzLmNhY2hlLmdldFJlZnJlc2hUb2tlbigpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5mZXRjaEFjY2Vzc1Rva2VuKHRoaXMuY2FjaGUuZ2V0SWRwSW5mbygpLCBjcmVkZW50aWFscywgcmVmcmVzaFRva2VuKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUucHV0KHJlc3VsdCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuID0gcmVzdWx0LmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5pc2hBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVzdWx0LmFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuQXV0aGVudGljYXRpb25GYWlsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmVSZWZyZXNoVG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN0YXJ0IGEgbmV3IFR3by1TdGVwIFNBU0wgY29udmVyc2F0aW9uLlxuICAgICAgICAvLyBSdW4gYSBQcmluY2lwYWxTdGVwUmVxdWVzdCB0byBnZXQgdGhlIElkcEluZm8uXG4gICAgICAgIC8vIENhbGwgdGhlIE9JREMgSHVtYW4gQ2FsbGJhY2sgd2l0aCB0aGUgbmV3IElkcEluZm8gdG8gZ2V0IGEgbmV3IGFjY2VzcyB0b2tlbiBhbmQgb3B0aW9uYWwgcmVmcmVzaFxuICAgICAgICAvLyB0b2tlbi4gRHJpdmVycyBNVVNUIE5PVCBwYXNzIGEgY2FjaGVkIHJlZnJlc2ggdG9rZW4gdG8gdGhlIGNhbGxiYWNrIHdoZW4gcGVyZm9ybWluZ1xuICAgICAgICAvLyBhIG5ldyBUd28tU3RlcCBjb252ZXJzYXRpb24uIENhY2hlIHRoZSBuZXcgSWRwSW5mbyBhbmQgcmVmcmVzaCB0b2tlbiBpbiB0aGUgQ2xpZW50IENhY2hlIGFuZCB0aGVcbiAgICAgICAgLy8gbmV3IGFjY2VzcyB0b2tlbiBpbiB0aGUgQ2xpZW50IENhY2hlIGFuZCBDb25uZWN0aW9uIENhY2hlLlxuICAgICAgICAvLyBBdHRlbXB0IHRvIGF1dGhlbnRpY2F0ZSB1c2luZyBhIEp3dFN0ZXBSZXF1ZXN0IHdpdGggdGhlIG5ldyBhY2Nlc3MgdG9rZW4uIFJhaXNlIGFueSBlcnJvcnMgdG8gdGhlIHVzZXIuXG4gICAgICAgIGNvbnN0IHN0YXJ0UmVzcG9uc2UgPSBhd2FpdCB0aGlzLnN0YXJ0QXV0aGVudGljYXRpb24oY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBjb252ZXJzYXRpb25JZCA9IHN0YXJ0UmVzcG9uc2UuY29udmVyc2F0aW9uSWQ7XG4gICAgICAgIGNvbnN0IGlkcEluZm8gPSBic29uXzEuQlNPTi5kZXNlcmlhbGl6ZShzdGFydFJlc3BvbnNlLnBheWxvYWQuYnVmZmVyKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tSZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2hBY2Nlc3NUb2tlbihpZHBJbmZvLCBjcmVkZW50aWFscyk7XG4gICAgICAgIHRoaXMuY2FjaGUucHV0KGNhbGxiYWNrUmVzcG9uc2UsIGlkcEluZm8pO1xuICAgICAgICBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuID0gY2FsbGJhY2tSZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluaXNoQXV0aGVudGljYXRpb24oY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIGNhbGxiYWNrUmVzcG9uc2UuYWNjZXNzVG9rZW4sIGNvbnZlcnNhdGlvbklkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbiBhY2Nlc3MgdG9rZW4gdXNpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGFzeW5jIGZldGNoQWNjZXNzVG9rZW4oaWRwSW5mbywgY3JlZGVudGlhbHMsIHJlZnJlc2hUb2tlbikge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dDogY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgICAgICB2ZXJzaW9uOiBtb25nb2RiX29pZGNfMS5PSURDX1ZFUlNJT04sXG4gICAgICAgICAgICBpZHBJbmZvOiBpZHBJbmZvXG4gICAgICAgIH07XG4gICAgICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICAgICAgcGFyYW1zLnVzZXJuYW1lID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgcGFyYW1zLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGltZW91dF8xLlRpbWVvdXQuZXhwaXJlcyhjYWxsYmFja193b3JrZmxvd18xLkhVTUFOX1RJTUVPVVRfTVMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UucmFjZShbdGhpcy5leGVjdXRlQW5kVmFsaWRhdGVDYWxsYmFjayhwYXJhbXMpLCB0aW1lb3V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGltZW91dF8xLlRpbWVvdXRFcnJvci5pcyhlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29PSURDRXJyb3IoYE9JREMgY2FsbGJhY2sgdGltZWQgb3V0IGFmdGVyICR7Y2FsbGJhY2tfd29ya2Zsb3dfMS5IVU1BTl9USU1FT1VUX01TfW1zLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aW1lb3V0LmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkh1bWFuQ2FsbGJhY2tXb3JrZmxvdyA9IEh1bWFuQ2FsbGJhY2tXb3JrZmxvdztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh1bWFuX2NhbGxiYWNrX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/k8s_machine_workflow.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/k8s_machine_workflow.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.K8SMachineWorkflow = void 0;\nconst promises_1 = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** The fallback file name */\nconst FALLBACK_FILENAME = '/var/run/secrets/kubernetes.io/serviceaccount/token';\n/** The azure environment variable for the file name. */\nconst AZURE_FILENAME = 'AZURE_FEDERATED_TOKEN_FILE';\n/** The AWS environment variable for the file name. */\nconst AWS_FILENAME = 'AWS_WEB_IDENTITY_TOKEN_FILE';\nclass K8SMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        let filename;\n        if (process.env[AZURE_FILENAME]) {\n            filename = process.env[AZURE_FILENAME];\n        }\n        else if (process.env[AWS_FILENAME]) {\n            filename = process.env[AWS_FILENAME];\n        }\n        else {\n            filename = FALLBACK_FILENAME;\n        }\n        const token = await (0, promises_1.readFile)(filename, 'utf8');\n        return { access_token: token };\n    }\n}\nexports.K8SMachineWorkflow = K8SMachineWorkflow;\n//# sourceMappingURL=k8s_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2s4c19tYWNoaW5lX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixtQkFBbUIsbUJBQU8sQ0FBQyxnQ0FBYTtBQUN4QywyQkFBMkIsbUJBQU8sQ0FBQyw2SUFBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY21hcFxcYXV0aFxcbW9uZ29kYl9vaWRjXFxrOHNfbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSzhTTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgcHJvbWlzZXNfMSA9IHJlcXVpcmUoXCJmcy9wcm9taXNlc1wiKTtcbmNvbnN0IG1hY2hpbmVfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21hY2hpbmVfd29ya2Zsb3dcIik7XG4vKiogVGhlIGZhbGxiYWNrIGZpbGUgbmFtZSAqL1xuY29uc3QgRkFMTEJBQ0tfRklMRU5BTUUgPSAnL3Zhci9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3Rva2VuJztcbi8qKiBUaGUgYXp1cmUgZW52aXJvbm1lbnQgdmFyaWFibGUgZm9yIHRoZSBmaWxlIG5hbWUuICovXG5jb25zdCBBWlVSRV9GSUxFTkFNRSA9ICdBWlVSRV9GRURFUkFURURfVE9LRU5fRklMRSc7XG4vKiogVGhlIEFXUyBlbnZpcm9ubWVudCB2YXJpYWJsZSBmb3IgdGhlIGZpbGUgbmFtZS4gKi9cbmNvbnN0IEFXU19GSUxFTkFNRSA9ICdBV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEUnO1xuY2xhc3MgSzhTTWFjaGluZVdvcmtmbG93IGV4dGVuZHMgbWFjaGluZV93b3JrZmxvd18xLk1hY2hpbmVXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIG1hY2hpbmUgd29ya2Zsb3cuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FjaGUpIHtcbiAgICAgICAgc3VwZXIoY2FjaGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBsZXQgZmlsZW5hbWU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudltBWlVSRV9GSUxFTkFNRV0pIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gcHJvY2Vzcy5lbnZbQVpVUkVfRklMRU5BTUVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52W0FXU19GSUxFTkFNRV0pIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gcHJvY2Vzcy5lbnZbQVdTX0ZJTEVOQU1FXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gRkFMTEJBQ0tfRklMRU5BTUU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCAoMCwgcHJvbWlzZXNfMS5yZWFkRmlsZSkoZmlsZW5hbWUsICd1dGY4Jyk7XG4gICAgICAgIHJldHVybiB7IGFjY2Vzc190b2tlbjogdG9rZW4gfTtcbiAgICB9XG59XG5leHBvcnRzLks4U01hY2hpbmVXb3JrZmxvdyA9IEs4U01hY2hpbmVXb3JrZmxvdztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWs4c19tYWNoaW5lX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/k8s_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MachineWorkflow = void 0;\nconst promises_1 = __webpack_require__(/*! timers/promises */ \"timers/promises\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_builders_1 = __webpack_require__(/*! ./command_builders */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\");\n/** The time to throttle callback calls. */\nconst THROTTLE_MS = 100;\n/**\n * Common behaviour for OIDC machine workflows.\n * @internal\n */\nclass MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        this.cache = cache;\n        this.callback = this.withLock(this.getToken.bind(this));\n        this.lastExecutionTime = Date.now() - THROTTLE_MS;\n    }\n    /**\n     * Execute the workflow. Gets the token from the subclass implementation.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getTokenFromCacheOrEnv(connection, credentials);\n        const command = (0, command_builders_1.finishCommandDocument)(token);\n        await connection.command((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Reauthenticate on a machine workflow just grabs the token again since the server\n     * has said the current access token is invalid or expired.\n     */\n    async reauthenticate(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            // Reauthentication implies the token has expired.\n            if (connection.accessToken === this.cache.getAccessToken()) {\n                // If connection's access token is the same as the cache's, remove\n                // the token from the cache and connection.\n                this.cache.removeAccessToken();\n                delete connection.accessToken;\n            }\n            else {\n                // If the connection's access token is different from the cache's, set\n                // the cache's token on the connection and do not remove from the\n                // cache.\n                connection.accessToken = this.cache.getAccessToken();\n            }\n        }\n        await this.execute(connection, credentials);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(connection, credentials) {\n        // The spec states only cached access tokens can use speculative auth.\n        if (!this.cache.hasAccessToken) {\n            return {};\n        }\n        const token = await this.getTokenFromCacheOrEnv(connection, credentials);\n        const document = (0, command_builders_1.finishCommandDocument)(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Get the token from the cache or environment.\n     */\n    async getTokenFromCacheOrEnv(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            // New connections won't have an access token so ensure we set here.\n            if (!connection.accessToken) {\n                connection.accessToken = token;\n            }\n            return token;\n        }\n        else {\n            const token = await this.callback(credentials);\n            this.cache.put({ accessToken: token.access_token, expiresInSeconds: token.expires_in });\n            // Put the access token on the connection as well.\n            connection.accessToken = token.access_token;\n            return token.access_token;\n        }\n    }\n    /**\n     * Ensure the callback is only executed one at a time, and throttled to\n     * only once per 100ms.\n     */\n    withLock(callback) {\n        let lock = Promise.resolve();\n        return async (credentials) => {\n            // We do this to ensure that we would never return the result of the\n            // previous lock, only the current callback's value would get returned.\n            await lock;\n            lock = lock\n                .catch(() => null)\n                .then(async () => {\n                const difference = Date.now() - this.lastExecutionTime;\n                if (difference <= THROTTLE_MS) {\n                    await (0, promises_1.setTimeout)(THROTTLE_MS - difference);\n                }\n                this.lastExecutionTime = Date.now();\n                return await callback(credentials);\n            });\n            return await lock;\n        };\n    }\n}\nexports.MachineWorkflow = MachineWorkflow;\n//# sourceMappingURL=machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLG1CQUFtQixtQkFBTyxDQUFDLHdDQUFpQjtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBZ0I7QUFDeEMsMkJBQTJCLG1CQUFPLENBQUMsNklBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFFQUFxRTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXG1vbmdvZGJfb2lkY1xcbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgcHJvbWlzZXNfMSA9IHJlcXVpcmUoXCJ0aW1lcnMvcHJvbWlzZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF9idWlsZGVyc18xID0gcmVxdWlyZShcIi4vY29tbWFuZF9idWlsZGVyc1wiKTtcbi8qKiBUaGUgdGltZSB0byB0aHJvdHRsZSBjYWxsYmFjayBjYWxscy4gKi9cbmNvbnN0IFRIUk9UVExFX01TID0gMTAwO1xuLyoqXG4gKiBDb21tb24gYmVoYXZpb3VyIGZvciBPSURDIG1hY2hpbmUgd29ya2Zsb3dzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIE1hY2hpbmVXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIG1hY2hpbmUgd29ya2Zsb3cuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FjaGUpIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IGNhY2hlO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gdGhpcy53aXRoTG9jayh0aGlzLmdldFRva2VuLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmxhc3RFeGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIFRIUk9UVExFX01TO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSB3b3JrZmxvdy4gR2V0cyB0aGUgdG9rZW4gZnJvbSB0aGUgc3ViY2xhc3MgaW1wbGVtZW50YXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW5Gcm9tQ2FjaGVPckVudihjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSAoMCwgY29tbWFuZF9idWlsZGVyc18xLmZpbmlzaENvbW1hbmREb2N1bWVudCkodG9rZW4pO1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKGNyZWRlbnRpYWxzLnNvdXJjZSksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYXV0aGVudGljYXRlIG9uIGEgbWFjaGluZSB3b3JrZmxvdyBqdXN0IGdyYWJzIHRoZSB0b2tlbiBhZ2FpbiBzaW5jZSB0aGUgc2VydmVyXG4gICAgICogaGFzIHNhaWQgdGhlIGN1cnJlbnQgYWNjZXNzIHRva2VuIGlzIGludmFsaWQgb3IgZXhwaXJlZC5cbiAgICAgKi9cbiAgICBhc3luYyByZWF1dGhlbnRpY2F0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscykge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXNBY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgLy8gUmVhdXRoZW50aWNhdGlvbiBpbXBsaWVzIHRoZSB0b2tlbiBoYXMgZXhwaXJlZC5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmFjY2Vzc1Rva2VuID09PSB0aGlzLmNhY2hlLmdldEFjY2Vzc1Rva2VuKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBjb25uZWN0aW9uJ3MgYWNjZXNzIHRva2VuIGlzIHRoZSBzYW1lIGFzIHRoZSBjYWNoZSdzLCByZW1vdmVcbiAgICAgICAgICAgICAgICAvLyB0aGUgdG9rZW4gZnJvbSB0aGUgY2FjaGUgYW5kIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmVBY2Nlc3NUb2tlbigpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbm5lY3Rpb24ncyBhY2Nlc3MgdG9rZW4gaXMgZGlmZmVyZW50IGZyb20gdGhlIGNhY2hlJ3MsIHNldFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjYWNoZSdzIHRva2VuIG9uIHRoZSBjb25uZWN0aW9uIGFuZCBkbyBub3QgcmVtb3ZlIGZyb20gdGhlXG4gICAgICAgICAgICAgICAgLy8gY2FjaGUuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5hY2Nlc3NUb2tlbiA9IHRoaXMuY2FjaGUuZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRvY3VtZW50IHRvIGFkZCBmb3Igc3BlY3VsYXRpdmUgYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgc3BlY3VsYXRpdmVBdXRoKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIC8vIFRoZSBzcGVjIHN0YXRlcyBvbmx5IGNhY2hlZCBhY2Nlc3MgdG9rZW5zIGNhbiB1c2Ugc3BlY3VsYXRpdmUgYXV0aC5cbiAgICAgICAgaWYgKCF0aGlzLmNhY2hlLmhhc0FjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuRnJvbUNhY2hlT3JFbnYoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9ICgwLCBjb21tYW5kX2J1aWxkZXJzXzEuZmluaXNoQ29tbWFuZERvY3VtZW50KSh0b2tlbik7XG4gICAgICAgIGRvY3VtZW50LmRiID0gY3JlZGVudGlhbHMuc291cmNlO1xuICAgICAgICByZXR1cm4geyBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogZG9jdW1lbnQgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBjYWNoZSBvciBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbkZyb21DYWNoZU9yRW52KGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmhhc0FjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY2FjaGUuZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIC8vIE5ldyBjb25uZWN0aW9ucyB3b24ndCBoYXZlIGFuIGFjY2VzcyB0b2tlbiBzbyBlbnN1cmUgd2Ugc2V0IGhlcmUuXG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuY2FsbGJhY2soY3JlZGVudGlhbHMpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5wdXQoeyBhY2Nlc3NUb2tlbjogdG9rZW4uYWNjZXNzX3Rva2VuLCBleHBpcmVzSW5TZWNvbmRzOiB0b2tlbi5leHBpcmVzX2luIH0pO1xuICAgICAgICAgICAgLy8gUHV0IHRoZSBhY2Nlc3MgdG9rZW4gb24gdGhlIGNvbm5lY3Rpb24gYXMgd2VsbC5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW4gPSB0b2tlbi5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4uYWNjZXNzX3Rva2VuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGUgY2FsbGJhY2sgaXMgb25seSBleGVjdXRlZCBvbmUgYXQgYSB0aW1lLCBhbmQgdGhyb3R0bGVkIHRvXG4gICAgICogb25seSBvbmNlIHBlciAxMDBtcy5cbiAgICAgKi9cbiAgICB3aXRoTG9jayhjYWxsYmFjaykge1xuICAgICAgICBsZXQgbG9jayA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gYXN5bmMgKGNyZWRlbnRpYWxzKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBkbyB0aGlzIHRvIGVuc3VyZSB0aGF0IHdlIHdvdWxkIG5ldmVyIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAgICAgICAgLy8gcHJldmlvdXMgbG9jaywgb25seSB0aGUgY3VycmVudCBjYWxsYmFjaydzIHZhbHVlIHdvdWxkIGdldCByZXR1cm5lZC5cbiAgICAgICAgICAgIGF3YWl0IGxvY2s7XG4gICAgICAgICAgICBsb2NrID0gbG9ja1xuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdEV4ZWN1dGlvblRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmZlcmVuY2UgPD0gVEhST1RUTEVfTVMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgKDAsIHByb21pc2VzXzEuc2V0VGltZW91dCkoVEhST1RUTEVfTVMgLSBkaWZmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0RXhlY3V0aW9uVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGxvY2s7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5NYWNoaW5lV29ya2Zsb3cgPSBNYWNoaW5lV29ya2Zsb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWNoaW5lX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nclass MongoOIDCError extends error_1.MongoDriverError {\n}\n/** @internal */\nclass TokenCache {\n    get hasAccessToken() {\n        return !!this.accessToken;\n    }\n    get hasRefreshToken() {\n        return !!this.refreshToken;\n    }\n    get hasIdpInfo() {\n        return !!this.idpInfo;\n    }\n    getAccessToken() {\n        if (!this.accessToken) {\n            throw new MongoOIDCError('Attempted to get an access token when none exists.');\n        }\n        return this.accessToken;\n    }\n    getRefreshToken() {\n        if (!this.refreshToken) {\n            throw new MongoOIDCError('Attempted to get a refresh token when none exists.');\n        }\n        return this.refreshToken;\n    }\n    getIdpInfo() {\n        if (!this.idpInfo) {\n            throw new MongoOIDCError('Attempted to get IDP information when none exists.');\n        }\n        return this.idpInfo;\n    }\n    put(response, idpInfo) {\n        this.accessToken = response.accessToken;\n        this.refreshToken = response.refreshToken;\n        this.expiresInSeconds = response.expiresInSeconds;\n        if (idpInfo) {\n            this.idpInfo = idpInfo;\n        }\n    }\n    removeAccessToken() {\n        this.accessToken = undefined;\n    }\n    removeRefreshToken() {\n        this.refreshToken = undefined;\n    }\n}\nexports.TokenCache = TokenCache;\n//# sourceMappingURL=token_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXG1vbmdvZGJfb2lkY1xcdG9rZW5fY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuQ2FjaGUgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY2xhc3MgTW9uZ29PSURDRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRHJpdmVyRXJyb3Ige1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVG9rZW5DYWNoZSB7XG4gICAgZ2V0IGhhc0FjY2Vzc1Rva2VuKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBnZXQgaGFzUmVmcmVzaFRva2VuKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnJlZnJlc2hUb2tlbjtcbiAgICB9XG4gICAgZ2V0IGhhc0lkcEluZm8oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaWRwSW5mbztcbiAgICB9XG4gICAgZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1vbmdvT0lEQ0Vycm9yKCdBdHRlbXB0ZWQgdG8gZ2V0IGFuIGFjY2VzcyB0b2tlbiB3aGVuIG5vbmUgZXhpc3RzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBnZXRSZWZyZXNoVG9rZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNb25nb09JRENFcnJvcignQXR0ZW1wdGVkIHRvIGdldCBhIHJlZnJlc2ggdG9rZW4gd2hlbiBub25lIGV4aXN0cy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW47XG4gICAgfVxuICAgIGdldElkcEluZm8oKSB7XG4gICAgICAgIGlmICghdGhpcy5pZHBJbmZvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9uZ29PSURDRXJyb3IoJ0F0dGVtcHRlZCB0byBnZXQgSURQIGluZm9ybWF0aW9uIHdoZW4gbm9uZSBleGlzdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaWRwSW5mbztcbiAgICB9XG4gICAgcHV0KHJlc3BvbnNlLCBpZHBJbmZvKSB7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSByZXNwb25zZS5yZWZyZXNoVG9rZW47XG4gICAgICAgIHRoaXMuZXhwaXJlc0luU2Vjb25kcyA9IHJlc3BvbnNlLmV4cGlyZXNJblNlY29uZHM7XG4gICAgICAgIGlmIChpZHBJbmZvKSB7XG4gICAgICAgICAgICB0aGlzLmlkcEluZm8gPSBpZHBJbmZvO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuKCkge1xuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZW1vdmVSZWZyZXNoVG9rZW4oKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5DYWNoZSA9IFRva2VuQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbl9jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenMachineWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'OIDC_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass TokenMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.OIDC_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        const token = await fs.promises.readFile(tokenFile, 'utf8');\n        return { access_token: token };\n    }\n}\nexports.TokenMachineWorkflow = TokenMachineWorkflow;\n//# sourceMappingURL=token_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGdCQUFnQixtQkFBTyxDQUFDLHVHQUFnQjtBQUN4QywyQkFBMkIsbUJBQU8sQ0FBQyw2SUFBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxhdXRoXFxtb25nb2RiX29pZGNcXHRva2VuX21hY2hpbmVfd29ya2Zsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgbWFjaGluZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbWFjaGluZV93b3JrZmxvd1wiKTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9NSVNTSU5HX0VSUk9SID0gJ09JRENfVE9LRU5fRklMRSBtdXN0IGJlIHNldCBpbiB0aGUgZW52aXJvbm1lbnQuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBV1MuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRva2VuTWFjaGluZVdvcmtmbG93IGV4dGVuZHMgbWFjaGluZV93b3JrZmxvd18xLk1hY2hpbmVXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIG1hY2hpbmUgd29ya2Zsb3cuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FjaGUpIHtcbiAgICAgICAgc3VwZXIoY2FjaGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBjb25zdCB0b2tlbkZpbGUgPSBwcm9jZXNzLmVudi5PSURDX1RPS0VOX0ZJTEU7XG4gICAgICAgIGlmICghdG9rZW5GaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKFRPS0VOX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodG9rZW5GaWxlLCAndXRmOCcpO1xuICAgICAgICByZXR1cm4geyBhY2Nlc3NfdG9rZW46IHRva2VuIH07XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbk1hY2hpbmVXb3JrZmxvdyA9IFRva2VuTWFjaGluZVdvcmtmbG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5fbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/plain.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcGxhaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQyxrR0FBWTtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQywwSEFBaUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQyw2REFBNkQsU0FBUyxNQUFNLFNBQVM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxhdXRoXFxwbGFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGxhaW4gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNsYXNzIFBsYWluIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBic29uXzEuQmluYXJ5KEJ1ZmZlci5mcm9tKGBcXHgwMCR7dXNlcm5hbWV9XFx4MDAke3Bhc3N3b3JkfWApKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgICAgIG1lY2hhbmlzbTogJ1BMQUlOJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICBhdXRvQXV0aG9yaXplOiAxXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpbiA9IFBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLHFCQUFxQjtBQUM1RDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxhdXRoXFxwcm92aWRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBleHBvcnRzLkF1dGhNZWNoYW5pc20gPSB2b2lkIDA7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTU9OR09EQl9BV1M6ICdNT05HT0RCLUFXUycsXG4gICAgTU9OR09EQl9DUjogJ01PTkdPREItQ1InLFxuICAgIE1PTkdPREJfREVGQVVMVDogJ0RFRkFVTFQnLFxuICAgIE1PTkdPREJfR1NTQVBJOiAnR1NTQVBJJyxcbiAgICBNT05HT0RCX1BMQUlOOiAnUExBSU4nLFxuICAgIE1PTkdPREJfU0NSQU1fU0hBMTogJ1NDUkFNLVNIQS0xJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTI1NjogJ1NDUkFNLVNIQS0yNTYnLFxuICAgIE1PTkdPREJfWDUwOTogJ01PTkdPREItWDUwOScsXG4gICAgTU9OR09EQl9PSURDOiAnTU9OR09EQi1PSURDJ1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBuZXcgU2V0KFtcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQVdTLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfWDUwOVxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/scram.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(rsc)/../../node_modules/.pnpm/@mongodb-js+saslprep@1.2.2/node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return await continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return await executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/x509.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgveDUwOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1osZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsMEhBQWlCO0FBQ2pEO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXGF1dGhcXHg1MDkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlg1MDkgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBYNTA5IGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpIH07XG4gICAgfVxuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF1dGhDb250ZXh0LmNvbm5lY3Rpb247XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXV0aENvbnRleHQuY3JlZGVudGlhbHM7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF1dGhDb250ZXh0LnJlc3BvbnNlO1xuICAgICAgICBpZiAocmVzcG9uc2U/LnNwZWN1bGF0aXZlQXV0aGVudGljYXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuWDUwOSA9IFg1MDk7XG5mdW5jdGlvbiB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSB7IGF1dGhlbnRpY2F0ZTogMSwgbWVjaGFuaXNtOiAnTU9OR09EQi1YNTA5JyB9O1xuICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICBjb21tYW5kLnVzZXIgPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD14NTA5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(reply));\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        const cmd = { ...command.command };\n        // For OP_MSG with payload type 1 we need to pull the documents\n        // array out of the document sequence for monitoring.\n        if (cmd.ops instanceof commands_1.DocumentSequence) {\n            cmd.ops = cmd.ops.documents;\n        }\n        if (cmd.nsInfo instanceof commands_1.DocumentSequence) {\n            cmd.nsInfo = cmd.nsInfo.documents;\n        }\n        return cmd;\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = { ...command.query[key] };\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = command[legacyKey];\n            }\n        });\n        return result;\n    }\n    let clonedQuery = {};\n    const clonedCommand = { ...command };\n    if (command.query) {\n        clonedQuery = { ...command.query };\n        clonedCommand.query = clonedQuery;\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(reply) {\n    if (!reply) {\n        return reply;\n    }\n    return reply.result ? reply.result : reply;\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.DocumentSequence = exports.OpReply = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\nconst encodeUTF8Into = BSON.BSON.onDemand.ByteUtils.encodeUTF8Into;\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        this.databaseName = databaseName;\n        this.query = query;\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpReply {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        if (this.numberReturned < 0 || this.numberReturned > 2 ** 32 - 1) {\n            throw new RangeError(`OP_REPLY numberReturned is an invalid array length ${this.numberReturned}`);\n        }\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            const bsonSize = this.data[this.index] |\n                (this.data[this.index + 1] << 8) |\n                (this.data[this.index + 2] << 16) |\n                (this.data[this.index + 3] << 24);\n            const section = this.data.subarray(this.index, this.index + bsonSize);\n            this.sections.push(section);\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        // Set parsed\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpReply = OpReply;\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass DocumentSequence {\n    /**\n     * Create a new document sequence for the provided field.\n     * @param field - The field it will replace.\n     */\n    constructor(field, documents) {\n        this.field = field;\n        this.documents = [];\n        this.chunks = [];\n        this.serializedDocumentsLength = 0;\n        // Document sequences starts with type 1 at the first byte.\n        // Field strings must always be UTF-8.\n        const buffer = Buffer.allocUnsafe(1 + 4 + this.field.length + 1);\n        buffer[0] = 1;\n        // Third part is the field name at offset 5 with trailing null byte.\n        encodeUTF8Into(buffer, `${this.field}\\0`, 5);\n        this.chunks.push(buffer);\n        this.header = buffer;\n        if (documents) {\n            for (const doc of documents) {\n                this.push(doc, BSON.serialize(doc));\n            }\n        }\n    }\n    /**\n     * Push a document to the document sequence. Will serialize the document\n     * as well and return the current serialized length of all documents.\n     * @param document - The document to add.\n     * @param buffer - The serialized document in raw BSON.\n     * @returns The new total document sequence length.\n     */\n    push(document, buffer) {\n        this.serializedDocumentsLength += buffer.length;\n        // Push the document.\n        this.documents.push(document);\n        // Push the document raw bson.\n        this.chunks.push(buffer);\n        // Write the new length.\n        this.header?.writeInt32LE(4 + this.field.length + 1 + this.serializedDocumentsLength, 1);\n        return this.serializedDocumentsLength + this.header.length;\n    }\n    /**\n     * Get the fully serialized bytes for the document sequence section.\n     * @returns The section bytes.\n     */\n    toBin() {\n        return Buffer.concat(this.chunks);\n    }\n}\nexports.DocumentSequence = DocumentSequence;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.command.$db = databaseName;\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome ?? command.writeConcern?.w === 0;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeSections(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    /**\n     * Add the sections to the OP_MSG request's buffers and returns the length.\n     */\n    makeSections(buffers, document) {\n        const sequencesBuffer = this.extractDocumentSequences(document);\n        const payloadTypeBuffer = Buffer.allocUnsafe(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        // First section, type 0\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        // Subsequent sections, type 1\n        buffers.push(sequencesBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length + sequencesBuffer.length;\n    }\n    /**\n     * Extracts the document sequences from the command document and returns\n     * a buffer to be added as multiple sections after the initial type 0\n     * section in the message.\n     */\n    extractDocumentSequences(document) {\n        // Pull out any field in the command document that's value is a document sequence.\n        const chunks = [];\n        for (const [key, value] of Object.entries(document)) {\n            if (value instanceof DocumentSequence) {\n                chunks.push(value.toBin());\n                // Why are we removing the field from the command? This is because it needs to be\n                // removed in the OP_MSG request first section, and DocumentSequence is not a\n                // BSON type and is specific to the MongoDB wire protocol so there's nothing\n                // our BSON serializer can do about this. Since DocumentSequence is not exposed\n                // in the public API and only used internally, we are never mutating an original\n                // command provided by the user, just our own, and it's cheaper to delete from\n                // our own command than copying it.\n                delete document[key];\n            }\n        }\n        if (chunks.length > 0) {\n            return Buffer.concat(chunks);\n        }\n        // If we have no document sequences we return an empty buffer for nothing to add\n        // to the payload.\n        return Buffer.alloc(0);\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        this.index = 4;\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.subarray(this.index, this.index + bsonSize);\n                this.sections.push(bin);\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connect.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connect.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = void 0;\nexports.connect = connect;\nexports.makeConnection = makeConnection;\nexports.performInitialHandshake = performInitialHandshake;\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\nexports.makeSocket = makeSocket;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    }\n    catch (error) {\n        connection?.destroy();\n        throw error;\n    }\n}\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options, raw: false };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await executeHandshake(handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion, conn.description.type)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n    async function executeHandshake(handshakeDoc, handshakeOptions) {\n        try {\n            const handshakeResponse = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n            return handshakeResponse;\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n            }\n            throw error;\n        }\n    }\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const clientMetadata = await options.extendedMetadata;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: clientMetadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, credentials.mechanismProperties);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return await provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return await provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'allowPartialTrustChain',\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'autoSelectFamily',\n    'autoSelectFamilyAttemptTimeout',\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return await makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    }\n    else {\n        const start = performance.now();\n        const connectEvent = useTLS ? 'secureConnect' : 'connect';\n        socket\n            .once(connectEvent, () => resolve(socket))\n            .once('error', cause => reject(new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause })))\n            .once('timeout', () => {\n            reject(new error_1.MongoNetworkTimeoutError(`Socket '${connectEvent}' timed out after ${(performance.now() - start) | 0}ms (connectTimeoutMS: ${connectTimeoutMS})`));\n        })\n            .once('close', () => reject(new error_1.MongoNetworkError(`Socket closed after ${(performance.now() - start) | 0} during connection establishment`)));\n        if (options.cancellationToken != null) {\n            cancellationHandler = () => reject(new error_1.MongoNetworkError(`Socket connection establishment was cancelled after ${(performance.now() - start) | 0}`));\n            options.cancellationToken.once('cancel', cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    }\n    catch (error) {\n        socket.destroy();\n        throw error;\n    }\n    finally {\n        socket.setTimeout(0);\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener('cancel', cancellationHandler);\n        }\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n    }\n    socks ??= loadSocks();\n    let existingSocket;\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const connection = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        existingSocket = connection.socket;\n    }\n    catch (cause) {\n        throw new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause });\n    }\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({ ...options, existingSocket, proxyHost: undefined });\n}\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = void 0;\nexports.hasSessionSupport = hasSessionSupport;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst on_data_1 = __webpack_require__(/*! ./wire_protocol/on_data */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\");\nconst responses_1 = __webpack_require__(/*! ./wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        /** Indicates that the connection (including underlying TCP socket) has been closed. */\n        this.closed = false;\n        this.clusterTime = null;\n        this.error = null;\n        this.dataEvents = null;\n        this.on('error', utils_1.noop);\n        this.socket = stream;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.messageStream = this.socket\n            .on('error', this.onError.bind(this))\n            .pipe(new SizedMessageTransform({ connection: this }))\n            .on('error', this.onError.bind(this));\n        this.socket.on('close', this.onClose.bind(this));\n        this.socket.on('timeout', this.onTimeout.bind(this));\n        this.messageStream.pause();\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    get shouldEmitAndLogCommand() {\n        return ((this.monitorCommands ||\n            (this.established &&\n                !this.authContext?.reauthenticating &&\n                this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))) ??\n            false);\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy() {\n        if (this.closed) {\n            return;\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.error = error;\n        this.dataEvents?.throw(error).then(undefined, utils_1.squashError);\n        this.closed = true;\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError)\n                throw sessionError;\n        }\n        else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        // For standalone, drivers MUST NOT set $readPreference.\n        if (this.description.type !== common_1.ServerType.Standalone) {\n            if (!(0, shared_1.isSharded)(this) &&\n                !this.description.loadBalanced &&\n                this.supportsOpMsg &&\n                options.directConnection === true &&\n                readPreference?.mode === 'primary') {\n                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n                // For all other types with a direct connection, if the read preference is 'primary'\n                // (driver sets 'primary' as default if no read preference is configured),\n                // the $readPreference MUST be set to 'primaryPreferred'\n                // to ensure that any server type can handle the request.\n                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n            }\n            else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n                // When sending a read operation via OP_QUERY and the $readPreference modifier,\n                // the query MUST be provided using the $query modifier.\n                cmd = {\n                    $query: cmd,\n                    $readPreference: readPreference.toJSON()\n                };\n            }\n            else if (readPreference?.mode !== 'primary') {\n                // For mode 'primary', drivers MUST NOT set $readPreference.\n                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n                // drivers MUST set $readPreference\n                cmd.$readPreference = readPreference.toJSON();\n            }\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options\n        };\n        options.timeoutContext?.addMaxTimeMSToCommand(cmd, options);\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options, responseType) {\n        this.throwIfAborted();\n        const timeout = options.socketTimeoutMS ??\n            options?.timeoutContext?.getSocketTimeoutMS() ??\n            this.socketTimeoutMS;\n        this.socket.setTimeout(timeout);\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? 'none',\n                zlibCompressionLevel: this.description.zlibCompressionLevel,\n                timeoutContext: options.timeoutContext,\n                signal: options.signal\n            });\n            if (options.noResponse || message.moreToCome) {\n                yield responses_1.MongoDBResponse.empty;\n                return;\n            }\n            this.throwIfAborted();\n            if (options.timeoutContext?.csotEnabled() &&\n                options.timeoutContext.minRoundTripTime != null &&\n                options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime) {\n                throw new error_1.MongoOperationTimeoutError('Server roundtrip time is greater than the time remaining');\n            }\n            for await (const response of this.readMany(options)) {\n                this.socket.setTimeout(0);\n                const bson = response.parse();\n                const document = (responseType ?? responses_1.MongoDBResponse).make(bson);\n                yield document;\n                this.throwIfAborted();\n                this.socket.setTimeout(timeout);\n            }\n        }\n        finally {\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options, responseType) {\n        options?.signal?.throwIfAborted();\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n        // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n        const bsonOptions = options.documentsReturnedIn == null || !options.raw\n            ? options\n            : {\n                ...options,\n                raw: false,\n                fieldsAsRaw: { [options.documentsReturnedIn]: true }\n            };\n        /** MongoDBResponse instance or subclass */\n        let document = undefined;\n        /** Cached result of a toObject call */\n        let object = undefined;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options, responseType)) {\n                object = undefined;\n                if (options.session != null) {\n                    (0, sessions_1.updateSessionFromResponse)(options.session, document);\n                }\n                if (document.$clusterTime) {\n                    this.clusterTime = document.$clusterTime;\n                    this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                }\n                if (document.ok === 0) {\n                    if (options.timeoutContext?.csotEnabled() && document.isMaxTimeExpiredError) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError((object ??= document.toObject(bsonOptions)))\n                        });\n                    }\n                    throw new error_1.MongoServerError((object ??= document.toObject(bsonOptions)));\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse\n                        ? undefined\n                        : message.moreToCome\n                            ? { ok: 1 }\n                            : (object ??= document.toObject(bsonOptions)), started, this.description.serverConnectionId));\n                }\n                if (responseType == null) {\n                    yield (object ??= document.toObject(bsonOptions));\n                }\n                else {\n                    yield document;\n                }\n                this.throwIfAborted();\n            }\n        }\n        catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}, responseType) {\n        this.throwIfAborted();\n        options.signal?.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options, responseType)) {\n            if (options.timeoutContext?.csotEnabled()) {\n                if (responses_1.MongoDBResponse.is(document)) {\n                    if (document.isMaxTimeExpiredError) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError(document.toObject())\n                        });\n                    }\n                }\n                else {\n                    if ((Array.isArray(document?.writeErrors) &&\n                        document.writeErrors.some(error => error?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired)) ||\n                        document?.writeConcernError?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError(document)\n                        });\n                    }\n                }\n            }\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async () => {\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)) {\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n        };\n        exhaustLoop().then(undefined, replyListener);\n    }\n    throwIfAborted() {\n        if (this.error)\n            throw this.error;\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */\n    async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n            ? command\n            : new commands_1.OpCompressedRequest(command, {\n                agreedCompressor: options.agreedCompressor ?? 'none',\n                zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n            });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        if (options.timeoutContext?.csotEnabled()) {\n            if (options.timeoutContext.minRoundTripTime != null &&\n                options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime) {\n                throw new error_1.MongoOperationTimeoutError('Server roundtrip time is greater than the time remaining');\n            }\n        }\n        if (this.socket.write(buffer))\n            return;\n        const drainEvent = (0, utils_1.once)(this.socket, 'drain', options);\n        const timeout = options?.timeoutContext?.timeoutForSocketWrite;\n        const drained = timeout ? Promise.race([drainEvent, timeout]) : drainEvent;\n        try {\n            return await drained;\n        }\n        catch (writeError) {\n            if (timeout_1.TimeoutError.is(writeError)) {\n                const timeoutError = new error_1.MongoOperationTimeoutError('Timed out at socket write');\n                this.onError(timeoutError);\n                throw timeoutError;\n            }\n            else if (writeError === options.signal?.reason) {\n                this.onError(writeError);\n            }\n            throw writeError;\n        }\n        finally {\n            timeout?.clear();\n        }\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */\n    async *readMany(options) {\n        try {\n            this.dataEvents = (0, on_data_1.onData)(this.messageStream, options);\n            this.messageStream.resume();\n            for await (const message of this.dataEvents) {\n                const response = await (0, compression_1.decompressResponse)(message);\n                yield response;\n                if (!response.moreToCome) {\n                    return;\n                }\n            }\n        }\n        catch (readError) {\n            if (timeout_1.TimeoutError.is(readError)) {\n                const timeoutError = new error_1.MongoOperationTimeoutError(`Timed out during socket read (${readError.duration}ms)`);\n                this.dataEvents = null;\n                this.onError(timeoutError);\n                throw timeoutError;\n            }\n            else if (readError === options.signal?.reason) {\n                this.onError(readError);\n            }\n            throw readError;\n        }\n        finally {\n            this.dataEvents = null;\n            this.messageStream.pause();\n            this.throwIfAborted();\n        }\n    }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }) {\n        super({ writableObjectMode: false, readableObjectMode: true });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        while (this.bufferPool.length) {\n            // While there are any bytes in the buffer\n            // Try to fetch a size from the top 4 bytes\n            const sizeOfMessage = this.bufferPool.getInt32();\n            if (sizeOfMessage == null) {\n                // Not even an int32 worth of data. Stop the loop, we need more chunks.\n                break;\n            }\n            if (sizeOfMessage < 0) {\n                // The size in the message has a negative value, this is probably corruption, throw:\n                return callback(new error_1.MongoParseError(`Message size cannot be negative: ${sizeOfMessage}`));\n            }\n            if (sizeOfMessage > this.bufferPool.length) {\n                // We do not have enough bytes to make a sizeOfMessage chunk\n                break;\n            }\n            // Add a message to the stream\n            const message = this.bufferPool.read(sizeOfMessage);\n            if (!this.push(message)) {\n                // We only subscribe to data events so we should never get backpressure\n                // if we do, we do not have the handling for it.\n                return callback(new error_1.MongoRuntimeError(`SizedMessageTransform does not support backpressure`));\n            }\n        }\n        callback();\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    async command(ns, cmd, options, responseType) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n            // @ts-expect-error No cause provided because there is no underlying error.\n            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n                dependencyName: 'n/a'\n            });\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return await super.command(ns, cmd, options, responseType);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()) {\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const encryptedResponse = await super.command(ns, encrypted, options, \n        // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n        // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n        // So that we can ensure we have access to the on-demand APIs for decorate response\n        responseType ?? responses_1.MongoDBResponse);\n        const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n        const decryptedResponse = responseType?.make(result) ?? (0, bson_1.deserialize)(result, options);\n        if (autoEncrypter[constants_1.kDecorateResult]) {\n            if (responseType == null) {\n                (0, utils_1.decorateDecryptionResult)(decryptedResponse, encryptedResponse.toObject(), true);\n            }\n            else if (decryptedResponse instanceof responses_1.CursorResponse) {\n                decryptedResponse.encryptedResponse = encryptedResponse;\n            }\n        }\n        return decryptedResponse;\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this.poolState = exports.PoolState.paused;\n        this.server = server;\n        this.connections = new utils_1.List();\n        this.pending = 0;\n        this.checkedOut = new Set();\n        this.minPoolSizeTimer = undefined;\n        this.generation = 0;\n        this.serviceGenerations = new Map();\n        this.connectionCounter = (0, utils_1.makeCounter)(1);\n        this.cancellationToken = new mongo_types_1.CancellationToken();\n        this.cancellationToken.setMaxListeners(Infinity);\n        this.waitQueue = new utils_1.List();\n        this.metrics = new metrics_1.ConnectionPoolMetrics();\n        this.processingWaitQueue = false;\n        this.mongoLogger = this.server.topology.client?.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this.poolState === exports.PoolState.closed;\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this.connections.length;\n    }\n    get pendingConnectionCount() {\n        return this.pending;\n    }\n    get currentCheckedOutCount() {\n        return this.checkedOut.size;\n    }\n    get waitQueueSize() {\n        return this.waitQueue.length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serverError() {\n        return this.server.description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this.checkedOut;\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this.metrics.info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this.poolState !== exports.PoolState.paused) {\n            return;\n        }\n        this.poolState = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    async checkOut(options) {\n        const checkoutTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const timeout = options.timeoutContext.connectionCheckoutTimeout;\n        const waitQueueMember = {\n            resolve,\n            reject,\n            cancelled: false,\n            checkoutTime\n        };\n        const abortListener = (0, utils_1.addAbortListener)(options.signal, function () {\n            waitQueueMember.cancelled = true;\n            reject(this.reason);\n        });\n        this.waitQueue.push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n        try {\n            timeout?.throwIfExpired();\n            return await (timeout ? Promise.race([promise, timeout]) : promise);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                timeout?.clear();\n                waitQueueMember.cancelled = true;\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));\n                const timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address);\n                if (options.timeoutContext.csotEnabled()) {\n                    throw new error_1.MongoOperationTimeoutError('Timed out during connection checkout', {\n                        cause: timeoutError\n                    });\n                }\n                throw timeoutError;\n            }\n            throw error;\n        }\n        finally {\n            abortListener?.[utils_1.kDispose]();\n            timeout?.clear();\n        }\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this.checkedOut.has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this.connections.unshift(connection);\n        }\n        this.checkedOut.delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this.generation;\n        this.generation += 1;\n        const alreadyPaused = this.poolState === exports.PoolState.paused;\n        this.poolState = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this.checkedOut) {\n            if (connection.generation <= minGeneration) {\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n                this.checkIn(connection);\n            }\n        }\n    }\n    /** Close the pool */\n    close() {\n        if (this.closed) {\n            return;\n        }\n        // immediately cancel any in-flight connections\n        this.cancellationToken.emit('cancel');\n        // end the connection counter\n        if (typeof this.connectionCounter.return === 'function') {\n            this.connectionCounter.return(undefined);\n        }\n        this.poolState = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        for (const conn of this.connections) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy();\n        }\n        this.connections.clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */\n    async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError('No auth context found on connection.');\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this.server.topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this.minPoolSizeTimer;\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        connection.destroy();\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this.generation;\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this.connectionCounter.next().value,\n            generation: this.generation,\n            cancellationToken: this.cancellationToken,\n            mongoLogger: this.mongoLogger,\n            authProviders: this.server.topology.client.s.authProviders\n        };\n        this.pending++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        const connectionCreatedTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions).then(connection => {\n            // The pool might have closed since we started trying to create a connection\n            if (this.poolState !== exports.PoolState.ready) {\n                this.pending--;\n                connection.destroy();\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this.metrics.markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this.metrics.markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection, connectionCreatedTime));\n            this.pending--;\n            callback(undefined, connection);\n        }, error => {\n            this.pending--;\n            this.server.handleError(error);\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n            // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this.poolState !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this.connections.prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (!err && connection) {\n                    this.connections.push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this.poolState === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n                    this.minPoolSizeTimer = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n            this.minPoolSizeTimer = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this.processingWaitQueue) {\n            return;\n        }\n        this.processingWaitQueue = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this.waitQueue.first();\n            if (!waitQueueMember) {\n                this.waitQueue.shift();\n                continue;\n            }\n            if (waitQueueMember.cancelled) {\n                this.waitQueue.shift();\n                continue;\n            }\n            if (this.poolState !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));\n                this.waitQueue.shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this.connections.shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this.checkedOut.add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                this.waitQueue.shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this.waitQueue.shift();\n            if (!waitQueueMember || waitQueueMember.cancelled) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember.cancelled) {\n                    if (!err && connection) {\n                        this.connections.push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', waitQueueMember.checkoutTime, err));\n                        waitQueueMember.reject(err);\n                    }\n                    else if (connection) {\n                        this.checkedOut.add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                        waitQueueMember.resolve(connection);\n                    }\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this.processingWaitQueue = false;\n    }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\n//# sourceMappingURL=connection_pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, connectionCreatedEventTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.durationMS = (0, utils_1.now)() - connectionCreatedEventTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, checkoutTime, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, checkoutTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/errors.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/errors.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyxpQ0FBaUMsR0FBRyx3QkFBd0IsR0FBRyx1QkFBdUI7QUFDdEgsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWMsc0RBQXNELDBCQUEwQjtBQUNuSSxpREFBaUQsMEJBQTBCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY21hcFxcZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWl0UXVldWVUaW1lb3V0RXJyb3IgPSBleHBvcnRzLlBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3IgPSBleHBvcnRzLlBvb2xDbGVhcmVkRXJyb3IgPSBleHBvcnRzLlBvb2xDbG9zZWRFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG4vKipcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgYSBjb25uZWN0aW9uIHBvb2wgaXMgY2xvc2VkXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsb3NlZEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0RyaXZlckVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcignQXR0ZW1wdGVkIHRvIGNoZWNrIG91dCBhIGNvbm5lY3Rpb24gZnJvbSBjbG9zZWQgY29ubmVjdGlvbiBwb29sJyk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IHBvb2wuYWRkcmVzcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29Qb29sQ2xvc2VkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsb3NlZEVycm9yID0gUG9vbENsb3NlZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGEgY29ubmVjdGlvbiBwb29sIGlzIGN1cnJlbnRseSBwYXVzZWRcbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb05ldHdvcmtFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gbWVzc2FnZVxuICAgICAgICAgICAgPyBtZXNzYWdlXG4gICAgICAgICAgICA6IGBDb25uZWN0aW9uIHBvb2wgZm9yICR7cG9vbC5hZGRyZXNzfSB3YXMgY2xlYXJlZCBiZWNhdXNlIGFub3RoZXIgb3BlcmF0aW9uIGZhaWxlZCB3aXRoOiBcIiR7cG9vbC5zZXJ2ZXJFcnJvcj8ubWVzc2FnZX1cImA7XG4gICAgICAgIHN1cGVyKGVycm9yTWVzc2FnZSwgcG9vbC5zZXJ2ZXJFcnJvciA/IHsgY2F1c2U6IHBvb2wuc2VydmVyRXJyb3IgfSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IHBvb2wuYWRkcmVzcztcbiAgICAgICAgdGhpcy5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlBvb2xSZXF1c3RlZFJldHJ5KTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29Qb29sQ2xlYXJlZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbGVhcmVkRXJyb3IgPSBQb29sQ2xlYXJlZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYSBjb25uZWN0aW9uIHBvb2wgaGFzIGJlZW4gY2xlYXJlZCBhZnRlciB0aGUgbW9uaXRvciBmb3IgdGhhdCBzZXJ2ZXIgdGltZWQgb3V0LlxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3IgZXh0ZW5kcyBQb29sQ2xlYXJlZEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcihwb29sLCBgQ29ubmVjdGlvbiB0byAke3Bvb2wuYWRkcmVzc30gaW50ZXJydXB0ZWQgZHVlIHRvIHNlcnZlciBtb25pdG9yIHRpbWVvdXRgKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yID0gUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYSByZXF1ZXN0IHRvIGNoZWNrIG91dCBhIGNvbm5lY3Rpb24gdGltZXMgb3V0XG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgV2FpdFF1ZXVlVGltZW91dEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0RyaXZlckVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYWRkcmVzcykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29XYWl0UXVldWVUaW1lb3V0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuV2FpdFF1ZXVlVGltZW91dEVycm9yID0gV2FpdFF1ZXVlVGltZW91dEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LimitedSizeDocument = void 0;\nexports.makeClientMetadata = makeClientMetadata;\nexports.addContainerMetadata = addContainerMetadata;\nexports.getFAASEnv = getFAASEnv;\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/package.json\").version);\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nlet dockerPromise;\n/** @internal */\nasync function getContainerMetadata() {\n    const containerMetadata = {};\n    dockerPromise ??= (0, utils_1.fileIsAccessible)('/.dockerenv');\n    const isDocker = await dockerPromise;\n    const { KUBERNETES_SERVICE_HOST = '' } = process.env;\n    const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n    if (isDocker)\n        containerMetadata.runtime = 'docker';\n    if (isKubernetes)\n        containerMetadata.orchestrator = 'kubernetes';\n    return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nasync function addContainerMetadata(originalMetadata) {\n    const containerMetadata = await getContainerMetadata();\n    if (Object.keys(containerMetadata).length === 0)\n        return originalMetadata;\n    const extendedMetadata = new LimitedSizeDocument(512);\n    const extendedEnvMetadata = { ...originalMetadata?.env, container: containerMetadata };\n    for (const [key, val] of Object.entries(originalMetadata)) {\n        if (key !== 'env') {\n            extendedMetadata.ifItFitsItSits(key, val);\n        }\n        else {\n            if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n                // add in old data if newer / extended metadata does not fit\n                extendedMetadata.ifItFitsItSits('env', val);\n            }\n        }\n    }\n    if (!('env' in originalMetadata)) {\n        extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n    }\n    return extendedMetadata.toObject();\n}\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2hhbmRzaGFrZS9jbGllbnRfbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIsa0JBQWtCO0FBQ2xCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGdCQUFnQixtQkFBTyxDQUFDLHdCQUFTO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyxrR0FBWTtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBYTtBQUNyQztBQUNBLDRCQUE0Qiw2SUFBd0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsTUFBTTtBQUMvRDtBQUNBLFlBQVkseUNBQXlDO0FBQ3JEO0FBQ0EsMENBQTBDLEtBQUs7QUFDL0MseUNBQXlDLG9CQUFvQixHQUFHLFFBQVE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFlBQVksR0FBRyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0JBQStCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyUkFBMlI7QUFDdlM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRLElBQUksZ0JBQWdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRLElBQUksZ0JBQWdCO0FBQ25EO0FBQ0Esc0JBQXNCLGdCQUFnQixJQUFJLGdCQUFnQjtBQUMxRDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFxoYW5kc2hha2VcXGNsaWVudF9tZXRhZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGltaXRlZFNpemVEb2N1bWVudCA9IHZvaWQgMDtcbmV4cG9ydHMubWFrZUNsaWVudE1ldGFkYXRhID0gbWFrZUNsaWVudE1ldGFkYXRhO1xuZXhwb3J0cy5hZGRDb250YWluZXJNZXRhZGF0YSA9IGFkZENvbnRhaW5lck1ldGFkYXRhO1xuZXhwb3J0cy5nZXRGQUFTRW52ID0gZ2V0RkFBU0VudjtcbmNvbnN0IG9zID0gcmVxdWlyZShcIm9zXCIpO1xuY29uc3QgcHJvY2VzcyA9IHJlcXVpcmUoXCJwcm9jZXNzXCIpO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uLy4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG5jb25zdCBOT0RFX0RSSVZFUl9WRVJTSU9OID0gcmVxdWlyZSgnLi4vLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIExpbWl0ZWRTaXplRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG1heFNpemUpIHtcbiAgICAgICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZTtcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqIEJTT04gb3ZlcmhlYWQ6IEludDMyICsgTnVsbCBieXRlICovXG4gICAgICAgIHRoaXMuZG9jdW1lbnRTaXplID0gNTtcbiAgICB9XG4gICAgLyoqIE9ubHkgYWRkcyBrZXkvdmFsdWUgaWYgdGhlIGJzb25CeXRlTGVuZ3RoIGlzIGxlc3MgdGhhbiBNQVhfU0laRSAqL1xuICAgIGlmSXRGaXRzSXRTaXRzKGtleSwgdmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIEJTT04gYnl0ZUxlbmd0aCBvZiB0aGUgbmV3IGVsZW1lbnQgaXMgdGhlIHNhbWUgYXMgc2VyaWFsaXppbmcgaXQgdG8gaXRzIG93biBkb2N1bWVudFxuICAgICAgICAvLyBzdWJ0cmFjdGluZyB0aGUgZG9jdW1lbnQgc2l6ZSBpbnQzMiBhbmQgdGhlIG51bGwgdGVybWluYXRvci5cbiAgICAgICAgY29uc3QgbmV3RWxlbWVudFNpemUgPSBic29uXzEuQlNPTi5zZXJpYWxpemUobmV3IE1hcCgpLnNldChrZXksIHZhbHVlKSkuYnl0ZUxlbmd0aCAtIDU7XG4gICAgICAgIGlmIChuZXdFbGVtZW50U2l6ZSArIHRoaXMuZG9jdW1lbnRTaXplID4gdGhpcy5tYXhTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb2N1bWVudFNpemUgKz0gbmV3RWxlbWVudFNpemU7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdG9PYmplY3QoKSB7XG4gICAgICAgIHJldHVybiBic29uXzEuQlNPTi5kZXNlcmlhbGl6ZShic29uXzEuQlNPTi5zZXJpYWxpemUodGhpcy5kb2N1bWVudCksIHtcbiAgICAgICAgICAgIHByb21vdGVMb25nczogZmFsc2UsXG4gICAgICAgICAgICBwcm9tb3RlQnVmZmVyczogZmFsc2UsXG4gICAgICAgICAgICBwcm9tb3RlVmFsdWVzOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZUJpZ0ludDY0OiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkxpbWl0ZWRTaXplRG9jdW1lbnQgPSBMaW1pdGVkU2l6ZURvY3VtZW50O1xuLyoqXG4gKiBGcm9tIHRoZSBzcGVjczpcbiAqIEltcGxlbWVudG9ycyBTSE9VTEQgY3VtdWxhdGl2ZWx5IHVwZGF0ZSBmaWVsZHMgaW4gdGhlIGZvbGxvd2luZyBvcmRlciB1bnRpbCB0aGUgZG9jdW1lbnQgaXMgdW5kZXIgdGhlIHNpemUgbGltaXQ6XG4gKiAxLiBPbWl0IGZpZWxkcyBmcm9tIGBlbnZgIGV4Y2VwdCBgZW52Lm5hbWVgLlxuICogMi4gT21pdCBmaWVsZHMgZnJvbSBgb3NgIGV4Y2VwdCBgb3MudHlwZWAuXG4gKiAzLiBPbWl0IHRoZSBgZW52YCBkb2N1bWVudCBlbnRpcmVseS5cbiAqIDQuIFRydW5jYXRlIGBwbGF0Zm9ybWAuIC0tIHNwZWNpYWwgd2UgZG8gbm90IHRydW5jYXRlIHRoaXMgZmllbGRcbiAqL1xuZnVuY3Rpb24gbWFrZUNsaWVudE1ldGFkYXRhKG9wdGlvbnMpIHtcbiAgICBjb25zdCBtZXRhZGF0YURvY3VtZW50ID0gbmV3IExpbWl0ZWRTaXplRG9jdW1lbnQoNTEyKTtcbiAgICBjb25zdCB7IGFwcE5hbWUgPSAnJyB9ID0gb3B0aW9ucztcbiAgICAvLyBBZGQgYXBwIG5hbWUgZmlyc3QsIGl0IG11c3QgYmUgc2VudFxuICAgIGlmIChhcHBOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGFwcE5hbWUsICd1dGY4JykgPD0gMTI4XG4gICAgICAgICAgICA/IG9wdGlvbnMuYXBwTmFtZVxuICAgICAgICAgICAgOiBCdWZmZXIuZnJvbShhcHBOYW1lLCAndXRmOCcpLnN1YmFycmF5KDAsIDEyOCkudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgbWV0YWRhdGFEb2N1bWVudC5pZkl0Rml0c0l0U2l0cygnYXBwbGljYXRpb24nLCB7IG5hbWUgfSk7XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSA9ICcnLCB2ZXJzaW9uID0gJycsIHBsYXRmb3JtID0gJycgfSA9IG9wdGlvbnMuZHJpdmVySW5mbztcbiAgICBjb25zdCBkcml2ZXJJbmZvID0ge1xuICAgICAgICBuYW1lOiBuYW1lLmxlbmd0aCA+IDAgPyBgbm9kZWpzfCR7bmFtZX1gIDogJ25vZGVqcycsXG4gICAgICAgIHZlcnNpb246IHZlcnNpb24ubGVuZ3RoID4gMCA/IGAke05PREVfRFJJVkVSX1ZFUlNJT059fCR7dmVyc2lvbn1gIDogTk9ERV9EUklWRVJfVkVSU0lPTlxuICAgIH07XG4gICAgaWYgKCFtZXRhZGF0YURvY3VtZW50LmlmSXRGaXRzSXRTaXRzKCdkcml2ZXInLCBkcml2ZXJJbmZvKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdVbmFibGUgdG8gaW5jbHVkZSBkcml2ZXJJbmZvIG5hbWUgYW5kIHZlcnNpb24sIG1ldGFkYXRhIGNhbm5vdCBleGNlZWQgNTEyIGJ5dGVzJyk7XG4gICAgfVxuICAgIGxldCBydW50aW1lSW5mbyA9IGdldFJ1bnRpbWVJbmZvKCk7XG4gICAgaWYgKHBsYXRmb3JtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcnVudGltZUluZm8gPSBgJHtydW50aW1lSW5mb318JHtwbGF0Zm9ybX1gO1xuICAgIH1cbiAgICBpZiAoIW1ldGFkYXRhRG9jdW1lbnQuaWZJdEZpdHNJdFNpdHMoJ3BsYXRmb3JtJywgcnVudGltZUluZm8pKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1VuYWJsZSB0byBpbmNsdWRlIGRyaXZlckluZm8gcGxhdGZvcm0sIG1ldGFkYXRhIGNhbm5vdCBleGNlZWQgNTEyIGJ5dGVzJyk7XG4gICAgfVxuICAgIC8vIE5vdGU6IG9yZGVyIG1hdHRlcnMsIG9zLnR5cGUgaXMgbGFzdCBzbyBpdCB3aWxsIGJlIHJlbW92ZWQgbGFzdCBpZiB3ZSdyZSBhdCBtYXhTaXplXG4gICAgY29uc3Qgb3NJbmZvID0gbmV3IE1hcCgpXG4gICAgICAgIC5zZXQoJ25hbWUnLCBwcm9jZXNzLnBsYXRmb3JtKVxuICAgICAgICAuc2V0KCdhcmNoaXRlY3R1cmUnLCBwcm9jZXNzLmFyY2gpXG4gICAgICAgIC5zZXQoJ3ZlcnNpb24nLCBvcy5yZWxlYXNlKCkpXG4gICAgICAgIC5zZXQoJ3R5cGUnLCBvcy50eXBlKCkpO1xuICAgIGlmICghbWV0YWRhdGFEb2N1bWVudC5pZkl0Rml0c0l0U2l0cygnb3MnLCBvc0luZm8pKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIG9zSW5mby5rZXlzKCkpIHtcbiAgICAgICAgICAgIG9zSW5mby5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChvc0luZm8uc2l6ZSA9PT0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YURvY3VtZW50LmlmSXRGaXRzSXRTaXRzKCdvcycsIG9zSW5mbykpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZmFhc0VudiA9IGdldEZBQVNFbnYoKTtcbiAgICBpZiAoZmFhc0VudiAhPSBudWxsKSB7XG4gICAgICAgIGlmICghbWV0YWRhdGFEb2N1bWVudC5pZkl0Rml0c0l0U2l0cygnZW52JywgZmFhc0VudikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGZhYXNFbnYua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgZmFhc0Vudi5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoZmFhc0Vudi5zaXplID09PSAwKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGFEb2N1bWVudC5pZkl0Rml0c0l0U2l0cygnZW52JywgZmFhc0VudikpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXRhZGF0YURvY3VtZW50LnRvT2JqZWN0KCk7XG59XG5sZXQgZG9ja2VyUHJvbWlzZTtcbi8qKiBAaW50ZXJuYWwgKi9cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRhaW5lck1ldGFkYXRhKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lck1ldGFkYXRhID0ge307XG4gICAgZG9ja2VyUHJvbWlzZSA/Pz0gKDAsIHV0aWxzXzEuZmlsZUlzQWNjZXNzaWJsZSkoJy8uZG9ja2VyZW52Jyk7XG4gICAgY29uc3QgaXNEb2NrZXIgPSBhd2FpdCBkb2NrZXJQcm9taXNlO1xuICAgIGNvbnN0IHsgS1VCRVJORVRFU19TRVJWSUNFX0hPU1QgPSAnJyB9ID0gcHJvY2Vzcy5lbnY7XG4gICAgY29uc3QgaXNLdWJlcm5ldGVzID0gS1VCRVJORVRFU19TRVJWSUNFX0hPU1QubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICBpZiAoaXNEb2NrZXIpXG4gICAgICAgIGNvbnRhaW5lck1ldGFkYXRhLnJ1bnRpbWUgPSAnZG9ja2VyJztcbiAgICBpZiAoaXNLdWJlcm5ldGVzKVxuICAgICAgICBjb250YWluZXJNZXRhZGF0YS5vcmNoZXN0cmF0b3IgPSAna3ViZXJuZXRlcyc7XG4gICAgcmV0dXJuIGNvbnRhaW5lck1ldGFkYXRhO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFJlLWFkZCBlYWNoIG1ldGFkYXRhIHZhbHVlLlxuICogQXR0ZW1wdCB0byBhZGQgbmV3IGVudiBjb250YWluZXIgbWV0YWRhdGEsIGJ1dCBrZWVwIG9sZCBkYXRhIGlmIGl0IGRvZXMgbm90IGZpdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gYWRkQ29udGFpbmVyTWV0YWRhdGEob3JpZ2luYWxNZXRhZGF0YSkge1xuICAgIGNvbnN0IGNvbnRhaW5lck1ldGFkYXRhID0gYXdhaXQgZ2V0Q29udGFpbmVyTWV0YWRhdGEoKTtcbiAgICBpZiAoT2JqZWN0LmtleXMoY29udGFpbmVyTWV0YWRhdGEpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0YWRhdGE7XG4gICAgY29uc3QgZXh0ZW5kZWRNZXRhZGF0YSA9IG5ldyBMaW1pdGVkU2l6ZURvY3VtZW50KDUxMik7XG4gICAgY29uc3QgZXh0ZW5kZWRFbnZNZXRhZGF0YSA9IHsgLi4ub3JpZ2luYWxNZXRhZGF0YT8uZW52LCBjb250YWluZXI6IGNvbnRhaW5lck1ldGFkYXRhIH07XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKG9yaWdpbmFsTWV0YWRhdGEpKSB7XG4gICAgICAgIGlmIChrZXkgIT09ICdlbnYnKSB7XG4gICAgICAgICAgICBleHRlbmRlZE1ldGFkYXRhLmlmSXRGaXRzSXRTaXRzKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZXh0ZW5kZWRNZXRhZGF0YS5pZkl0Rml0c0l0U2l0cygnZW52JywgZXh0ZW5kZWRFbnZNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgaW4gb2xkIGRhdGEgaWYgbmV3ZXIgLyBleHRlbmRlZCBtZXRhZGF0YSBkb2VzIG5vdCBmaXRcbiAgICAgICAgICAgICAgICBleHRlbmRlZE1ldGFkYXRhLmlmSXRGaXRzSXRTaXRzKCdlbnYnLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghKCdlbnYnIGluIG9yaWdpbmFsTWV0YWRhdGEpKSB7XG4gICAgICAgIGV4dGVuZGVkTWV0YWRhdGEuaWZJdEZpdHNJdFNpdHMoJ2VudicsIGV4dGVuZGVkRW52TWV0YWRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5kZWRNZXRhZGF0YS50b09iamVjdCgpO1xufVxuLyoqXG4gKiBDb2xsZWN0cyBGYWFTIG1ldGFkYXRhLlxuICogLSBgbmFtZWAgTVVTVCBiZSB0aGUgbGFzdCBrZXkgaW4gdGhlIE1hcCByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0RkFBU0VudigpIHtcbiAgICBjb25zdCB7IEFXU19FWEVDVVRJT05fRU5WID0gJycsIEFXU19MQU1CREFfUlVOVElNRV9BUEkgPSAnJywgRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FID0gJycsIEtfU0VSVklDRSA9ICcnLCBGVU5DVElPTl9OQU1FID0gJycsIFZFUkNFTCA9ICcnLCBBV1NfTEFNQkRBX0ZVTkNUSU9OX01FTU9SWV9TSVpFID0gJycsIEFXU19SRUdJT04gPSAnJywgRlVOQ1RJT05fTUVNT1JZX01CID0gJycsIEZVTkNUSU9OX1JFR0lPTiA9ICcnLCBGVU5DVElPTl9USU1FT1VUX1NFQyA9ICcnLCBWRVJDRUxfUkVHSU9OID0gJycgfSA9IHByb2Nlc3MuZW52O1xuICAgIGNvbnN0IGlzQVdTRmFhUyA9IEFXU19FWEVDVVRJT05fRU5WLnN0YXJ0c1dpdGgoJ0FXU19MYW1iZGFfJykgfHwgQVdTX0xBTUJEQV9SVU5USU1FX0FQSS5sZW5ndGggPiAwO1xuICAgIGNvbnN0IGlzQXp1cmVGYWFTID0gRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgaXNHQ1BGYWFTID0gS19TRVJWSUNFLmxlbmd0aCA+IDAgfHwgRlVOQ1RJT05fTkFNRS5sZW5ndGggPiAwO1xuICAgIGNvbnN0IGlzVmVyY2VsRmFhUyA9IFZFUkNFTC5sZW5ndGggPiAwO1xuICAgIC8vIE5vdGU6IG9yZGVyIG1hdHRlcnMsIG5hbWUgbXVzdCBhbHdheXMgYmUgdGhlIGxhc3Qga2V5XG4gICAgY29uc3QgZmFhc0VudiA9IG5ldyBNYXAoKTtcbiAgICAvLyBXaGVuIGlzVmVyY2VsRmFhUyBpcyB0cnVlIHNvIGlzIGlzQVdTRmFhUzsgVmVyY2VsIGluaGVyaXRzIHRoZSBBV1MgZW52XG4gICAgaWYgKGlzVmVyY2VsRmFhUyAmJiAhKGlzQXp1cmVGYWFTIHx8IGlzR0NQRmFhUykpIHtcbiAgICAgICAgaWYgKFZFUkNFTF9SRUdJT04ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZmFhc0Vudi5zZXQoJ3JlZ2lvbicsIFZFUkNFTF9SRUdJT04pO1xuICAgICAgICB9XG4gICAgICAgIGZhYXNFbnYuc2V0KCduYW1lJywgJ3ZlcmNlbCcpO1xuICAgICAgICByZXR1cm4gZmFhc0VudjtcbiAgICB9XG4gICAgaWYgKGlzQVdTRmFhUyAmJiAhKGlzQXp1cmVGYWFTIHx8IGlzR0NQRmFhUyB8fCBpc1ZlcmNlbEZhYVMpKSB7XG4gICAgICAgIGlmIChBV1NfUkVHSU9OLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZhYXNFbnYuc2V0KCdyZWdpb24nLCBBV1NfUkVHSU9OKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQVdTX0xBTUJEQV9GVU5DVElPTl9NRU1PUllfU0laRS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBOdW1iZXIuaXNJbnRlZ2VyKCtBV1NfTEFNQkRBX0ZVTkNUSU9OX01FTU9SWV9TSVpFKSkge1xuICAgICAgICAgICAgZmFhc0Vudi5zZXQoJ21lbW9yeV9tYicsIG5ldyBic29uXzEuSW50MzIoQVdTX0xBTUJEQV9GVU5DVElPTl9NRU1PUllfU0laRSkpO1xuICAgICAgICB9XG4gICAgICAgIGZhYXNFbnYuc2V0KCduYW1lJywgJ2F3cy5sYW1iZGEnKTtcbiAgICAgICAgcmV0dXJuIGZhYXNFbnY7XG4gICAgfVxuICAgIGlmIChpc0F6dXJlRmFhUyAmJiAhKGlzR0NQRmFhUyB8fCBpc0FXU0ZhYVMgfHwgaXNWZXJjZWxGYWFTKSkge1xuICAgICAgICBmYWFzRW52LnNldCgnbmFtZScsICdhenVyZS5mdW5jJyk7XG4gICAgICAgIHJldHVybiBmYWFzRW52O1xuICAgIH1cbiAgICBpZiAoaXNHQ1BGYWFTICYmICEoaXNBenVyZUZhYVMgfHwgaXNBV1NGYWFTIHx8IGlzVmVyY2VsRmFhUykpIHtcbiAgICAgICAgaWYgKEZVTkNUSU9OX1JFR0lPTi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmYWFzRW52LnNldCgncmVnaW9uJywgRlVOQ1RJT05fUkVHSU9OKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoRlVOQ1RJT05fTUVNT1JZX01CLmxlbmd0aCA+IDAgJiYgTnVtYmVyLmlzSW50ZWdlcigrRlVOQ1RJT05fTUVNT1JZX01CKSkge1xuICAgICAgICAgICAgZmFhc0Vudi5zZXQoJ21lbW9yeV9tYicsIG5ldyBic29uXzEuSW50MzIoRlVOQ1RJT05fTUVNT1JZX01CKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEZVTkNUSU9OX1RJTUVPVVRfU0VDLmxlbmd0aCA+IDAgJiYgTnVtYmVyLmlzSW50ZWdlcigrRlVOQ1RJT05fVElNRU9VVF9TRUMpKSB7XG4gICAgICAgICAgICBmYWFzRW52LnNldCgndGltZW91dF9zZWMnLCBuZXcgYnNvbl8xLkludDMyKEZVTkNUSU9OX1RJTUVPVVRfU0VDKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmFhc0Vudi5zZXQoJ25hbWUnLCAnZ2NwLmZ1bmMnKTtcbiAgICAgICAgcmV0dXJuIGZhYXNFbnY7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEdldCBjdXJyZW50IEphdmFTY3JpcHQgcnVudGltZSBwbGF0Zm9ybVxuICpcbiAqIE5PVEU6IFRoZSB2ZXJzaW9uIGluZm9ybWF0aW9uIGZldGNoaW5nIGlzIGludGVudGlvbmFsbHkgd3JpdHRlbiBkZWZlbnNpdmVseVxuICogdG8gYXZvaWQgaGF2aW5nIGEgcmVsZWFzZWQgZHJpdmVyIHZlcnNpb24gdGhhdCBiZWNvbWVzIGluY29tcGF0aWJsZVxuICogd2l0aCBhIGZ1dHVyZSBjaGFuZ2UgdG8gdGhlc2UgZ2xvYmFsIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGdldFJ1bnRpbWVJbmZvKCkge1xuICAgIGlmICgnRGVubycgaW4gZ2xvYmFsVGhpcykge1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdHlwZW9mIERlbm8/LnZlcnNpb24/LmRlbm8gPT09ICdzdHJpbmcnID8gRGVubz8udmVyc2lvbj8uZGVubyA6ICcwLjAuMC11bmtub3duJztcbiAgICAgICAgcmV0dXJuIGBEZW5vIHYke3ZlcnNpb259LCAke29zLmVuZGlhbm5lc3MoKX1gO1xuICAgIH1cbiAgICBpZiAoJ0J1bicgaW4gZ2xvYmFsVGhpcykge1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdHlwZW9mIEJ1bj8udmVyc2lvbiA9PT0gJ3N0cmluZycgPyBCdW4/LnZlcnNpb24gOiAnMC4wLjAtdW5rbm93bic7XG4gICAgICAgIHJldHVybiBgQnVuIHYke3ZlcnNpb259LCAke29zLmVuZGlhbm5lc3MoKX1gO1xuICAgIH1cbiAgICByZXR1cm4gYE5vZGUuanMgJHtwcm9jZXNzLnZlcnNpb259LCAke29zLmVuZGlhbm5lc3MoKX1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50X21ldGFkYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/metrics.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/metrics.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFlBQVk7QUFDeEMsOENBQThDLHVCQUF1QjtBQUNyRSxtREFBbUQsb0JBQW9CO0FBQ3ZFLHVEQUF1RCxzQkFBc0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXG1ldHJpY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IHZvaWQgMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sTWV0cmljcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhIHNwZWNpZmljIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBtYXJrUGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbm1hcmsgYSBjb25uZWN0aW9uIGFzIHBpbm5lZCBmb3IgYW4gb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtVbnBpbm5lZChwaW5UeXBlKSB7XG4gICAgICAgIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOKSB7XG4gICAgICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUikge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbWFwIG1ldHJpY3MgYXMgYSBzdHJpbmcuXG4gICAgICovXG4gICAgaW5mbyhtYXhQb29sU2l6ZSkge1xuICAgICAgICByZXR1cm4gKCdUaW1lZCBvdXQgd2hpbGUgY2hlY2tpbmcgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNvbm5lY3Rpb24gcG9vbDogJyArXG4gICAgICAgICAgICBgbWF4UG9vbFNpemU6ICR7bWF4UG9vbFNpemV9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgY3Vyc29yczogJHt0aGlzLmN1cnNvckNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IHRyYW5zYWN0aW9uczogJHt0aGlzLnR4bkNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IG90aGVyIG9wZXJhdGlvbnM6ICR7dGhpcy5vdGhlckNvbm5lY3Rpb25zfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgbWV0cmljcyB0byB0aGUgaW5pdGlhbCB2YWx1ZXMuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IENvbm5lY3Rpb25Qb29sTWV0cmljcztcbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4gPSAndHhuJztcbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5DVVJTT1IgPSAnY3Vyc29yJztcbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5PVEhFUiA9ICdvdGhlcic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/stream_description.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/stream_description.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3N0cmVhbV9kZXNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZUFBZSxtQkFBTyxDQUFDLCtGQUFTO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLDZHQUFnQjtBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyxxSUFBNEI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcY21hcFxcc3RyZWFtX2Rlc2NyaXB0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9jb21tb25cIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IFJFU1BPTlNFX0ZJRUxEUyA9IFtcbiAgICAnbWluV2lyZVZlcnNpb24nLFxuICAgICdtYXhXaXJlVmVyc2lvbicsXG4gICAgJ21heEJzb25PYmplY3RTaXplJyxcbiAgICAnbWF4TWVzc2FnZVNpemVCeXRlcycsXG4gICAgJ21heFdyaXRlQmF0Y2hTaXplJyxcbiAgICAnbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcydcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5oZWxsbyA9IG51bGw7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMudHlwZSA9IGNvbW1vbl8xLlNlcnZlclR5cGUuVW5rbm93bjtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhCc29uT2JqZWN0U2l6ZSA9IDE2Nzc3MjE2O1xuICAgICAgICB0aGlzLm1heE1lc3NhZ2VTaXplQnl0ZXMgPSA0ODAwMDAwMDtcbiAgICAgICAgdGhpcy5tYXhXcml0ZUJhdGNoU2l6ZSA9IDEwMDAwMDtcbiAgICAgICAgdGhpcy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzID0gb3B0aW9ucz8ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZWQgPSAhIW9wdGlvbnM/LmxvYWRCYWxhbmNlZDtcbiAgICAgICAgdGhpcy5jb21wcmVzc29ycyA9XG4gICAgICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMuY29tcHJlc3NvcnMgJiYgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbXByZXNzb3JzKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5jb21wcmVzc29yc1xuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gbnVsbDtcbiAgICB9XG4gICAgcmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWxsbyA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnR5cGUgPSAoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEucGFyc2VTZXJ2ZXJUeXBlKShyZXNwb25zZSk7XG4gICAgICAgIGlmICgnY29ubmVjdGlvbklkJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSB0aGlzLnBhcnNlU2VydmVyQ29ubmVjdGlvbklEKHJlc3BvbnNlLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBSRVNQT05TRV9GSUVMRFMpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVtmaWVsZF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbZmllbGRdID0gcmVzcG9uc2VbZmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdGluZyBjYXNlXG4gICAgICAgICAgICBpZiAoJ19fbm9kZWpzX21vY2tfc2VydmVyX18nIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX25vZGVqc19tb2NrX3NlcnZlcl9fID0gcmVzcG9uc2VbJ19fbm9kZWpzX21vY2tfc2VydmVyX18nXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2UuY29tcHJlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHJlc3NvciA9IHRoaXMuY29tcHJlc3NvcnMuZmlsdGVyKGMgPT4gcmVzcG9uc2UuY29tcHJlc3Npb24/LmluY2x1ZGVzKGMpKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICBwYXJzZVNlcnZlckNvbm5lY3Rpb25JRChzZXJ2ZXJDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgLy8gQ29ubmVjdGlvbiBpZHMgYXJlIGFsd2F5cyBpbnRlZ3JhbCwgc28gaXQncyBzYWZlIHRvIGNvZXJjZSBkb3VibGVzIGFzIHdlbGwgYXNcbiAgICAgICAgLy8gYW55IGludGVncmFsIHR5cGUuXG4gICAgICAgIHJldHVybiBic29uXzEuTG9uZy5pc0xvbmcoc2VydmVyQ29ubmVjdGlvbklkKVxuICAgICAgICAgICAgPyBzZXJ2ZXJDb25uZWN0aW9uSWQudG9CaWdJbnQoKVxuICAgICAgICAgICAgOiAvLyBAdHMtZXhwZWN0LWVycm9yOiBEb3VibGVzIGFyZSBjb2VyY2libGUgdG8gbnVtYmVyXG4gICAgICAgICAgICAgICAgQmlnSW50KHNlcnZlckNvbm5lY3Rpb25JZCk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IFN0cmVhbURlc2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtX2Rlc2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uncompressibleCommands = exports.Compressor = void 0;\nexports.compress = compress;\nexports.decompress = decompress;\nexports.compressCommand = compressCommand;\nexports.decompressResponse = decompressResponse;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return await Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return await zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return await Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return await zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\n//# sourceMappingURL=compression.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '4.0';\nexports.MAX_SUPPORTED_SERVER_VERSION = '8.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 7;\nexports.MAX_SUPPORTED_WIRE_VERSION = 25;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyx1Q0FBdUMsR0FBRyxxQ0FBcUMsR0FBRyxrQ0FBa0MsR0FBRyxrQ0FBa0MsR0FBRyxvQ0FBb0MsR0FBRyxvQ0FBb0M7QUFDbFgsb0NBQW9DO0FBQ3BDLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFDdkMsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsY0FBYztBQUNkIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFx3aXJlX3Byb3RvY29sXFxjb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9QX01TRyA9IGV4cG9ydHMuT1BfQ09NUFJFU1NFRCA9IGV4cG9ydHMuT1BfREVMRVRFID0gZXhwb3J0cy5PUF9RVUVSWSA9IGV4cG9ydHMuT1BfSU5TRVJUID0gZXhwb3J0cy5PUF9VUERBVEUgPSBleHBvcnRzLk9QX1JFUExZID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gJzQuMCc7XG5leHBvcnRzLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSAnOC4wJztcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSA3O1xuZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IDI1O1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1dJUkVfVkVSU0lPTiA9IDIxO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OID0gJzcuMCc7XG5leHBvcnRzLk9QX1JFUExZID0gMTtcbmV4cG9ydHMuT1BfVVBEQVRFID0gMjAwMTtcbmV4cG9ydHMuT1BfSU5TRVJUID0gMjAwMjtcbmV4cG9ydHMuT1BfUVVFUlkgPSAyMDA0O1xuZXhwb3J0cy5PUF9ERUxFVEUgPSAyMDA2O1xuZXhwb3J0cy5PUF9DT01QUkVTU0VEID0gMjAxMjtcbmV4cG9ydHMuT1BfTVNHID0gMjAxMztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onData = onData;\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event.\n */\nfunction onData(emitter, { timeoutContext, signal }) {\n    signal?.throwIfAborted();\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */\n    const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */\n    const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */\n    let error = null;\n    /** Set to true only after event listeners have been removed. */\n    let finished = false;\n    const iterator = {\n        next() {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({ value, done: false });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished)\n                return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({ resolve, reject });\n            return promise;\n        },\n        return() {\n            return closeHandler();\n        },\n        throw(err) {\n            errorHandler(err);\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        }\n    };\n    // Adding event handlers\n    emitter.on('data', eventHandler);\n    emitter.on('error', errorHandler);\n    const abortListener = (0, utils_1.addAbortListener)(signal, function () {\n        errorHandler(this.reason);\n    });\n    const timeoutForSocketRead = timeoutContext?.timeoutForSocketRead;\n    timeoutForSocketRead?.throwIfExpired();\n    timeoutForSocketRead?.then(undefined, errorHandler);\n    return iterator;\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.resolve({ value, done: false });\n        else\n            unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.reject(err);\n        else\n            error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off('data', eventHandler);\n        emitter.off('error', errorHandler);\n        abortListener?.[utils_1.kDispose]();\n        finished = true;\n        timeoutForSocketRead?.clear();\n        const doneResult = { value: undefined, done: finished };\n        for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\n//# sourceMappingURL=on_data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvb25fZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsb0JBQW9CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkJBQTJCO0FBQy9DLHNDQUFzQyxpQkFBaUI7QUFDdkQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUNBQXFDLDhCQUE4QjtBQUNuRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXHdpcmVfcHJvdG9jb2xcXG9uX2RhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uRGF0YSA9IG9uRGF0YTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG4vKipcbiAqIG9uRGF0YSBpcyBhZGFwdGVkIGZyb20gTm9kZS5qcycgZXZlbnRzLm9uIGhlbHBlclxuICogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNvbmVtaXR0ZXItZXZlbnRuYW1lLW9wdGlvbnNcbiAqXG4gKiBSZXR1cm5zIGFuIEFzeW5jSXRlcmF0b3IgdGhhdCBpdGVyYXRlcyBlYWNoICdkYXRhJyBldmVudCBlbWl0dGVkIGZyb20gZW1pdHRlci5cbiAqIEl0IHdpbGwgcmVqZWN0IHVwb24gYW4gZXJyb3IgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIG9uRGF0YShlbWl0dGVyLCB7IHRpbWVvdXRDb250ZXh0LCBzaWduYWwgfSkge1xuICAgIHNpZ25hbD8udGhyb3dJZkFib3J0ZWQoKTtcbiAgICAvLyBTZXR1cCBwZW5kaW5nIGV2ZW50cyBhbmQgcGVuZGluZyBwcm9taXNlIGxpc3RzXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY2FsbGVyIGhhcyBub3QgeWV0IGNhbGxlZCAubmV4dCgpLCB3ZSBzdG9yZSB0aGVcbiAgICAgKiB2YWx1ZSBmcm9tIHRoZSBldmVudCBpbiB0aGlzIGxpc3QuIE5leHQgdGltZSB0aGV5IGNhbGwgLm5leHQoKVxuICAgICAqIHdlIHB1bGwgdGhlIGZpcnN0IHZhbHVlIG91dCBvZiB0aGlzIGxpc3QgYW5kIHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXQuXG4gICAgICovXG4gICAgY29uc3QgdW5jb25zdW1lZEV2ZW50cyA9IG5ldyB1dGlsc18xLkxpc3QoKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZXJlIGhhcyBub3QgeWV0IGJlZW4gYW4gZXZlbnQsIGEgbmV3IHByb21pc2Ugd2lsbCBiZSBjcmVhdGVkXG4gICAgICogYW5kIGltcGxpY2l0bHkgc3RvcmVkIGluIHRoaXMgbGlzdC4gV2hlbiBhbiBldmVudCBvY2N1cnMgd2UgdGFrZSB0aGUgZmlyc3RcbiAgICAgKiBwcm9taXNlIGluIHRoaXMgbGlzdCBhbmQgcmVzb2x2ZSBpdC5cbiAgICAgKi9cbiAgICBjb25zdCB1bmNvbnN1bWVkUHJvbWlzZXMgPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgLyoqXG4gICAgICogU3RvcmVkIGFuIGVycm9yIGNyZWF0ZWQgYnkgYW4gZXJyb3IgZXZlbnQuXG4gICAgICogVGhpcyBlcnJvciB3aWxsIHR1cm4gaW50byBhIHJlamVjdGlvbiBmb3IgdGhlIHN1YnNlcXVlbnQgLm5leHQoKSBjYWxsXG4gICAgICovXG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAvKiogU2V0IHRvIHRydWUgb25seSBhZnRlciBldmVudCBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJlbW92ZWQuICovXG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgd2UgY29uc3VtZSBhbGwgdW5yZWFkIGV2ZW50c1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB1bmNvbnN1bWVkRXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGVuIHdlIGVycm9yLCBpZiBhbiBlcnJvciBoYXBwZW5lZFxuICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIG9uZSB0aW1lIGlmIGF0IGFsbCwgYmVjYXVzZSBhZnRlciAnZXJyb3InXG4gICAgICAgICAgICAvLyB3ZSBzdG9wIGxpc3RlbmluZ1xuICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZXJyb3JzXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCByZXNvbHZlIHRvIGRvbmVcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VIYW5kbGVyKCk7XG4gICAgICAgICAgICAvLyBXYWl0IHVudGlsIGFuIGV2ZW50IGhhcHBlbnNcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH0gPSAoMCwgdXRpbHNfMS5wcm9taXNlV2l0aFJlc29sdmVycykoKTtcbiAgICAgICAgICAgIHVuY29uc3VtZWRQcm9taXNlcy5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHJldHVybigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZUhhbmRsZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyb3coZXJyKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZGluZyBldmVudCBoYW5kbGVyc1xuICAgIGVtaXR0ZXIub24oJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgIGVtaXR0ZXIub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICBjb25zdCBhYm9ydExpc3RlbmVyID0gKDAsIHV0aWxzXzEuYWRkQWJvcnRMaXN0ZW5lcikoc2lnbmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVycm9ySGFuZGxlcih0aGlzLnJlYXNvbik7XG4gICAgfSk7XG4gICAgY29uc3QgdGltZW91dEZvclNvY2tldFJlYWQgPSB0aW1lb3V0Q29udGV4dD8udGltZW91dEZvclNvY2tldFJlYWQ7XG4gICAgdGltZW91dEZvclNvY2tldFJlYWQ/LnRocm93SWZFeHBpcmVkKCk7XG4gICAgdGltZW91dEZvclNvY2tldFJlYWQ/LnRoZW4odW5kZWZpbmVkLCBlcnJvckhhbmRsZXIpO1xuICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICBmdW5jdGlvbiBldmVudEhhbmRsZXIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHVuY29uc3VtZWRQcm9taXNlcy5zaGlmdCgpO1xuICAgICAgICBpZiAocHJvbWlzZSAhPSBudWxsKVxuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHsgdmFsdWUsIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB1bmNvbnN1bWVkRXZlbnRzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB1bmNvbnN1bWVkUHJvbWlzZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKHByb21pc2UgIT0gbnVsbClcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICB2b2lkIGNsb3NlSGFuZGxlcigpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZUhhbmRsZXIoKSB7XG4gICAgICAgIC8vIEFkZGluZyBldmVudCBoYW5kbGVyc1xuICAgICAgICBlbWl0dGVyLm9mZignZGF0YScsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIGVtaXR0ZXIub2ZmKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICAgIGFib3J0TGlzdGVuZXI/Llt1dGlsc18xLmtEaXNwb3NlXSgpO1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHRpbWVvdXRGb3JTb2NrZXRSZWFkPy5jbGVhcigpO1xuICAgICAgICBjb25zdCBkb25lUmVzdWx0ID0geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiBmaW5pc2hlZCB9O1xuICAgICAgICBmb3IgKGNvbnN0IHByb21pc2Ugb2YgdW5jb25zdW1lZFByb21pc2VzKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoZG9uZVJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkb25lUmVzdWx0KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbl9kYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnDemandDocument = void 0;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\n/** @internal */\nclass OnDemandDocument {\n    constructor(\n    /** BSON bytes, this document begins at offset */\n    bson, \n    /** The start of the document */\n    offset = 0, \n    /** If this is an embedded document, indicates if this was a BSON array */\n    isArray = false, \n    /** If elements was already calculated */\n    elements) {\n        this.bson = bson;\n        this.offset = offset;\n        this.isArray = isArray;\n        /**\n         * Maps JS strings to elements and jsValues for speeding up subsequent lookups.\n         * - If `false` then name does not exist in the BSON document\n         * - If `CachedBSONElement` instance name exists\n         * - If `cache[name].value == null` jsValue has not yet been parsed\n         *   - Null/Undefined values do not get cached because they are zero-length values.\n         */\n        this.cache = Object.create(null);\n        /** Caches the index of elements that have been named */\n        this.indexFound = Object.create(null);\n        this.elements = elements ?? (0, bson_1.parseToElementsToArray)(this.bson, offset);\n    }\n    /** Only supports basic latin strings */\n    isElementName(name, element) {\n        const nameLength = element[2 /* BSONElementOffset.nameLength */];\n        const nameOffset = element[1 /* BSONElementOffset.nameOffset */];\n        if (name.length !== nameLength)\n            return false;\n        const nameEnd = nameOffset + nameLength;\n        for (let byteIndex = nameOffset, charIndex = 0; charIndex < name.length && byteIndex < nameEnd; charIndex++, byteIndex++) {\n            if (this.bson[byteIndex] !== name.charCodeAt(charIndex))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Seeks into the elements array for an element matching the given name.\n     *\n     * @remarks\n     * Caching:\n     * - Caches the existence of a property making subsequent look ups for non-existent properties return immediately\n     * - Caches names mapped to elements to avoid reiterating the array and comparing the name again\n     * - Caches the index at which an element has been found to prevent rechecking against elements already determined to belong to another name\n     *\n     * @param name - a basic latin string name of a BSON element\n     * @returns\n     */\n    getElement(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return null;\n        if (cachedElement != null) {\n            return cachedElement;\n        }\n        if (typeof name === 'number') {\n            if (this.isArray) {\n                if (name < this.elements.length) {\n                    const element = this.elements[name];\n                    const cachedElement = { element, value: undefined };\n                    this.cache[name] = cachedElement;\n                    this.indexFound[name] = true;\n                    return cachedElement;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            // skip this element if it has already been associated with a name\n            if (!(index in this.indexFound) && this.isElementName(name, element)) {\n                const cachedElement = { element, value: undefined };\n                this.cache[name] = cachedElement;\n                this.indexFound[index] = true;\n                return cachedElement;\n            }\n        }\n        this.cache[name] = false;\n        return null;\n    }\n    toJSValue(element, as) {\n        const type = element[0 /* BSONElementOffset.type */];\n        const offset = element[3 /* BSONElementOffset.offset */];\n        const length = element[4 /* BSONElementOffset.length */];\n        if (as !== type) {\n            return null;\n        }\n        switch (as) {\n            case bson_1.BSONType.null:\n            case bson_1.BSONType.undefined:\n                return null;\n            case bson_1.BSONType.double:\n                return (0, bson_1.getFloat64LE)(this.bson, offset);\n            case bson_1.BSONType.int:\n                return (0, bson_1.getInt32LE)(this.bson, offset);\n            case bson_1.BSONType.long:\n                return (0, bson_1.getBigInt64LE)(this.bson, offset);\n            case bson_1.BSONType.bool:\n                return Boolean(this.bson[offset]);\n            case bson_1.BSONType.objectId:\n                return new bson_1.ObjectId(this.bson.subarray(offset, offset + 12));\n            case bson_1.BSONType.timestamp:\n                return new bson_1.Timestamp((0, bson_1.getBigInt64LE)(this.bson, offset));\n            case bson_1.BSONType.string:\n                return (0, bson_1.toUTF8)(this.bson, offset + 4, offset + length - 1, false);\n            case bson_1.BSONType.binData: {\n                const totalBinarySize = (0, bson_1.getInt32LE)(this.bson, offset);\n                const subType = this.bson[offset + 4];\n                if (subType === 2) {\n                    const subType2BinarySize = (0, bson_1.getInt32LE)(this.bson, offset + 1 + 4);\n                    if (subType2BinarySize < 0)\n                        throw new bson_1.BSONError('Negative binary type element size found for subtype 0x02');\n                    if (subType2BinarySize > totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too long binary size');\n                    if (subType2BinarySize < totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too short binary size');\n                    return new bson_1.Binary(this.bson.subarray(offset + 1 + 4 + 4, offset + 1 + 4 + 4 + subType2BinarySize), 2);\n                }\n                return new bson_1.Binary(this.bson.subarray(offset + 1 + 4, offset + 1 + 4 + totalBinarySize), subType);\n            }\n            case bson_1.BSONType.date:\n                // Pretend this is correct.\n                return new Date(Number((0, bson_1.getBigInt64LE)(this.bson, offset)));\n            case bson_1.BSONType.object:\n                return new OnDemandDocument(this.bson, offset);\n            case bson_1.BSONType.array:\n                return new OnDemandDocument(this.bson, offset, true);\n            default:\n                throw new bson_1.BSONError(`Unsupported BSON type: ${as}`);\n        }\n    }\n    /**\n     * Returns the number of elements in this BSON document\n     */\n    size() {\n        return this.elements.length;\n    }\n    /**\n     * Checks for the existence of an element by name.\n     *\n     * @remarks\n     * Uses `getElement` with the expectation that will populate caches such that a `has` call\n     * followed by a `getElement` call will not repeat the cost paid by the first look up.\n     *\n     * @param name - element name\n     */\n    has(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return false;\n        if (cachedElement != null)\n            return true;\n        return this.getElement(name) != null;\n    }\n    get(name, as, required) {\n        const element = this.getElement(name);\n        if (element == null) {\n            if (required === true) {\n                throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n            }\n            else {\n                return null;\n            }\n        }\n        if (element.value == null) {\n            const value = this.toJSValue(element.element, as);\n            if (value == null) {\n                if (required === true) {\n                    throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n                }\n                else {\n                    return null;\n                }\n            }\n            // It is important to never store null\n            element.value = value;\n        }\n        return element.value;\n    }\n    getNumber(name, required) {\n        const maybeBool = this.get(name, bson_1.BSONType.bool);\n        const bool = maybeBool == null ? null : maybeBool ? 1 : 0;\n        const maybeLong = this.get(name, bson_1.BSONType.long);\n        const long = maybeLong == null ? null : Number(maybeLong);\n        const result = bool ?? long ?? this.get(name, bson_1.BSONType.int) ?? this.get(name, bson_1.BSONType.double);\n        if (required === true && result == null) {\n            throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n        }\n        return result;\n    }\n    /**\n     * Deserialize this object, DOES NOT cache result so avoid multiple invocations\n     * @param options - BSON deserialization options\n     */\n    toObject(options) {\n        return (0, bson_1.deserialize)(this.bson, {\n            ...options,\n            index: this.offset,\n            allowObjectSmallerThanBufferSize: true\n        });\n    }\n    /** Returns this document's bytes only */\n    toBytes() {\n        const size = (0, bson_1.getInt32LE)(this.bson, this.offset);\n        return this.bson.subarray(this.offset, this.offset + size);\n    }\n}\nexports.OnDemandDocument = OnDemandDocument;\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvb25fZGVtYW5kL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixlQUFlLG1CQUFPLENBQUMscUdBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGdEQUFnRDtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLEdBQUc7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxLQUFLO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxLQUFLO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGNtYXBcXHdpcmVfcHJvdG9jb2xcXG9uX2RlbWFuZFxcZG9jdW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9uRGVtYW5kRG9jdW1lbnQgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vYnNvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9uRGVtYW5kRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBCU09OIGJ5dGVzLCB0aGlzIGRvY3VtZW50IGJlZ2lucyBhdCBvZmZzZXQgKi9cbiAgICBic29uLCBcbiAgICAvKiogVGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudCAqL1xuICAgIG9mZnNldCA9IDAsIFxuICAgIC8qKiBJZiB0aGlzIGlzIGFuIGVtYmVkZGVkIGRvY3VtZW50LCBpbmRpY2F0ZXMgaWYgdGhpcyB3YXMgYSBCU09OIGFycmF5ICovXG4gICAgaXNBcnJheSA9IGZhbHNlLCBcbiAgICAvKiogSWYgZWxlbWVudHMgd2FzIGFscmVhZHkgY2FsY3VsYXRlZCAqL1xuICAgIGVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuYnNvbiA9IGJzb247XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBKUyBzdHJpbmdzIHRvIGVsZW1lbnRzIGFuZCBqc1ZhbHVlcyBmb3Igc3BlZWRpbmcgdXAgc3Vic2VxdWVudCBsb29rdXBzLlxuICAgICAgICAgKiAtIElmIGBmYWxzZWAgdGhlbiBuYW1lIGRvZXMgbm90IGV4aXN0IGluIHRoZSBCU09OIGRvY3VtZW50XG4gICAgICAgICAqIC0gSWYgYENhY2hlZEJTT05FbGVtZW50YCBpbnN0YW5jZSBuYW1lIGV4aXN0c1xuICAgICAgICAgKiAtIElmIGBjYWNoZVtuYW1lXS52YWx1ZSA9PSBudWxsYCBqc1ZhbHVlIGhhcyBub3QgeWV0IGJlZW4gcGFyc2VkXG4gICAgICAgICAqICAgLSBOdWxsL1VuZGVmaW5lZCB2YWx1ZXMgZG8gbm90IGdldCBjYWNoZWQgYmVjYXVzZSB0aGV5IGFyZSB6ZXJvLWxlbmd0aCB2YWx1ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgLyoqIENhY2hlcyB0aGUgaW5kZXggb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gbmFtZWQgKi9cbiAgICAgICAgdGhpcy5pbmRleEZvdW5kID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzID8/ICgwLCBic29uXzEucGFyc2VUb0VsZW1lbnRzVG9BcnJheSkodGhpcy5ic29uLCBvZmZzZXQpO1xuICAgIH1cbiAgICAvKiogT25seSBzdXBwb3J0cyBiYXNpYyBsYXRpbiBzdHJpbmdzICovXG4gICAgaXNFbGVtZW50TmFtZShuYW1lLCBlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG5hbWVMZW5ndGggPSBlbGVtZW50WzIgLyogQlNPTkVsZW1lbnRPZmZzZXQubmFtZUxlbmd0aCAqL107XG4gICAgICAgIGNvbnN0IG5hbWVPZmZzZXQgPSBlbGVtZW50WzEgLyogQlNPTkVsZW1lbnRPZmZzZXQubmFtZU9mZnNldCAqL107XG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCAhPT0gbmFtZUxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgbmFtZUVuZCA9IG5hbWVPZmZzZXQgKyBuYW1lTGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBieXRlSW5kZXggPSBuYW1lT2Zmc2V0LCBjaGFySW5kZXggPSAwOyBjaGFySW5kZXggPCBuYW1lLmxlbmd0aCAmJiBieXRlSW5kZXggPCBuYW1lRW5kOyBjaGFySW5kZXgrKywgYnl0ZUluZGV4KyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJzb25bYnl0ZUluZGV4XSAhPT0gbmFtZS5jaGFyQ29kZUF0KGNoYXJJbmRleCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWVrcyBpbnRvIHRoZSBlbGVtZW50cyBhcnJheSBmb3IgYW4gZWxlbWVudCBtYXRjaGluZyB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQ2FjaGluZzpcbiAgICAgKiAtIENhY2hlcyB0aGUgZXhpc3RlbmNlIG9mIGEgcHJvcGVydHkgbWFraW5nIHN1YnNlcXVlbnQgbG9vayB1cHMgZm9yIG5vbi1leGlzdGVudCBwcm9wZXJ0aWVzIHJldHVybiBpbW1lZGlhdGVseVxuICAgICAqIC0gQ2FjaGVzIG5hbWVzIG1hcHBlZCB0byBlbGVtZW50cyB0byBhdm9pZCByZWl0ZXJhdGluZyB0aGUgYXJyYXkgYW5kIGNvbXBhcmluZyB0aGUgbmFtZSBhZ2FpblxuICAgICAqIC0gQ2FjaGVzIHRoZSBpbmRleCBhdCB3aGljaCBhbiBlbGVtZW50IGhhcyBiZWVuIGZvdW5kIHRvIHByZXZlbnQgcmVjaGVja2luZyBhZ2FpbnN0IGVsZW1lbnRzIGFscmVhZHkgZGV0ZXJtaW5lZCB0byBiZWxvbmcgdG8gYW5vdGhlciBuYW1lXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIGEgYmFzaWMgbGF0aW4gc3RyaW5nIG5hbWUgb2YgYSBCU09OIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldEVsZW1lbnQobmFtZSkge1xuICAgICAgICBjb25zdCBjYWNoZWRFbGVtZW50ID0gdGhpcy5jYWNoZVtuYW1lXTtcbiAgICAgICAgaWYgKGNhY2hlZEVsZW1lbnQgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChjYWNoZWRFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA8IHRoaXMuZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWRFbGVtZW50ID0geyBlbGVtZW50LCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVbbmFtZV0gPSBjYWNoZWRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4Rm91bmRbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkRWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgLy8gc2tpcCB0aGlzIGVsZW1lbnQgaWYgaXQgaGFzIGFscmVhZHkgYmVlbiBhc3NvY2lhdGVkIHdpdGggYSBuYW1lXG4gICAgICAgICAgICBpZiAoIShpbmRleCBpbiB0aGlzLmluZGV4Rm91bmQpICYmIHRoaXMuaXNFbGVtZW50TmFtZShuYW1lLCBlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlZEVsZW1lbnQgPSB7IGVsZW1lbnQsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlW25hbWVdID0gY2FjaGVkRWxlbWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4Rm91bmRbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkRWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlW25hbWVdID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0b0pTVmFsdWUoZWxlbWVudCwgYXMpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGVsZW1lbnRbMCAvKiBCU09ORWxlbWVudE9mZnNldC50eXBlICovXTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZWxlbWVudFszIC8qIEJTT05FbGVtZW50T2Zmc2V0Lm9mZnNldCAqL107XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGVsZW1lbnRbNCAvKiBCU09ORWxlbWVudE9mZnNldC5sZW5ndGggKi9dO1xuICAgICAgICBpZiAoYXMgIT09IHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgICAgICAgIGNhc2UgYnNvbl8xLkJTT05UeXBlLm51bGw6XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS51bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS5kb3VibGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBic29uXzEuZ2V0RmxvYXQ2NExFKSh0aGlzLmJzb24sIG9mZnNldCk7XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS5pbnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBic29uXzEuZ2V0SW50MzJMRSkodGhpcy5ic29uLCBvZmZzZXQpO1xuICAgICAgICAgICAgY2FzZSBic29uXzEuQlNPTlR5cGUubG9uZzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGJzb25fMS5nZXRCaWdJbnQ2NExFKSh0aGlzLmJzb24sIG9mZnNldCk7XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS5ib29sOlxuICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuYnNvbltvZmZzZXRdKTtcbiAgICAgICAgICAgIGNhc2UgYnNvbl8xLkJTT05UeXBlLm9iamVjdElkOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYnNvbl8xLk9iamVjdElkKHRoaXMuYnNvbi5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDEyKSk7XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS50aW1lc3RhbXA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBic29uXzEuVGltZXN0YW1wKCgwLCBic29uXzEuZ2V0QmlnSW50NjRMRSkodGhpcy5ic29uLCBvZmZzZXQpKTtcbiAgICAgICAgICAgIGNhc2UgYnNvbl8xLkJTT05UeXBlLnN0cmluZzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGJzb25fMS50b1VURjgpKHRoaXMuYnNvbiwgb2Zmc2V0ICsgNCwgb2Zmc2V0ICsgbGVuZ3RoIC0gMSwgZmFsc2UpO1xuICAgICAgICAgICAgY2FzZSBic29uXzEuQlNPTlR5cGUuYmluRGF0YToge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsQmluYXJ5U2l6ZSA9ICgwLCBic29uXzEuZ2V0SW50MzJMRSkodGhpcy5ic29uLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YlR5cGUgPSB0aGlzLmJzb25bb2Zmc2V0ICsgNF07XG4gICAgICAgICAgICAgICAgaWYgKHN1YlR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViVHlwZTJCaW5hcnlTaXplID0gKDAsIGJzb25fMS5nZXRJbnQzMkxFKSh0aGlzLmJzb24sIG9mZnNldCArIDEgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YlR5cGUyQmluYXJ5U2l6ZSA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYnNvbl8xLkJTT05FcnJvcignTmVnYXRpdmUgYmluYXJ5IHR5cGUgZWxlbWVudCBzaXplIGZvdW5kIGZvciBzdWJ0eXBlIDB4MDInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YlR5cGUyQmluYXJ5U2l6ZSA+IHRvdGFsQmluYXJ5U2l6ZSAtIDQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYnNvbl8xLkJTT05FcnJvcignQmluYXJ5IHR5cGUgd2l0aCBzdWJ0eXBlIDB4MDIgY29udGFpbnMgdG9vIGxvbmcgYmluYXJ5IHNpemUnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YlR5cGUyQmluYXJ5U2l6ZSA8IHRvdGFsQmluYXJ5U2l6ZSAtIDQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYnNvbl8xLkJTT05FcnJvcignQmluYXJ5IHR5cGUgd2l0aCBzdWJ0eXBlIDB4MDIgY29udGFpbnMgdG9vIHNob3J0IGJpbmFyeSBzaXplJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYnNvbl8xLkJpbmFyeSh0aGlzLmJzb24uc3ViYXJyYXkob2Zmc2V0ICsgMSArIDQgKyA0LCBvZmZzZXQgKyAxICsgNCArIDQgKyBzdWJUeXBlMkJpbmFyeVNpemUpLCAyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBic29uXzEuQmluYXJ5KHRoaXMuYnNvbi5zdWJhcnJheShvZmZzZXQgKyAxICsgNCwgb2Zmc2V0ICsgMSArIDQgKyB0b3RhbEJpbmFyeVNpemUpLCBzdWJUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgYnNvbl8xLkJTT05UeXBlLmRhdGU6XG4gICAgICAgICAgICAgICAgLy8gUHJldGVuZCB0aGlzIGlzIGNvcnJlY3QuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKE51bWJlcigoMCwgYnNvbl8xLmdldEJpZ0ludDY0TEUpKHRoaXMuYnNvbiwgb2Zmc2V0KSkpO1xuICAgICAgICAgICAgY2FzZSBic29uXzEuQlNPTlR5cGUub2JqZWN0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT25EZW1hbmREb2N1bWVudCh0aGlzLmJzb24sIG9mZnNldCk7XG4gICAgICAgICAgICBjYXNlIGJzb25fMS5CU09OVHlwZS5hcnJheTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9uRGVtYW5kRG9jdW1lbnQodGhpcy5ic29uLCBvZmZzZXQsIHRydWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYnNvbl8xLkJTT05FcnJvcihgVW5zdXBwb3J0ZWQgQlNPTiB0eXBlOiAke2FzfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGlzIEJTT04gZG9jdW1lbnRcbiAgICAgKi9cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBlbGVtZW50IGJ5IG5hbWUuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFVzZXMgYGdldEVsZW1lbnRgIHdpdGggdGhlIGV4cGVjdGF0aW9uIHRoYXQgd2lsbCBwb3B1bGF0ZSBjYWNoZXMgc3VjaCB0aGF0IGEgYGhhc2AgY2FsbFxuICAgICAqIGZvbGxvd2VkIGJ5IGEgYGdldEVsZW1lbnRgIGNhbGwgd2lsbCBub3QgcmVwZWF0IHRoZSBjb3N0IHBhaWQgYnkgdGhlIGZpcnN0IGxvb2sgdXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIGVsZW1lbnQgbmFtZVxuICAgICAqL1xuICAgIGhhcyhuYW1lKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZEVsZW1lbnQgPSB0aGlzLmNhY2hlW25hbWVdO1xuICAgICAgICBpZiAoY2FjaGVkRWxlbWVudCA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChjYWNoZWRFbGVtZW50ICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudChuYW1lKSAhPSBudWxsO1xuICAgIH1cbiAgICBnZXQobmFtZSwgYXMsIHJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQobmFtZSk7XG4gICAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXF1aXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBic29uXzEuQlNPTkVycm9yKGBCU09OIGVsZW1lbnQgXCIke25hbWV9XCIgaXMgbWlzc2luZ2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnRvSlNWYWx1ZShlbGVtZW50LmVsZW1lbnQsIGFzKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBic29uXzEuQlNPTkVycm9yKGBCU09OIGVsZW1lbnQgXCIke25hbWV9XCIgaXMgbWlzc2luZ2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIG5ldmVyIHN0b3JlIG51bGxcbiAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZ2V0TnVtYmVyKG5hbWUsIHJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IG1heWJlQm9vbCA9IHRoaXMuZ2V0KG5hbWUsIGJzb25fMS5CU09OVHlwZS5ib29sKTtcbiAgICAgICAgY29uc3QgYm9vbCA9IG1heWJlQm9vbCA9PSBudWxsID8gbnVsbCA6IG1heWJlQm9vbCA/IDEgOiAwO1xuICAgICAgICBjb25zdCBtYXliZUxvbmcgPSB0aGlzLmdldChuYW1lLCBic29uXzEuQlNPTlR5cGUubG9uZyk7XG4gICAgICAgIGNvbnN0IGxvbmcgPSBtYXliZUxvbmcgPT0gbnVsbCA/IG51bGwgOiBOdW1iZXIobWF5YmVMb25nKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYm9vbCA/PyBsb25nID8/IHRoaXMuZ2V0KG5hbWUsIGJzb25fMS5CU09OVHlwZS5pbnQpID8/IHRoaXMuZ2V0KG5hbWUsIGJzb25fMS5CU09OVHlwZS5kb3VibGUpO1xuICAgICAgICBpZiAocmVxdWlyZWQgPT09IHRydWUgJiYgcmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBic29uXzEuQlNPTkVycm9yKGBCU09OIGVsZW1lbnQgXCIke25hbWV9XCIgaXMgbWlzc2luZ2ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIHRoaXMgb2JqZWN0LCBET0VTIE5PVCBjYWNoZSByZXN1bHQgc28gYXZvaWQgbXVsdGlwbGUgaW52b2NhdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEJTT04gZGVzZXJpYWxpemF0aW9uIG9wdGlvbnNcbiAgICAgKi9cbiAgICB0b09iamVjdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgYnNvbl8xLmRlc2VyaWFsaXplKSh0aGlzLmJzb24sIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBpbmRleDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBhbGxvd09iamVjdFNtYWxsZXJUaGFuQnVmZmVyU2l6ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhpcyBkb2N1bWVudCdzIGJ5dGVzIG9ubHkgKi9cbiAgICB0b0J5dGVzKCkge1xuICAgICAgICBjb25zdCBzaXplID0gKDAsIGJzb25fMS5nZXRJbnQzMkxFKSh0aGlzLmJzb24sIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnNvbi5zdWJhcnJheSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBzaXplKTtcbiAgICB9XG59XG5leHBvcnRzLk9uRGVtYW5kRG9jdW1lbnQgPSBPbkRlbWFuZERvY3VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteCursorResponse = exports.ExplainedCursorResponse = exports.CursorResponse = exports.MongoDBResponse = void 0;\nexports.isErrorResponse = isErrorResponse;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst document_1 = __webpack_require__(/*! ./on_demand/document */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js\");\n/**\n * Accepts a BSON payload and checks for na \"ok: 0\" element.\n * This utility is intended to prevent calling response class constructors\n * that expect the result to be a success and demand certain properties to exist.\n *\n * For example, a cursor response always expects a cursor embedded document.\n * In order to write the class such that the properties reflect that assertion (non-null)\n * we cannot invoke the subclass constructor if the BSON represents an error.\n *\n * @param bytes - BSON document returned from the server\n */\nfunction isErrorResponse(bson, elements) {\n    for (let eIdx = 0; eIdx < elements.length; eIdx++) {\n        const element = elements[eIdx];\n        if (element[2 /* BSONElementOffset.nameLength */] === 2) {\n            const nameOffset = element[1 /* BSONElementOffset.nameOffset */];\n            // 111 == \"o\", 107 == \"k\"\n            if (bson[nameOffset] === 111 && bson[nameOffset + 1] === 107) {\n                const valueOffset = element[3 /* BSONElementOffset.offset */];\n                const valueLength = element[4 /* BSONElementOffset.length */];\n                // If any byte in the length of the ok number (works for any type) is non zero,\n                // then it is considered \"ok: 1\"\n                for (let i = valueOffset; i < valueOffset + valueLength; i++) {\n                    if (bson[i] !== 0x00)\n                        return false;\n                }\n                return true;\n            }\n        }\n    }\n    return true;\n}\n/** @internal */\nclass MongoDBResponse extends document_1.OnDemandDocument {\n    get(name, as, required) {\n        try {\n            return super.get(name, as, required);\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    static is(value) {\n        return value instanceof MongoDBResponse;\n    }\n    static make(bson) {\n        const elements = (0, bson_1.parseToElementsToArray)(bson, 0);\n        const isError = isErrorResponse(bson, elements);\n        return isError\n            ? new MongoDBResponse(bson, 0, false, elements)\n            : new this(bson, 0, false, elements);\n    }\n    /**\n     * Returns true iff:\n     * - ok is 0 and the top-level code === 50\n     * - ok is 1 and the writeErrors array contains a code === 50\n     * - ok is 1 and the writeConcern object contains a code === 50\n     */\n    get isMaxTimeExpiredError() {\n        // {ok: 0, code: 50 ... }\n        const isTopLevel = this.ok === 0 && this.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n        if (isTopLevel)\n            return true;\n        if (this.ok === 0)\n            return false;\n        // {ok: 1, writeConcernError: {code: 50 ... }}\n        const isWriteConcern = this.get('writeConcernError', bson_1.BSONType.object)?.getNumber('code') ===\n            error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n        if (isWriteConcern)\n            return true;\n        const writeErrors = this.get('writeErrors', bson_1.BSONType.array);\n        if (writeErrors?.size()) {\n            for (let i = 0; i < writeErrors.size(); i++) {\n                const isWriteError = writeErrors.get(i, bson_1.BSONType.object)?.getNumber('code') ===\n                    error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n                // {ok: 1, writeErrors: [{code: 50 ... }]}\n                if (isWriteError)\n                    return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Drivers can safely assume that the `recoveryToken` field is always a BSON document but drivers MUST NOT modify the\n     * contents of the document.\n     */\n    get recoveryToken() {\n        return (this.get('recoveryToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    /**\n     * The server creates a cursor in response to a snapshot find/aggregate command and reports atClusterTime within the cursor field in the response.\n     * For the distinct command the server adds a top-level atClusterTime field to the response.\n     * The atClusterTime field represents the timestamp of the read and is guaranteed to be majority committed.\n     */\n    get atClusterTime() {\n        return (this.get('cursor', bson_1.BSONType.object)?.get('atClusterTime', bson_1.BSONType.timestamp) ??\n            this.get('atClusterTime', bson_1.BSONType.timestamp));\n    }\n    get operationTime() {\n        return this.get('operationTime', bson_1.BSONType.timestamp);\n    }\n    /** Normalizes whatever BSON value is \"ok\" to a JS number 1 or 0. */\n    get ok() {\n        return this.getNumber('ok') ? 1 : 0;\n    }\n    get $err() {\n        return this.get('$err', bson_1.BSONType.string);\n    }\n    get errmsg() {\n        return this.get('errmsg', bson_1.BSONType.string);\n    }\n    get code() {\n        return this.getNumber('code');\n    }\n    get $clusterTime() {\n        if (!('clusterTime' in this)) {\n            const clusterTimeDoc = this.get('$clusterTime', bson_1.BSONType.object);\n            if (clusterTimeDoc == null) {\n                this.clusterTime = null;\n                return null;\n            }\n            const clusterTime = clusterTimeDoc.get('clusterTime', bson_1.BSONType.timestamp, true);\n            const signature = clusterTimeDoc.get('signature', bson_1.BSONType.object)?.toObject();\n            // @ts-expect-error: `signature` is incorrectly typed. It is public API.\n            this.clusterTime = { clusterTime, signature };\n        }\n        return this.clusterTime ?? null;\n    }\n    toObject(options) {\n        const exactBSONOptions = {\n            ...(0, bson_1.pluckBSONSerializeOptions)(options ?? {}),\n            validation: (0, bson_1.parseUtf8ValidationOption)(options)\n        };\n        return super.toObject(exactBSONOptions);\n    }\n}\nexports.MongoDBResponse = MongoDBResponse;\n// {ok:1}\nMongoDBResponse.empty = new MongoDBResponse(new Uint8Array([13, 0, 0, 0, 16, 111, 107, 0, 1, 0, 0, 0, 0]));\n/** @internal */\nclass CursorResponse extends MongoDBResponse {\n    constructor() {\n        super(...arguments);\n        this._batch = null;\n        this.iterated = 0;\n        this._encryptedBatch = null;\n    }\n    /**\n     * This supports a feature of the FindCursor.\n     * It is an optimization to avoid an extra getMore when the limit has been reached\n     */\n    static get emptyGetMore() {\n        return new CursorResponse((0, bson_1.serialize)({ ok: 1, cursor: { id: 0n, nextBatch: [] } }));\n    }\n    static is(value) {\n        return value instanceof CursorResponse || value === CursorResponse.emptyGetMore;\n    }\n    get cursor() {\n        return this.get('cursor', bson_1.BSONType.object, true);\n    }\n    get id() {\n        try {\n            return bson_1.Long.fromBigInt(this.cursor.get('id', bson_1.BSONType.long, true));\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    get ns() {\n        const namespace = this.cursor.get('ns', bson_1.BSONType.string);\n        if (namespace != null)\n            return (0, utils_1.ns)(namespace);\n        return null;\n    }\n    get length() {\n        return Math.max(this.batchSize - this.iterated, 0);\n    }\n    get encryptedBatch() {\n        if (this.encryptedResponse == null)\n            return null;\n        if (this._encryptedBatch != null)\n            return this._encryptedBatch;\n        const cursor = this.encryptedResponse?.get('cursor', bson_1.BSONType.object);\n        if (cursor?.has('firstBatch'))\n            this._encryptedBatch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor?.has('nextBatch'))\n            this._encryptedBatch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._encryptedBatch;\n    }\n    get batch() {\n        if (this._batch != null)\n            return this._batch;\n        const cursor = this.cursor;\n        if (cursor.has('firstBatch'))\n            this._batch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor.has('nextBatch'))\n            this._batch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._batch;\n    }\n    get batchSize() {\n        return this.batch?.size();\n    }\n    get postBatchResumeToken() {\n        return (this.cursor.get('postBatchResumeToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    shift(options) {\n        if (this.iterated >= this.batchSize) {\n            return null;\n        }\n        const result = this.batch.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        const encryptedResult = this.encryptedBatch?.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        this.iterated += 1;\n        if (options?.raw) {\n            return result.toBytes();\n        }\n        else {\n            const object = result.toObject(options);\n            if (encryptedResult) {\n                (0, utils_1.decorateDecryptionResult)(object, encryptedResult.toObject(options), true);\n            }\n            return object;\n        }\n    }\n    clear() {\n        this.iterated = this.batchSize;\n    }\n}\nexports.CursorResponse = CursorResponse;\n/**\n * Explain responses have nothing to do with cursor responses\n * This class serves to temporarily avoid refactoring how cursors handle\n * explain responses which is to detect that the response is not cursor-like and return the explain\n * result as the \"first and only\" document in the \"batch\" and end the \"cursor\"\n */\nclass ExplainedCursorResponse extends CursorResponse {\n    constructor() {\n        super(...arguments);\n        this.isExplain = true;\n        this._length = 1;\n    }\n    get id() {\n        return bson_1.Long.fromBigInt(0n);\n    }\n    get batchSize() {\n        return 0;\n    }\n    get ns() {\n        return null;\n    }\n    get length() {\n        return this._length;\n    }\n    shift(options) {\n        if (this._length === 0)\n            return null;\n        this._length -= 1;\n        return this.toObject(options);\n    }\n}\nexports.ExplainedCursorResponse = ExplainedCursorResponse;\n/**\n * Client bulk writes have some extra metadata at the top level that needs to be\n * included in the result returned to the user.\n */\nclass ClientBulkWriteCursorResponse extends CursorResponse {\n    get insertedCount() {\n        return this.get('nInserted', bson_1.BSONType.int, true);\n    }\n    get upsertedCount() {\n        return this.get('nUpserted', bson_1.BSONType.int, true);\n    }\n    get matchedCount() {\n        return this.get('nMatched', bson_1.BSONType.int, true);\n    }\n    get modifiedCount() {\n        return this.get('nModified', bson_1.BSONType.int, true);\n    }\n    get deletedCount() {\n        return this.get('nDeleted', bson_1.BSONType.int, true);\n    }\n    get writeConcernError() {\n        return this.get('writeConcernError', bson_1.BSONType.object, false);\n    }\n}\nexports.ClientBulkWriteCursorResponse = ClientBulkWriteCursorResponse;\n//# sourceMappingURL=responses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getReadPreference = getReadPreference;\nexports.isSharded = isSharded;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference.\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    // happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvc2hhcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQkFBaUI7QUFDakIsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWE7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMsd0hBQXVCO0FBQ3pELGlCQUFpQixtQkFBTyxDQUFDLGdIQUFtQjtBQUM1QywrQkFBK0IsbUJBQU8sQ0FBQyw0SUFBaUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjbWFwXFx3aXJlX3Byb3RvY29sXFxzaGFyZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFJlYWRQcmVmZXJlbmNlID0gZ2V0UmVhZFByZWZlcmVuY2U7XG5leHBvcnRzLmlzU2hhcmRlZCA9IGlzU2hhcmRlZDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCByZWFkX3ByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi9yZWFkX3ByZWZlcmVuY2VcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL2NvbW1vblwiKTtcbmNvbnN0IHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vc2RhbS90b3BvbG9neV9kZXNjcmlwdGlvblwiKTtcbmZ1bmN0aW9uIGdldFJlYWRQcmVmZXJlbmNlKG9wdGlvbnMpIHtcbiAgICAvLyBEZWZhdWx0IHRvIGNvbW1hbmQgdmVyc2lvbiBvZiB0aGUgcmVhZFByZWZlcmVuY2UuXG4gICAgbGV0IHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucz8ucmVhZFByZWZlcmVuY2UgPz8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICBpZiAodHlwZW9mIHJlYWRQcmVmZXJlbmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZWFkUHJlZmVyZW5jZSA9IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21TdHJpbmcocmVhZFByZWZlcmVuY2UpO1xuICAgIH1cbiAgICBpZiAoIShyZWFkUHJlZmVyZW5jZSBpbnN0YW5jZW9mIHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcHRpb24gXCJyZWFkUHJlZmVyZW5jZVwiIG11c3QgYmUgYSBSZWFkUHJlZmVyZW5jZSBpbnN0YW5jZScpO1xuICAgIH1cbiAgICByZXR1cm4gcmVhZFByZWZlcmVuY2U7XG59XG5mdW5jdGlvbiBpc1NoYXJkZWQodG9wb2xvZ3lPclNlcnZlcikge1xuICAgIGlmICh0b3BvbG9neU9yU2VydmVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiAmJiB0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uLnR5cGUgPT09IGNvbW1vbl8xLlNlcnZlclR5cGUuTW9uZ29zKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBOT1RFOiBUaGlzIGlzIGluY3JlZGlibHkgaW5lZmZpY2llbnQsIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCBvbmNlIGNvbW1hbmQgY29uc3RydWN0aW9uXG4gICAgLy8gaGFwcGVucyBiYXNlZCBvbiBgU2VydmVyYCBub3QgYFRvcG9sb2d5YC5cbiAgICBpZiAodG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiAmJiB0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uIGluc3RhbmNlb2YgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMS5Ub3BvbG9neURlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlcnMgPSBBcnJheS5mcm9tKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gICAgICAgIHJldHVybiBzZXJ2ZXJzLnNvbWUoKHNlcnZlcikgPT4gc2VydmVyLnR5cGUgPT09IGNvbW1vbl8xLlNlcnZlclR5cGUuTW9uZ29zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/count.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    get timeoutMS() {\n        return this.s.options.timeoutMS;\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, (0, utils_1.resolveOptions)(undefined, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        })));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n        return indexes[0];\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexDescriptionArray(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch (error) {\n            // TODO(NODE-6517): Driver should only filter for namespace not found error. Other errors should be thrown.\n            if (error instanceof error_1.MongoOperationTimeoutError)\n                throw error;\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        const indexNames = Array.isArray(indexes) ? indexes : [indexes];\n        const allIndexes = new Set(await this.listIndexes(options)\n            .map(({ name }) => name)\n            .toArray());\n        return indexNames.every(name => allIndexes.has(name));\n    }\n    async indexInformation(options) {\n        return await this.indexes({\n            ...options,\n            full: options?.full ?? false\n        });\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * Due to countDocuments using the $match aggregation pipeline stage, certain query operators cannot be used in countDocuments. This includes the $where and $near query operators, among others. Details can be found in the documentation for the $match aggregation pipeline stage.\n     *\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        const pipeline = [];\n        pipeline.push({ $match: filter });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        const cursor = this.aggregate(pipeline, options);\n        const doc = await cursor.next();\n        await cursor.close();\n        return doc?.n ?? 0;\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexes(options) {\n        const indexes = await this.listIndexes(options).toArray();\n        const full = options?.full ?? true;\n        if (full) {\n            return indexes;\n        }\n        const object = Object.fromEntries(indexes.map(({ name, key }) => [name, Object.entries(key)]));\n        return object;\n    }\n    async findOneAndDelete(filter, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/connection_string.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/connection_string.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_OPTIONS = exports.OPTIONS = void 0;\nexports.resolveSRVRecord = resolveSRVRecord;\nexports.parseOptions = parseOptions;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(rsc)/../../node_modules/.pnpm/mongodb-connection-string-url@3.0.2/node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\nfunction retryDNSTimeoutFor(api) {\n    return async function dnsReqRetryTimeout(lookupAddress) {\n        try {\n            return await dns.promises[api](lookupAddress);\n        }\n        catch (firstDNSError) {\n            if (firstDNSError.code === dns.TIMEOUT) {\n                return await dns.promises[api](lookupAddress);\n            }\n            else {\n                throw firstDNSError;\n            }\n        }\n    };\n}\nconst resolveSrv = retryDNSTimeoutFor('resolveSrv');\nconst resolveTxt = retryDNSTimeoutFor('resolveTxt');\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    // Asynchronously start TXT resolution so that we do not have to wait until\n    // the SRV record is resolved before starting a second DNS query.\n    const lookupAddress = options.srvHost;\n    const txtResolutionPromise = resolveTxt(lookupAddress);\n    txtResolutionPromise.then(undefined, utils_1.squashError); // rejections will be handled later\n    const hostname = `_${options.srvServiceName}._tcp.${lookupAddress}`;\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const addresses = await resolveSrv(hostname);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        (0, utils_1.checkParentDomainMatch)(name, lookupAddress);\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Use the result of resolving the TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await txtResolutionPromise;\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions({\n        MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n        MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n        MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n        MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n        MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n        MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n        MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n        MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    }, {\n        mongodbLogPath: mongoOptions.mongodbLogPath,\n        mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n        mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n    });\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).then(undefined, utils_1.squashError); // rejections will be handled later\n    return mongoOptions;\n}\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    // Note that if the authMechanismProperties contain a TOKEN_RESOURCE that has a\n    // comma in it, it MUST be supplied as a MongoClient option instead of in the\n    // connection string.\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    autoSelectFamily: {\n        type: 'boolean',\n        default: true\n    },\n    autoSelectFamilyAttemptTimeout: {\n        type: 'uint'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    timeoutMS: {\n        type: 'uint'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    mongodbLogPath: {\n        transform({ values: [value] }) {\n            if (!((typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n                (value &&\n                    typeof value === 'object' &&\n                    'write' in value &&\n                    typeof value.write === 'function'))) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    mongodbLogComponentSeverities: {\n        transform({ values: [value] }) {\n            if (typeof value !== 'object' || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)) {\n                if (typeof v !== 'string' || typeof k !== 'string') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    mongodbLogMaxDocumentLength: { type: 'uint' },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted Node.js Options\n    allowPartialTrustChain: { type: 'any' },\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    __skipPingOnConnect: { type: 'boolean' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n//# sourceMappingURL=connection_string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.kDecoratedKeys = exports.kDecorateResult = exports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\n/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @internal */\nexports.SERVER_OPENING = 'serverOpening';\n/** @internal */\nexports.SERVER_CLOSED = 'serverClosed';\n/** @internal */\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @internal */\nexports.TOPOLOGY_OPENING = 'topologyOpening';\n/** @internal */\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @internal */\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.SERVER_SELECTION_STARTED = 'serverSelectionStarted';\n/** @internal */\nexports.SERVER_SELECTION_FAILED = 'serverSelectionFailed';\n/** @internal */\nexports.SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded';\n/** @internal */\nexports.WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @internal */\nexports.COMMAND_STARTED = 'commandStarted';\n/** @internal */\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @internal */\nexports.COMMAND_FAILED = 'commandFailed';\n/** @internal */\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @internal */\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @internal */\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nexports.kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nexports.kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CursorTimeoutContext = exports.AbstractCursor = exports.CursorTimeoutMode = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ../resource_management */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\nfunction removeActiveCursor() {\n    this.client.s.activeCursors.delete(this);\n}\n/**\n * @public\n * @experimental\n * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`\n * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of\n * `cursor.next()`.\n * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.\n *\n * Depending on the type of cursor being used, this option has different default values.\n * For non-tailable cursors, this value defaults to `'cursorLifetime'`\n * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by\n * definition can have an arbitrarily long lifetime.\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});\n * for await (const doc of cursor) {\n *  // process doc\n *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but\n *  // will continue to iterate successfully otherwise, regardless of the number of batches.\n * }\n * ```\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });\n * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.\n * ```\n */\nexports.CursorTimeoutMode = Object.freeze({\n    ITERATION: 'iteration',\n    LIFETIME: 'cursorLifetime'\n});\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        /** @internal */\n        this.documents = null;\n        /** @internal */\n        this.hasEmittedClose = false;\n        this.on('error', utils_1.noop);\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this.cursorClient = client;\n        this.cursorNamespace = namespace;\n        this.cursorId = null;\n        this.initialized = false;\n        this.isClosed = false;\n        this.isKilled = false;\n        this.cursorOptions = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options),\n            timeoutMS: options?.timeoutContext?.csotEnabled()\n                ? options.timeoutContext.timeoutMS\n                : options.timeoutMS,\n            tailable: options.tailable,\n            awaitData: options.awaitData\n        };\n        if (this.cursorOptions.timeoutMS != null) {\n            if (options.timeoutMode == null) {\n                if (options.tailable) {\n                    if (options.awaitData) {\n                        if (options.maxAwaitTimeMS != null &&\n                            options.maxAwaitTimeMS >= this.cursorOptions.timeoutMS)\n                            throw new error_1.MongoInvalidArgumentError('Cannot specify maxAwaitTimeMS >= timeoutMS for a tailable awaitData cursor');\n                    }\n                    this.cursorOptions.timeoutMode = exports.CursorTimeoutMode.ITERATION;\n                }\n                else {\n                    this.cursorOptions.timeoutMode = exports.CursorTimeoutMode.LIFETIME;\n                }\n            }\n            else {\n                if (options.tailable && options.timeoutMode === exports.CursorTimeoutMode.LIFETIME) {\n                    throw new error_1.MongoInvalidArgumentError(\"Cannot set tailable cursor's timeoutMode to LIFETIME\");\n                }\n                this.cursorOptions.timeoutMode = options.timeoutMode;\n            }\n        }\n        else {\n            if (options.timeoutMode != null)\n                throw new error_1.MongoInvalidArgumentError('Cannot set timeoutMode without setting timeoutMS');\n        }\n        // Set for initial command\n        this.cursorOptions.omitMaxTimeMS =\n            this.cursorOptions.timeoutMS != null &&\n                ((this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION &&\n                    !this.cursorOptions.tailable) ||\n                    (this.cursorOptions.tailable && !this.cursorOptions.awaitData));\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this.cursorOptions.readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this.cursorOptions.batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cursorOptions.comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this.cursorOptions.maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this.cursorOptions.maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this.cursorSession = options.session;\n        }\n        else {\n            this.cursorSession = this.cursorClient.startSession({ owner: this, explicit: false });\n        }\n        this.deserializationOptions = {\n            ...this.cursorOptions,\n            validation: {\n                utf8: options?.enableUtf8Validation === false ? false : true\n            }\n        };\n        this.timeoutContext = options.timeoutContext;\n        this.signal = options.signal;\n        this.abortListener = (0, utils_1.addAbortListener)(this.signal, () => void this.close().then(undefined, utils_1.squashError));\n        this.trackCursor();\n    }\n    /**\n     * The cursor has no id until it receives a response from the initial cursor creating command.\n     *\n     * It is non-zero for as long as the database has an open cursor.\n     *\n     * The initiating command may receive a zero id if the entire result is in the `firstBatch`.\n     */\n    get id() {\n        return this.cursorId ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this.cursorId?.isZero() ?? false) || this.isClosed || this.isKilled;\n    }\n    /** @internal */\n    get client() {\n        return this.cursorClient;\n    }\n    /** @internal */\n    get server() {\n        return this.selectedServer;\n    }\n    get namespace() {\n        return this.cursorNamespace;\n    }\n    get readPreference() {\n        return this.cursorOptions.readPreference;\n    }\n    get readConcern() {\n        return this.cursorOptions.readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this.cursorSession;\n    }\n    set session(clientSession) {\n        this.cursorSession = clientSession;\n    }\n    /**\n     * The cursor is closed and all remaining locally buffered documents have been iterated.\n     */\n    get closed() {\n        return this.isClosed && (this.documents?.length ?? 0) === 0;\n    }\n    /**\n     * A `killCursors` command was attempted on this cursor.\n     * This is performed if the cursor id is non zero.\n     */\n    get killed() {\n        return this.isKilled;\n    }\n    get loadBalanced() {\n        return !!this.cursorClient.topology?.loadBalanced;\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /** Adds cursor to client's tracking so it will be closed by MongoClient.close() */\n    trackCursor() {\n        this.cursorClient.s.activeCursors.add(this);\n        if (!this.listeners('close').includes(removeActiveCursor)) {\n            this.once('close', removeActiveCursor);\n        }\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this.documents?.length ?? 0;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this.documents?.length ?? 0, this.documents?.length ?? 0);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this.documents?.shift(this.deserializationOptions);\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        this.signal?.throwIfAborted();\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                if (this.isKilled) {\n                    return;\n                }\n                if (this.closed) {\n                    return;\n                }\n                if (this.cursorId != null && this.isDead && (this.documents?.length ?? 0) === 0) {\n                    return;\n                }\n                const document = await this.next();\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    return;\n                }\n                yield document;\n                this.signal?.throwIfAborted();\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.isClosed) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n    }\n    stream(options) {\n        const readable = new ReadableCursorStream(this);\n        const abortListener = (0, utils_1.addAbortListener)(this.signal, function () {\n            readable.destroy(this.reason);\n        });\n        readable.once('end', () => {\n            abortListener?.[utils_1.kDispose]();\n        });\n        if (options?.transform) {\n            const transform = options.transform;\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on('error', err => transformedStream.emit('error', err));\n            return transformedStream;\n        }\n        return readable;\n    }\n    async hasNext() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            do {\n                if ((this.documents?.length ?? 0) !== 0) {\n                    return true;\n                }\n                await this.fetchBatch();\n            } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            do {\n                const doc = this.documents?.shift(this.deserializationOptions);\n                if (doc != null) {\n                    if (this.transform != null)\n                        return await this.transformDocument(doc);\n                    return doc;\n                }\n                await this.fetchBatch();\n            } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return null;\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            let doc = this.documents?.shift(this.deserializationOptions);\n            if (doc != null) {\n                if (this.transform != null)\n                    return await this.transformDocument(doc);\n                return doc;\n            }\n            await this.fetchBatch();\n            doc = this.documents?.shift(this.deserializationOptions);\n            if (doc != null) {\n                if (this.transform != null)\n                    return await this.transformDocument(doc);\n                return doc;\n            }\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return null;\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        this.signal?.throwIfAborted();\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    /**\n     * Frees any client-side resources used by the cursor.\n     */\n    async close(options) {\n        await this.cleanup(options?.timeoutMS);\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        this.signal?.throwIfAborted();\n        const array = [];\n        // at the end of the loop (since readBufferedDocuments is called) the buffer will be empty\n        // then, the 'await of' syntax will run a getMore call\n        for await (const document of this) {\n            array.push(document);\n            const docs = this.readBufferedDocuments();\n            if (this.transform != null) {\n                for (const doc of docs) {\n                    array.push(await this.transformDocument(doc));\n                }\n            }\n            else {\n                array.push(...docs);\n            }\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        this.throwIfInitialized();\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this.cursorOptions[flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        this.throwIfInitialized();\n        const oldTransform = this.transform;\n        if (oldTransform) {\n            this.transform = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this.transform = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        this.throwIfInitialized();\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this.cursorOptions.readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this.cursorOptions.readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        this.throwIfInitialized();\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this.cursorOptions.readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.cursorOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        this.throwIfInitialized();\n        if (this.cursorOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this.cursorOptions.batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (this.timeoutContext && this.timeoutContext.owner !== this) {\n            throw new error_1.MongoAPIError(`Cannot rewind cursor that does not own its timeout context.`);\n        }\n        if (!this.initialized) {\n            return;\n        }\n        this.cursorId = null;\n        this.documents?.clear();\n        this.timeoutContext?.clear();\n        this.timeoutContext = undefined;\n        this.isClosed = false;\n        this.isKilled = false;\n        this.initialized = false;\n        this.hasEmittedClose = false;\n        this.trackCursor();\n        // We only want to end this session if we created it, and it hasn't ended yet\n        if (this.cursorSession.explicit === false) {\n            if (!this.cursorSession.hasEnded) {\n                this.cursorSession.endSession().then(undefined, utils_1.squashError);\n            }\n            this.cursorSession = this.cursorClient.startSession({ owner: this, explicit: false });\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        if (this.cursorId == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null cursor id. A cursor creating command should have set this');\n        }\n        if (this.selectedServer == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null selectedServer. A cursor creating command should have set this');\n        }\n        const getMoreOptions = {\n            ...this.cursorOptions,\n            session: this.cursorSession,\n            batchSize\n        };\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.cursorNamespace, this.cursorId, this.selectedServer, getMoreOptions);\n        return await (0, execute_operation_1.executeOperation)(this.cursorClient, getMoreOperation, this.timeoutContext);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async cursorInit() {\n        if (this.cursorOptions.timeoutMS != null) {\n            this.timeoutContext ??= new CursorTimeoutContext(timeout_1.TimeoutContext.create({\n                serverSelectionTimeoutMS: this.client.s.options.serverSelectionTimeoutMS,\n                timeoutMS: this.cursorOptions.timeoutMS\n            }), this);\n        }\n        try {\n            const state = await this._initialize(this.cursorSession);\n            // Set omitMaxTimeMS to the value needed for subsequent getMore calls\n            this.cursorOptions.omitMaxTimeMS = this.cursorOptions.timeoutMS != null;\n            const response = state.response;\n            this.selectedServer = state.server;\n            this.cursorId = response.id;\n            this.cursorNamespace = response.ns ?? this.namespace;\n            this.documents = response;\n            this.initialized = true; // the cursor is now initialized, even if it is dead\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this.initialized = true;\n            await this.cleanup(undefined, error);\n            throw error;\n        }\n        if (this.isDead) {\n            await this.cleanup();\n        }\n        return;\n    }\n    /** @internal Attempt to obtain more documents */\n    async fetchBatch() {\n        if (this.isClosed) {\n            return;\n        }\n        if (this.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursor should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n            return;\n        }\n        if (this.cursorId == null) {\n            await this.cursorInit();\n            // If the cursor died or returned documents, return\n            if ((this.documents?.length ?? 0) !== 0 || this.isDead)\n                return;\n            // Otherwise, run a getMore\n        }\n        // otherwise need to call getMore\n        const batchSize = this.cursorOptions.batchSize || 1000;\n        try {\n            const response = await this.getMore(batchSize);\n            this.cursorId = response.id;\n            this.documents = response;\n        }\n        catch (error) {\n            try {\n                await this.cleanup(undefined, error);\n            }\n            catch (cleanupError) {\n                // `cleanupCursor` should never throw, squash and throw the original error\n                (0, utils_1.squashError)(cleanupError);\n            }\n            throw error;\n        }\n        if (this.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n        }\n    }\n    /** @internal */\n    async cleanup(timeoutMS, error) {\n        this.abortListener?.[utils_1.kDispose]();\n        this.isClosed = true;\n        const timeoutContextForKillCursors = () => {\n            if (timeoutMS != null) {\n                this.timeoutContext?.clear();\n                return new CursorTimeoutContext(timeout_1.TimeoutContext.create({\n                    serverSelectionTimeoutMS: this.client.s.options.serverSelectionTimeoutMS,\n                    timeoutMS\n                }), this);\n            }\n            else {\n                return this.timeoutContext?.refreshed();\n            }\n        };\n        try {\n            if (!this.isKilled &&\n                this.cursorId &&\n                !this.cursorId.isZero() &&\n                this.cursorNamespace &&\n                this.selectedServer &&\n                !this.cursorSession.hasEnded) {\n                this.isKilled = true;\n                const cursorId = this.cursorId;\n                this.cursorId = bson_1.Long.ZERO;\n                await (0, execute_operation_1.executeOperation)(this.cursorClient, new kill_cursors_1.KillCursorsOperation(cursorId, this.cursorNamespace, this.selectedServer, {\n                    session: this.cursorSession\n                }), timeoutContextForKillCursors());\n            }\n        }\n        catch (error) {\n            (0, utils_1.squashError)(error);\n        }\n        finally {\n            try {\n                if (this.cursorSession?.owner === this) {\n                    await this.cursorSession.endSession({ error });\n                }\n                if (!this.cursorSession?.inTransaction()) {\n                    (0, sessions_1.maybeClearPinnedConnection)(this.cursorSession, { error });\n                }\n            }\n            finally {\n                this.emitClose();\n            }\n        }\n    }\n    /** @internal */\n    emitClose() {\n        try {\n            if (!this.hasEmittedClose && ((this.documents?.length ?? 0) === 0 || this.isClosed)) {\n                // @ts-expect-error: CursorEvents is generic so Parameters<CursorEvents[\"close\"]> may not be assignable to `[]`. Not sure how to require extenders do not add parameters.\n                this.emit('close');\n            }\n        }\n        finally {\n            this.hasEmittedClose = true;\n        }\n    }\n    /** @internal */\n    async transformDocument(document) {\n        if (this.transform == null)\n            return document;\n        try {\n            const transformedDocument = this.transform(document);\n            // eslint-disable-next-line no-restricted-syntax\n            if (transformedDocument === null) {\n                const TRANSFORM_TO_NULL_ERROR = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                throw new error_1.MongoAPIError(TRANSFORM_TO_NULL_ERROR);\n            }\n            return transformedDocument;\n        }\n        catch (transformError) {\n            try {\n                await this.close();\n            }\n            catch (closeError) {\n                (0, utils_1.squashError)(closeError);\n            }\n            throw transformError;\n        }\n    }\n    /** @internal */\n    throwIfInitialized() {\n        if (this.initialized)\n            throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.AbstractCursor = AbstractCursor;\n/** @event */\nAbstractCursor.CLOSE = 'close';\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        if (this._cursor.id === bson_1.Long.ZERO) {\n            this.push(null);\n            return;\n        }\n        this._cursor\n            .next()\n            .then(\n        // result from next()\n        result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, \n        // error from next()\n        err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        })\n            // if either of the above handlers throw\n            .catch(error => {\n            this._readInProgress = false;\n            this.destroy(error);\n        });\n    }\n}\n(0, resource_management_1.configureResourceManagement)(AbstractCursor.prototype);\n/**\n * @internal\n * The cursor timeout context is a wrapper around a timeout context\n * that keeps track of the \"owner\" of the cursor.  For timeout contexts\n * instantiated inside a cursor, the owner will be the cursor.\n *\n * All timeout behavior is exactly the same as the wrapped timeout context's.\n */\nclass CursorTimeoutContext extends timeout_1.TimeoutContext {\n    constructor(timeoutContext, owner) {\n        super();\n        this.timeoutContext = timeoutContext;\n        this.owner = owner;\n    }\n    get serverSelectionTimeout() {\n        return this.timeoutContext.serverSelectionTimeout;\n    }\n    get connectionCheckoutTimeout() {\n        return this.timeoutContext.connectionCheckoutTimeout;\n    }\n    get clearServerSelectionTimeout() {\n        return this.timeoutContext.clearServerSelectionTimeout;\n    }\n    get timeoutForSocketWrite() {\n        return this.timeoutContext.timeoutForSocketWrite;\n    }\n    get timeoutForSocketRead() {\n        return this.timeoutContext.timeoutForSocketRead;\n    }\n    csotEnabled() {\n        return this.timeoutContext.csotEnabled();\n    }\n    refresh() {\n        if (typeof this.owner !== 'symbol')\n            return this.timeoutContext.refresh();\n    }\n    clear() {\n        if (typeof this.owner !== 'symbol')\n            return this.timeoutContext.clear();\n    }\n    get maxTimeMS() {\n        return this.timeoutContext.maxTimeMS;\n    }\n    get timeoutMS() {\n        return this.timeoutContext.csotEnabled() ? this.timeoutContext.timeoutMS : null;\n    }\n    refreshed() {\n        return new CursorTimeoutContext(this.timeoutContext.refreshed(), this.owner);\n    }\n    addMaxTimeMSToCommand(command, options) {\n        this.timeoutContext.addMaxTimeMSToCommand(command, options);\n    }\n    getSocketTimeoutMS() {\n        return this.timeoutContext.getSocketTimeoutMS();\n    }\n}\nexports.CursorTimeoutContext = CursorTimeoutContext;\n//# sourceMappingURL=abstract_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregationCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends explain_1.ExplainableCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.aggregateOptions = options;\n        const lastStage = this.pipeline[this.pipeline.length - 1];\n        if (this.cursorOptions.timeoutMS != null &&\n            this.cursorOptions.timeoutMode === abstract_cursor_1.CursorTimeoutMode.ITERATION &&\n            (lastStage?.$merge != null || lastStage?.$out != null))\n            throw new error_1.MongoAPIError('Cannot use $out or $merge stage with ITERATION timeoutMode');\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.aggregateOptions);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this.pipeline, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const options = {\n            ...this.aggregateOptions,\n            ...this.cursorOptions,\n            session,\n            signal: this.signal\n        };\n        if (options.explain) {\n            try {\n                (0, explain_1.validateExplainTimeoutOptions)(options, explain_1.Explain.fromOptions(options));\n            }\n            catch {\n                throw new error_1.MongoAPIError('timeoutMS cannot be used with explain when explain is specified in aggregateOptions');\n            }\n        }\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, options);\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation, this.timeoutContext);\n        return { server: aggregateOperation.server, session, response };\n    }\n    async explain(verbosity, options) {\n        const { explain, timeout } = this.resolveExplainTimeoutOptions(verbosity, options);\n        return (await (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.aggregateOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...timeout,\n            explain: explain ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    addStage(stage) {\n        this.throwIfInitialized();\n        if (this.cursorOptions.timeoutMS != null &&\n            this.cursorOptions.timeoutMode === abstract_cursor_1.CursorTimeoutMode.ITERATION &&\n            (stage.$out != null || stage.$merge != null)) {\n            throw new error_1.MongoAPIError('Cannot use $out or $merge stage with ITERATION timeoutMode');\n        }\n        this.pipeline.push(stage);\n        return this;\n    }\n    group($group) {\n        return this.addStage({ $group });\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        return this.addStage({ $limit });\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        return this.addStage({ $match });\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        return this.addStage({ $out });\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        return this.addStage({ $project });\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        return this.addStage({ $lookup });\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        return this.addStage({ $redact });\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        return this.addStage({ $skip });\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        return this.addStage({ $sort });\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        return this.addStage({ $unwind });\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        return this.addStage({ $geoNear });\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvYWdncmVnYXRpb25fY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxxR0FBWTtBQUN0QyxvQkFBb0IsbUJBQU8sQ0FBQywrSEFBeUI7QUFDckQsNEJBQTRCLG1CQUFPLENBQUMsK0lBQWlDO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLDJIQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE1BQU07QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlHQUFpRyxnQkFBZ0I7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXLHFCQUFxQixXQUFXLElBQUksaUJBQWlCO0FBQ3ZHO0FBQ0Esa0VBQWtFLGlCQUFpQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxXQUFXLFdBQVc7QUFDL0QsOENBQThDLFdBQVcsSUFBSSxpQkFBaUI7QUFDOUUsOEJBQThCLFVBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsaURBQWlELFdBQVc7QUFDNUQ7QUFDQSxjQUFjLFlBQVk7QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixVQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixVQUFVO0FBQ3pDO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGN1cnNvclxcYWdncmVnYXRpb25fY3Vyc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZ2dyZWdhdGlvbkN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleHBsYWluXzEgPSByZXF1aXJlKFwiLi4vZXhwbGFpblwiKTtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvYWdncmVnYXRlXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqXG4gKiBUaGUgKipBZ2dyZWdhdGlvbkN1cnNvcioqIGNsYXNzIGlzIGFuIGludGVybmFsIGNsYXNzIHRoYXQgZW1ib2RpZXMgYW4gYWdncmVnYXRpb24gY3Vyc29yIG9uIE1vbmdvREJcbiAqIGFsbG93aW5nIGZvciBpdGVyYXRpb24gb3ZlciB0aGUgcmVzdWx0cyByZXR1cm5lZCBmcm9tIHRoZSB1bmRlcmx5aW5nIHF1ZXJ5LiBJdCBzdXBwb3J0c1xuICogb25lIGJ5IG9uZSBkb2N1bWVudCBpdGVyYXRpb24sIGNvbnZlcnNpb24gdG8gYW4gYXJyYXkgb3IgY2FuIGJlIGl0ZXJhdGVkIGFzIGEgTm9kZSA0LlhcbiAqIG9yIGhpZ2hlciBzdHJlYW1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQWdncmVnYXRpb25DdXJzb3IgZXh0ZW5kcyBleHBsYWluXzEuRXhwbGFpbmFibGVDdXJzb3Ige1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIG5hbWVzcGFjZSwgcGlwZWxpbmUgPSBbXSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZU9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBsYXN0U3RhZ2UgPSB0aGlzLnBpcGVsaW5lW3RoaXMucGlwZWxpbmUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmN1cnNvck9wdGlvbnMudGltZW91dE1TICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yT3B0aW9ucy50aW1lb3V0TW9kZSA9PT0gYWJzdHJhY3RfY3Vyc29yXzEuQ3Vyc29yVGltZW91dE1vZGUuSVRFUkFUSU9OICYmXG4gICAgICAgICAgICAobGFzdFN0YWdlPy4kbWVyZ2UgIT0gbnVsbCB8fCBsYXN0U3RhZ2U/LiRvdXQgIT0gbnVsbCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdDYW5ub3QgdXNlICRvdXQgb3IgJG1lcmdlIHN0YWdlIHdpdGggSVRFUkFUSU9OIHRpbWVvdXRNb2RlJyk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZWRPcHRpb25zID0gKDAsIHV0aWxzXzEubWVyZ2VPcHRpb25zKSh7fSwgdGhpcy5hZ2dyZWdhdGVPcHRpb25zKTtcbiAgICAgICAgZGVsZXRlIGNsb25lZE9wdGlvbnMuc2Vzc2lvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2dyZWdhdGlvbkN1cnNvcih0aGlzLmNsaWVudCwgdGhpcy5uYW1lc3BhY2UsIHRoaXMucGlwZWxpbmUsIHtcbiAgICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1hcCh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLm1hcCh0cmFuc2Zvcm0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5hZ2dyZWdhdGVPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgICAgIHNpZ25hbDogdGhpcy5zaWduYWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZXhwbGFpbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAoMCwgZXhwbGFpbl8xLnZhbGlkYXRlRXhwbGFpblRpbWVvdXRPcHRpb25zKShvcHRpb25zLCBleHBsYWluXzEuRXhwbGFpbi5mcm9tT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcigndGltZW91dE1TIGNhbm5vdCBiZSB1c2VkIHdpdGggZXhwbGFpbiB3aGVuIGV4cGxhaW4gaXMgc3BlY2lmaWVkIGluIGFnZ3JlZ2F0ZU9wdGlvbnMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2dyZWdhdGVPcGVyYXRpb24gPSBuZXcgYWdncmVnYXRlXzEuQWdncmVnYXRlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLnBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgYWdncmVnYXRlT3BlcmF0aW9uLCB0aGlzLnRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBhZ2dyZWdhdGVPcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbiAgICBhc3luYyBleHBsYWluKHZlcmJvc2l0eSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGV4cGxhaW4sIHRpbWVvdXQgfSA9IHRoaXMucmVzb2x2ZUV4cGxhaW5UaW1lb3V0T3B0aW9ucyh2ZXJib3NpdHksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gKGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBuZXcgYWdncmVnYXRlXzEuQWdncmVnYXRlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLnBpcGVsaW5lLCB7XG4gICAgICAgICAgICAuLi50aGlzLmFnZ3JlZ2F0ZU9wdGlvbnMsIC8vIE5PVEU6IG9yZGVyIG1hdHRlcnMgaGVyZSwgd2UgbWF5IG5lZWQgdG8gcmVmaW5lIHRoaXNcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRpbWVvdXQsXG4gICAgICAgICAgICBleHBsYWluOiBleHBsYWluID8/IHRydWVcbiAgICAgICAgfSkpKS5zaGlmdCh0aGlzLmRlc2VyaWFsaXphdGlvbk9wdGlvbnMpO1xuICAgIH1cbiAgICBhZGRTdGFnZShzdGFnZSkge1xuICAgICAgICB0aGlzLnRocm93SWZJbml0aWFsaXplZCgpO1xuICAgICAgICBpZiAodGhpcy5jdXJzb3JPcHRpb25zLnRpbWVvdXRNUyAhPSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLmN1cnNvck9wdGlvbnMudGltZW91dE1vZGUgPT09IGFic3RyYWN0X2N1cnNvcl8xLkN1cnNvclRpbWVvdXRNb2RlLklURVJBVElPTiAmJlxuICAgICAgICAgICAgKHN0YWdlLiRvdXQgIT0gbnVsbCB8fCBzdGFnZS4kbWVyZ2UgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ0Nhbm5vdCB1c2UgJG91dCBvciAkbWVyZ2Ugc3RhZ2Ugd2l0aCBJVEVSQVRJT04gdGltZW91dE1vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBpcGVsaW5lLnB1c2goc3RhZ2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ3JvdXAoJGdyb3VwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJGdyb3VwIH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGEgbGltaXQgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lICovXG4gICAgbGltaXQoJGxpbWl0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJGxpbWl0IH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGEgbWF0Y2ggc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lICovXG4gICAgbWF0Y2goJG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJG1hdGNoIH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGFuIG91dCBzdGFnZSB0byB0aGUgYWdncmVnYXRpb24gcGlwZWxpbmUgKi9cbiAgICBvdXQoJG91dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRTdGFnZSh7ICRvdXQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb2plY3Qgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEluIG9yZGVyIHRvIHN0cmljdGx5IHR5cGUgdGhpcyBmdW5jdGlvbiB5b3UgbXVzdCBwcm92aWRlIGFuIGludGVyZmFjZVxuICAgICAqIHRoYXQgcmVwcmVzZW50cyB0aGUgZWZmZWN0IG9mIHlvdXIgcHJvamVjdGlvbiBvbiB0aGUgcmVzdWx0IGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgY2hhaW5pbmcgYSBwcm9qZWN0aW9uIHRvIHlvdXIgY3Vyc29yIGNoYW5nZXMgdGhlIHJldHVybmVkIHR5cGUgdG8gdGhlIGdlbmVyaWMge0BsaW5rIERvY3VtZW50fSB0eXBlLlxuICAgICAqIFlvdSBzaG91bGQgc3BlY2lmeSBhIHBhcmFtZXRlcml6ZWQgdHlwZSB0byBoYXZlIGFzc2VydGlvbnMgb24geW91ciBmaW5hbCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogLy8gQmVzdCB3YXlcbiAgICAgKiBjb25zdCBkb2NzOiBBZ2dyZWdhdGlvbkN1cnNvcjx7IGE6IG51bWJlciB9PiA9IGN1cnNvci5wcm9qZWN0PHsgYTogbnVtYmVyIH0+KHsgX2lkOiAwLCBhOiB0cnVlIH0pO1xuICAgICAqIC8vIEZsZXhpYmxlIHdheVxuICAgICAqIGNvbnN0IGRvY3M6IEFnZ3JlZ2F0aW9uQ3Vyc29yPERvY3VtZW50PiA9IGN1cnNvci5wcm9qZWN0KHsgX2lkOiAwLCBhOiB0cnVlIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJbiBvcmRlciB0byBzdHJpY3RseSB0eXBlIHRoaXMgZnVuY3Rpb24geW91IG11c3QgcHJvdmlkZSBhbiBpbnRlcmZhY2VcbiAgICAgKiB0aGF0IHJlcHJlc2VudHMgdGhlIGVmZmVjdCBvZiB5b3VyIHByb2plY3Rpb24gb24gdGhlIHJlc3VsdCBkb2N1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGUgZm9yIFR5cGVzY3JpcHQgVXNlcnM6KiogYWRkaW5nIGEgdHJhbnNmb3JtIGNoYW5nZXMgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBpdGVyYXRpb24gb2YgdGhpcyBjdXJzb3IsXG4gICAgICogaXQgKipkb2VzIG5vdCoqIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIGN1cnNvci4gVGhpcyBtZWFucyB3aGVuIGNhbGxpbmcgcHJvamVjdCxcbiAgICAgKiB5b3Ugc2hvdWxkIGFsd2F5cyBhc3NpZ24gdGhlIHJlc3VsdCB0byBhIG5ldyB2YXJpYWJsZSBpbiBvcmRlciB0byBnZXQgYSBjb3JyZWN0bHkgdHlwZWQgY3Vyc29yIHZhcmlhYmxlLlxuICAgICAqIFRha2Ugbm90ZSBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjdXJzb3I6IEFnZ3JlZ2F0aW9uQ3Vyc29yPHsgYTogbnVtYmVyOyBiOiBzdHJpbmcgfT4gPSBjb2xsLmFnZ3JlZ2F0ZShbXSk7XG4gICAgICogY29uc3QgcHJvamVjdEN1cnNvciA9IGN1cnNvci5wcm9qZWN0PHsgYTogbnVtYmVyIH0+KHsgX2lkOiAwLCBhOiB0cnVlIH0pO1xuICAgICAqIGNvbnN0IGFQcm9wT25seUFycmF5OiB7YTogbnVtYmVyfVtdID0gYXdhaXQgcHJvamVjdEN1cnNvci50b0FycmF5KCk7XG4gICAgICpcbiAgICAgKiAvLyBvciBhbHdheXMgdXNlIGNoYWluaW5nIGFuZCBzYXZlIHRoZSBmaW5hbCBjdXJzb3JcbiAgICAgKlxuICAgICAqIGNvbnN0IGN1cnNvciA9IGNvbGwuYWdncmVnYXRlKCkucHJvamVjdDx7IGE6IHN0cmluZyB9Pih7XG4gICAgICogICBfaWQ6IDAsXG4gICAgICogICBhOiB7ICRjb252ZXJ0OiB7IGlucHV0OiAnJGEnLCB0bzogJ3N0cmluZycgfVxuICAgICAqIH19KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwcm9qZWN0KCRwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJHByb2plY3QgfSk7XG4gICAgfVxuICAgIC8qKiBBZGQgYSBsb29rdXAgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lICovXG4gICAgbG9va3VwKCRsb29rdXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkU3RhZ2UoeyAkbG9va3VwIH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGEgcmVkYWN0IHN0YWdlIHRvIHRoZSBhZ2dyZWdhdGlvbiBwaXBlbGluZSAqL1xuICAgIHJlZGFjdCgkcmVkYWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJHJlZGFjdCB9KTtcbiAgICB9XG4gICAgLyoqIEFkZCBhIHNraXAgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lICovXG4gICAgc2tpcCgkc2tpcCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRTdGFnZSh7ICRza2lwIH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGEgc29ydCBzdGFnZSB0byB0aGUgYWdncmVnYXRpb24gcGlwZWxpbmUgKi9cbiAgICBzb3J0KCRzb3J0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJHNvcnQgfSk7XG4gICAgfVxuICAgIC8qKiBBZGQgYSB1bndpbmQgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lICovXG4gICAgdW53aW5kKCR1bndpbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkU3RhZ2UoeyAkdW53aW5kIH0pO1xuICAgIH1cbiAgICAvKiogQWRkIGEgZ2VvTmVhciBzdGFnZSB0byB0aGUgYWdncmVnYXRpb24gcGlwZWxpbmUgKi9cbiAgICBnZW9OZWFyKCRnZW9OZWFyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFN0YWdlKHsgJGdlb05lYXIgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGlvbkN1cnNvciA9IEFnZ3JlZ2F0aW9uQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdncmVnYXRpb25fY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, { ...options, tailable: true, awaitData: true });\n        this.pipeline = pipeline;\n        this.changeStreamCursorOptions = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime ?? null;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.changeStreamCursorOptions\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.changeStreamCursorOptions.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const { postBatchResumeToken } = response;\n        if (postBatchResumeToken) {\n            this.postBatchResumeToken = postBatchResumeToken;\n            if (response.batchSize === 0) {\n                this.resumeToken = postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.changeStreamCursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation, this.timeoutContext);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.changeStreamCursorOptions.resumeAfter == null &&\n            this.changeStreamCursorOptions.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2hhbmdlX3N0cmVhbV9jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLHdCQUF3QixtQkFBTyxDQUFDLGlIQUFrQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyx5R0FBYztBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQywrSEFBeUI7QUFDckQsNEJBQTRCLG1CQUFPLENBQUMsK0lBQWlDO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLDJIQUFtQjtBQUNyRDtBQUNBO0FBQ0EsOERBQThEO0FBQzlELG1DQUFtQyw2Q0FBNkM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjdXJzb3JcXGNoYW5nZV9zdHJlYW1fY3Vyc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGFuZ2VTdHJlYW1DdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBjaGFuZ2Vfc3RyZWFtXzEgPSByZXF1aXJlKFwiLi4vY2hhbmdlX3N0cmVhbVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvYWdncmVnYXRlXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ2hhbmdlU3RyZWFtQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgbmFtZXNwYWNlLCBwaXBlbGluZSA9IFtdLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBuYW1lc3BhY2UsIHsgLi4ub3B0aW9ucywgdGFpbGFibGU6IHRydWUsIGF3YWl0RGF0YTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICB0aGlzLmNoYW5nZVN0cmVhbUN1cnNvck9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSBvcHRpb25zLnN0YXJ0QXRPcGVyYXRpb25UaW1lID8/IG51bGw7XG4gICAgICAgIGlmIChvcHRpb25zLnN0YXJ0QWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBvcHRpb25zLnN0YXJ0QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5yZXN1bWVBZnRlcikge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IG9wdGlvbnMucmVzdW1lQWZ0ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IHJlc3VtZVRva2VuKHRva2VuKSB7XG4gICAgICAgIHRoaXMuX3Jlc3VtZVRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLlJFU1VNRV9UT0tFTl9DSEFOR0VELCB0b2tlbik7XG4gICAgfVxuICAgIGdldCByZXN1bWVUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VtZVRva2VuO1xuICAgIH1cbiAgICBnZXQgcmVzdW1lT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuY2hhbmdlU3RyZWFtQ3Vyc29yT3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ3Jlc3VtZUFmdGVyJywgJ3N0YXJ0QWZ0ZXInLCAnc3RhcnRBdE9wZXJhdGlvblRpbWUnXSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXN1bWVUb2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFuZ2VTdHJlYW1DdXJzb3JPcHRpb25zLnN0YXJ0QWZ0ZXIgJiYgIXRoaXMuaGFzUmVjZWl2ZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXJ0QWZ0ZXIgPSB0aGlzLnJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yZXN1bWVBZnRlciA9IHRoaXMucmVzdW1lVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSAhPSBudWxsICYmICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKSh0aGlzLnNlcnZlcikgPj0gNykge1xuICAgICAgICAgICAgb3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICAgIGNhY2hlUmVzdW1lVG9rZW4ocmVzdW1lVG9rZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyZWRDb3VudCgpID09PSAwICYmIHRoaXMucG9zdEJhdGNoUmVzdW1lVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHJlc3VtZVRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzUmVjZWl2ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfcHJvY2Vzc0JhdGNoKHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHsgcG9zdEJhdGNoUmVzdW1lVG9rZW4gfSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAocG9zdEJhdGNoUmVzdW1lVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMucG9zdEJhdGNoUmVzdW1lVG9rZW4gPSBwb3N0QmF0Y2hSZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5iYXRjaFNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gcG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlU3RyZWFtQ3Vyc29yKHRoaXMuY2xpZW50LCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5waXBlbGluZSwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0ZU9wZXJhdGlvbiA9IG5ldyBhZ2dyZWdhdGVfMS5BZ2dyZWdhdGVPcGVyYXRpb24odGhpcy5uYW1lc3BhY2UsIHRoaXMucGlwZWxpbmUsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY2hhbmdlU3RyZWFtQ3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikoc2Vzc2lvbi5jbGllbnQsIGFnZ3JlZ2F0ZU9wZXJhdGlvbiwgdGhpcy50aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IGFnZ3JlZ2F0ZU9wZXJhdGlvbi5zZXJ2ZXI7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdHJlYW1DdXJzb3JPcHRpb25zLnJlc3VtZUFmdGVyID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RyZWFtQ3Vyc29yT3B0aW9ucy5zdGFydEFmdGVyID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gNykge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IHJlc3BvbnNlLm9wZXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvY2Vzc0JhdGNoKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNvbnN0YW50c18xLklOSVQsIHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNvbnN0YW50c18xLlJFU1BPTlNFKTtcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbiAgICBhc3luYyBnZXRNb3JlKGJhdGNoU2l6ZSkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmdldE1vcmUoYmF0Y2hTaXplKTtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKSh0aGlzLnNlcnZlcik7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NCYXRjaChyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLk1PUkUsIHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNoYW5nZV9zdHJlYW1fMS5DaGFuZ2VTdHJlYW0uUkVTUE9OU0UpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxufVxuZXhwb3J0cy5DaGFuZ2VTdHJlYW1DdXJzb3IgPSBDaGFuZ2VTdHJlYW1DdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2Vfc3RyZWFtX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteCursor = void 0;\nconst client_bulk_write_1 = __webpack_require__(/*! ../operations/client_bulk_write/client_bulk_write */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/**\n * This is the cursor that handles client bulk write operations. Note this is never\n * exposed directly to the user and is always immediately exhausted.\n * @internal\n */\nclass ClientBulkWriteCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, commandBuilder, options = {}) {\n        super(client, new utils_1.MongoDBNamespace('admin', '$cmd'), options);\n        this.commandBuilder = commandBuilder;\n        this.clientBulkWriteOptions = options;\n    }\n    /**\n     * We need a way to get the top level cursor response fields for\n     * generating the bulk write result, so we expose this here.\n     */\n    get response() {\n        if (this.cursorResponse)\n            return this.cursorResponse;\n        return null;\n    }\n    get operations() {\n        return this.commandBuilder.lastOperations;\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.clientBulkWriteOptions);\n        delete clonedOptions.session;\n        return new ClientBulkWriteCursor(this.client, this.commandBuilder, {\n            ...clonedOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const clientBulkWriteOperation = new client_bulk_write_1.ClientBulkWriteOperation(this.commandBuilder, {\n            ...this.clientBulkWriteOptions,\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, clientBulkWriteOperation, this.timeoutContext);\n        this.cursorResponse = response;\n        return { server: clientBulkWriteOperation.server, session, response };\n    }\n}\nexports.ClientBulkWriteCursor = ClientBulkWriteCursor;\n//# sourceMappingURL=client_bulk_write_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2xpZW50X2J1bGtfd3JpdGVfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw0QkFBNEIsbUJBQU8sQ0FBQyxtTEFBbUQ7QUFDdkYsNEJBQTRCLG1CQUFPLENBQUMsK0lBQWlDO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLDJIQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGN1cnNvclxcY2xpZW50X2J1bGtfd3JpdGVfY3Vyc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBjbGllbnRfYnVsa193cml0ZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvY2xpZW50X2J1bGtfd3JpdGUvY2xpZW50X2J1bGtfd3JpdGVcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGN1cnNvciB0aGF0IGhhbmRsZXMgY2xpZW50IGJ1bGsgd3JpdGUgb3BlcmF0aW9ucy4gTm90ZSB0aGlzIGlzIG5ldmVyXG4gKiBleHBvc2VkIGRpcmVjdGx5IHRvIHRoZSB1c2VyIGFuZCBpcyBhbHdheXMgaW1tZWRpYXRlbHkgZXhoYXVzdGVkLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIENsaWVudEJ1bGtXcml0ZUN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBjb21tYW5kQnVpbGRlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVpbGRlciA9IGNvbW1hbmRCdWlsZGVyO1xuICAgICAgICB0aGlzLmNsaWVudEJ1bGtXcml0ZU9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIGEgd2F5IHRvIGdldCB0aGUgdG9wIGxldmVsIGN1cnNvciByZXNwb25zZSBmaWVsZHMgZm9yXG4gICAgICogZ2VuZXJhdGluZyB0aGUgYnVsayB3cml0ZSByZXN1bHQsIHNvIHdlIGV4cG9zZSB0aGlzIGhlcmUuXG4gICAgICovXG4gICAgZ2V0IHJlc3BvbnNlKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJzb3JSZXNwb25zZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnNvclJlc3BvbnNlO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZ2V0IG9wZXJhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRCdWlsZGVyLmxhc3RPcGVyYXRpb25zO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkT3B0aW9ucyA9ICgwLCB1dGlsc18xLm1lcmdlT3B0aW9ucykoe30sIHRoaXMuY2xpZW50QnVsa1dyaXRlT3B0aW9ucyk7XG4gICAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLnNlc3Npb247XG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QnVsa1dyaXRlQ3Vyc29yKHRoaXMuY2xpZW50LCB0aGlzLmNvbW1hbmRCdWlsZGVyLCB7XG4gICAgICAgICAgICAuLi5jbG9uZWRPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjbGllbnRCdWxrV3JpdGVPcGVyYXRpb24gPSBuZXcgY2xpZW50X2J1bGtfd3JpdGVfMS5DbGllbnRCdWxrV3JpdGVPcGVyYXRpb24odGhpcy5jb21tYW5kQnVpbGRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5jbGllbnRCdWxrV3JpdGVPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgY2xpZW50QnVsa1dyaXRlT3BlcmF0aW9uLCB0aGlzLnRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jdXJzb3JSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IGNsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVDdXJzb3IgPSBDbGllbnRCdWxrV3JpdGVDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRfYnVsa193cml0ZV9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/find_cursor.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = exports.FLAGS = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends explain_1.ExplainableCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        /** @internal */\n        this.numReturned = 0;\n        this.cursorFilter = filter;\n        this.findOptions = options;\n        if (options.sort != null) {\n            this.findOptions.sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.findOptions);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this.cursorFilter, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const options = {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            session,\n            signal: this.signal\n        };\n        if (options.explain) {\n            try {\n                (0, explain_1.validateExplainTimeoutOptions)(options, explain_1.Explain.fromOptions(options));\n            }\n            catch {\n                throw new error_1.MongoAPIError('timeoutMS cannot be used with explain when explain is specified in findOptions');\n            }\n        }\n        const findOperation = new find_1.FindOperation(this.namespace, this.cursorFilter, options);\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation, this.timeoutContext);\n        // the response is not a cursor when `explain` is enabled\n        this.numReturned = response.batchSize;\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this.numReturned;\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this.findOptions.limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                    // this is an optimization for the special case of a limit for a find command to avoid an\n                    // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                    // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                    // produces results for the find command.  Once a batch is filled up, it is returned and only\n                    // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                    // is exhausted and return a cursorId of zero.\n                    // instead, if we determine there are no more documents to request from the server, we preemptively\n                    // close the cursor\n                }\n                return responses_1.CursorResponse.emptyGetMore;\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        this.numReturned = this.numReturned + response.batchSize;\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    async explain(verbosity, options) {\n        const { explain, timeout } = this.resolveExplainTimeoutOptions(verbosity, options);\n        return (await (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...timeout,\n            explain: explain ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        this.throwIfInitialized();\n        this.cursorFilter = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        this.throwIfInitialized();\n        this.findOptions.hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        this.throwIfInitialized();\n        this.findOptions.min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        this.throwIfInitialized();\n        this.findOptions.max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        this.throwIfInitialized();\n        this.findOptions.returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        this.throwIfInitialized();\n        this.findOptions.showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        this.throwIfInitialized();\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this.findOptions.comment = value;\n                break;\n            case 'explain':\n                this.findOptions.explain = value;\n                break;\n            case 'hint':\n                this.findOptions.hint = value;\n                break;\n            case 'max':\n                this.findOptions.max = value;\n                break;\n            case 'maxTimeMS':\n                this.findOptions.maxTimeMS = value;\n                break;\n            case 'min':\n                this.findOptions.min = value;\n                break;\n            case 'orderby':\n                this.findOptions.sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this.cursorFilter = value;\n                break;\n            case 'returnKey':\n                this.findOptions.returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this.findOptions.showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        this.throwIfInitialized();\n        this.findOptions.comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this.findOptions.maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.findOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        this.throwIfInitialized();\n        this.findOptions.projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this.findOptions.sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        this.throwIfInitialized();\n        if (!this.findOptions.sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this.findOptions.allowDiskUse = false;\n            return this;\n        }\n        this.findOptions.allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        this.throwIfInitialized();\n        this.findOptions.collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this.findOptions.limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this.findOptions.skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvZmluZF9jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsYUFBYTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQywrSUFBaUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMscUdBQVk7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsdUhBQXFCO0FBQzdDLDRCQUE0QixtQkFBTyxDQUFDLCtJQUFpQztBQUNyRSxlQUFlLG1CQUFPLENBQUMscUhBQW9CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQywrRkFBUztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxNQUFNO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVGQUF1RixLQUFLO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFdBQVcscUJBQXFCLFdBQVcsSUFBSSxpQkFBaUI7QUFDaEc7QUFDQSwyREFBMkQsaUJBQWlCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsV0FBVyxXQUFXO0FBQ3hELDhDQUE4QyxXQUFXLElBQUksaUJBQWlCO0FBQzlFLDhCQUE4QixVQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxXQUFXO0FBQ3ZEO0FBQ0EsY0FBYyxZQUFZO0FBQzFCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGN1cnNvclxcZmluZF9jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbmRDdXJzb3IgPSBleHBvcnRzLkZMQUdTID0gdm9pZCAwO1xuY29uc3QgcmVzcG9uc2VzXzEgPSByZXF1aXJlKFwiLi4vY21hcC93aXJlX3Byb3RvY29sL3Jlc3BvbnNlc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleHBsYWluXzEgPSByZXF1aXJlKFwiLi4vZXhwbGFpblwiKTtcbmNvbnN0IGNvdW50XzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9jb3VudFwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGZpbmRfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2ZpbmRcIik7XG5jb25zdCBzb3J0XzEgPSByZXF1aXJlKFwiLi4vc29ydFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG4vKiogQHB1YmxpYyBGbGFncyBhbGxvd2VkIGZvciBjdXJzb3IgKi9cbmV4cG9ydHMuRkxBR1MgPSBbXG4gICAgJ3RhaWxhYmxlJyxcbiAgICAnb3Bsb2dSZXBsYXknLFxuICAgICdub0N1cnNvclRpbWVvdXQnLFxuICAgICdhd2FpdERhdGEnLFxuICAgICdleGhhdXN0JyxcbiAgICAncGFydGlhbCdcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgRmluZEN1cnNvciBleHRlbmRzIGV4cGxhaW5fMS5FeHBsYWluYWJsZUN1cnNvciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgbmFtZXNwYWNlLCBmaWx0ZXIgPSB7fSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm51bVJldHVybmVkID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JGaWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMuZmluZE9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5zb3J0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZE9wdGlvbnMuc29ydCA9ICgwLCBzb3J0XzEuZm9ybWF0U29ydCkob3B0aW9ucy5zb3J0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkT3B0aW9ucyA9ICgwLCB1dGlsc18xLm1lcmdlT3B0aW9ucykoe30sIHRoaXMuZmluZE9wdGlvbnMpO1xuICAgICAgICBkZWxldGUgY2xvbmVkT3B0aW9ucy5zZXNzaW9uO1xuICAgICAgICByZXR1cm4gbmV3IEZpbmRDdXJzb3IodGhpcy5jbGllbnQsIHRoaXMubmFtZXNwYWNlLCB0aGlzLmN1cnNvckZpbHRlciwge1xuICAgICAgICAgICAgLi4uY2xvbmVkT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWFwKHRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm4gc3VwZXIubWFwKHRyYW5zZm9ybSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmZpbmRPcHRpb25zLCAvLyBOT1RFOiBvcmRlciBtYXR0ZXJzIGhlcmUsIHdlIG1heSBuZWVkIHRvIHJlZmluZSB0aGlzXG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5leHBsYWluKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICgwLCBleHBsYWluXzEudmFsaWRhdGVFeHBsYWluVGltZW91dE9wdGlvbnMpKG9wdGlvbnMsIGV4cGxhaW5fMS5FeHBsYWluLmZyb21PcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCd0aW1lb3V0TVMgY2Fubm90IGJlIHVzZWQgd2l0aCBleHBsYWluIHdoZW4gZXhwbGFpbiBpcyBzcGVjaWZpZWQgaW4gZmluZE9wdGlvbnMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaW5kT3BlcmF0aW9uID0gbmV3IGZpbmRfMS5GaW5kT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLmN1cnNvckZpbHRlciwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIGZpbmRPcGVyYXRpb24sIHRoaXMudGltZW91dENvbnRleHQpO1xuICAgICAgICAvLyB0aGUgcmVzcG9uc2UgaXMgbm90IGEgY3Vyc29yIHdoZW4gYGV4cGxhaW5gIGlzIGVuYWJsZWRcbiAgICAgICAgdGhpcy5udW1SZXR1cm5lZCA9IHJlc3BvbnNlLmJhdGNoU2l6ZTtcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBmaW5kT3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIGdldE1vcmUoYmF0Y2hTaXplKSB7XG4gICAgICAgIGNvbnN0IG51bVJldHVybmVkID0gdGhpcy5udW1SZXR1cm5lZDtcbiAgICAgICAgaWYgKG51bVJldHVybmVkKSB7XG4gICAgICAgICAgICAvLyBUT0RPKERSSVZFUlMtMTQ0OCk6IFJlbW92ZSBsb2dpYyB0byBlbmZvcmNlIGBsaW1pdGAgaW4gdGhlIGRyaXZlclxuICAgICAgICAgICAgY29uc3QgbGltaXQgPSB0aGlzLmZpbmRPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgYmF0Y2hTaXplID1cbiAgICAgICAgICAgICAgICBsaW1pdCAmJiBsaW1pdCA+IDAgJiYgbnVtUmV0dXJuZWQgKyBiYXRjaFNpemUgPiBsaW1pdCA/IGxpbWl0IC0gbnVtUmV0dXJuZWQgOiBiYXRjaFNpemU7XG4gICAgICAgICAgICBpZiAoYmF0Y2hTaXplIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5zcXVhc2hFcnJvcikoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIG9wdGltaXphdGlvbiBmb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiBhIGxpbWl0IGZvciBhIGZpbmQgY29tbWFuZCB0byBhdm9pZCBhblxuICAgICAgICAgICAgICAgICAgICAvLyBleHRyYSBnZXRNb3JlIHdoZW4gdGhlIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQgYW5kIHRoZSBsaW1pdCBpcyBhIG11bHRpcGxlIG9mIHRoZSBiYXRjaFNpemUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb25zZXF1ZW5jZSBvZiB0aGUgbmV3IHF1ZXJ5IGVuZ2luZSBpbiA1LjAgaGF2aW5nIG5vIGtub3dsZWRnZSBvZiB0aGUgbGltaXQgYXMgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvZHVjZXMgcmVzdWx0cyBmb3IgdGhlIGZpbmQgY29tbWFuZC4gIE9uY2UgYSBiYXRjaCBpcyBmaWxsZWQgdXAsIGl0IGlzIHJldHVybmVkIGFuZCBvbmx5XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBzdWJzZXF1ZW50IGdldE1vcmUgd2lsbCB0aGUgcXVlcnkgZnJhbWV3b3JrIGNvbnNpZGVyIHRoZSBsaW1pdCwgZGV0ZXJtaW5lIHRoZSBjdXJzb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgZXhoYXVzdGVkIGFuZCByZXR1cm4gYSBjdXJzb3JJZCBvZiB6ZXJvLlxuICAgICAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkLCBpZiB3ZSBkZXRlcm1pbmUgdGhlcmUgYXJlIG5vIG1vcmUgZG9jdW1lbnRzIHRvIHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyLCB3ZSBwcmVlbXB0aXZlbHlcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2UgdGhlIGN1cnNvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VzXzEuQ3Vyc29yUmVzcG9uc2UuZW1wdHlHZXRNb3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZ2V0TW9yZShiYXRjaFNpemUpO1xuICAgICAgICAvLyBUT0RPOiB3cmFwIHRoaXMgaW4gc29tZSBsb2dpYyB0byBwcmV2ZW50IGl0IGZyb20gaGFwcGVuaW5nIGlmIHdlIGRvbid0IG5lZWQgdGhpcyBzdXBwb3J0XG4gICAgICAgIHRoaXMubnVtUmV0dXJuZWQgPSB0aGlzLm51bVJldHVybmVkICsgcmVzcG9uc2UuYmF0Y2hTaXplO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY291bnQgb2YgZG9jdW1lbnRzIGZvciB0aGlzIGN1cnNvclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgY29sbGVjdGlvbi5lc3RpbWF0ZWREb2N1bWVudENvdW50YCBvciBgY29sbGVjdGlvbi5jb3VudERvY3VtZW50c2AgaW5zdGVhZFxuICAgICAqL1xuICAgIGFzeW5jIGNvdW50KG9wdGlvbnMpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuZW1pdFdhcm5pbmdPbmNlKSgnY3Vyc29yLmNvdW50IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLCBwbGVhc2UgdXNlIGBjb2xsZWN0aW9uLmVzdGltYXRlZERvY3VtZW50Q291bnRgIG9yIGBjb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzYCBpbnN0ZWFkICcpO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignSW52YWxpZCBmaXJzdCBwYXJhbWV0ZXIgdG8gY291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIG5ldyBjb3VudF8xLkNvdW50T3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLmN1cnNvckZpbHRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5maW5kT3B0aW9ucywgLy8gTk9URTogb3JkZXIgbWF0dGVycyBoZXJlLCB3ZSBtYXkgbmVlZCB0byByZWZpbmUgdGhpc1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGFzeW5jIGV4cGxhaW4odmVyYm9zaXR5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZXhwbGFpbiwgdGltZW91dCB9ID0gdGhpcy5yZXNvbHZlRXhwbGFpblRpbWVvdXRPcHRpb25zKHZlcmJvc2l0eSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiAoYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIG5ldyBmaW5kXzEuRmluZE9wZXJhdGlvbih0aGlzLm5hbWVzcGFjZSwgdGhpcy5jdXJzb3JGaWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuZmluZE9wdGlvbnMsIC8vIE5PVEU6IG9yZGVyIG1hdHRlcnMgaGVyZSwgd2UgbWF5IG5lZWQgdG8gcmVmaW5lIHRoaXNcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRpbWVvdXQsXG4gICAgICAgICAgICBleHBsYWluOiBleHBsYWluID8/IHRydWVcbiAgICAgICAgfSkpKS5zaGlmdCh0aGlzLmRlc2VyaWFsaXphdGlvbk9wdGlvbnMpO1xuICAgIH1cbiAgICAvKiogU2V0IHRoZSBjdXJzb3IgcXVlcnkgKi9cbiAgICBmaWx0ZXIoZmlsdGVyKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIHRoaXMuY3Vyc29yRmlsdGVyID0gZmlsdGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJzb3IgaGludFxuICAgICAqXG4gICAgICogQHBhcmFtIGhpbnQgLSBJZiBzcGVjaWZpZWQsIHRoZW4gdGhlIHF1ZXJ5IHN5c3RlbSB3aWxsIG9ubHkgY29uc2lkZXIgcGxhbnMgdXNpbmcgdGhlIGhpbnRlZCBpbmRleC5cbiAgICAgKi9cbiAgICBoaW50KGhpbnQpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5oaW50ID0gaGludDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3Vyc29yIG1pblxuICAgICAqXG4gICAgICogQHBhcmFtIG1pbiAtIFNwZWNpZnkgYSAkbWluIHZhbHVlIHRvIHNwZWNpZnkgdGhlIGluY2x1c2l2ZSBsb3dlciBib3VuZCBmb3IgYSBzcGVjaWZpYyBpbmRleCBpbiBvcmRlciB0byBjb25zdHJhaW4gdGhlIHJlc3VsdHMgb2YgZmluZCgpLiBUaGUgJG1pbiBzcGVjaWZpZXMgdGhlIGxvd2VyIGJvdW5kIGZvciBhbGwga2V5cyBvZiBhIHNwZWNpZmljIGluZGV4IGluIG9yZGVyLlxuICAgICAqL1xuICAgIG1pbihtaW4pIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5taW4gPSBtaW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnNvciBtYXhcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtYXggLSBTcGVjaWZ5IGEgJG1heCB2YWx1ZSB0byBzcGVjaWZ5IHRoZSBleGNsdXNpdmUgdXBwZXIgYm91bmQgZm9yIGEgc3BlY2lmaWMgaW5kZXggaW4gb3JkZXIgdG8gY29uc3RyYWluIHRoZSByZXN1bHRzIG9mIGZpbmQoKS4gVGhlICRtYXggc3BlY2lmaWVzIHRoZSB1cHBlciBib3VuZCBmb3IgYWxsIGtleXMgb2YgYSBzcGVjaWZpYyBpbmRleCBpbiBvcmRlci5cbiAgICAgKi9cbiAgICBtYXgobWF4KSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIHRoaXMuZmluZE9wdGlvbnMubWF4ID0gbWF4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJzb3IgcmV0dXJuS2V5LlxuICAgICAqIElmIHNldCB0byB0cnVlLCBtb2RpZmllcyB0aGUgY3Vyc29yIHRvIG9ubHkgcmV0dXJuIHRoZSBpbmRleCBmaWVsZCBvciBmaWVsZHMgZm9yIHRoZSByZXN1bHRzIG9mIHRoZSBxdWVyeSwgcmF0aGVyIHRoYW4gZG9jdW1lbnRzLlxuICAgICAqIElmIHNldCB0byB0cnVlIGFuZCB0aGUgcXVlcnkgZG9lcyBub3QgdXNlIGFuIGluZGV4IHRvIHBlcmZvcm0gdGhlIHJlYWQgb3BlcmF0aW9uLCB0aGUgcmV0dXJuZWQgZG9jdW1lbnRzIHdpbGwgbm90IGNvbnRhaW4gYW55IGZpZWxkcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSByZXR1cm5LZXkgdmFsdWUuXG4gICAgICovXG4gICAgcmV0dXJuS2V5KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIHRoaXMuZmluZE9wdGlvbnMucmV0dXJuS2V5ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyB0aGUgb3V0cHV0IG9mIGEgcXVlcnkgYnkgYWRkaW5nIGEgZmllbGQgJHJlY29yZElkIHRvIG1hdGNoaW5nIGRvY3VtZW50cy4gJHJlY29yZElkIGlzIHRoZSBpbnRlcm5hbCBrZXkgd2hpY2ggdW5pcXVlbHkgaWRlbnRpZmllcyBhIGRvY3VtZW50IGluIGEgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSAkc2hvd0Rpc2tMb2Mgb3B0aW9uIGhhcyBub3cgYmVlbiBkZXByZWNhdGVkIGFuZCByZXBsYWNlZCB3aXRoIHRoZSBzaG93UmVjb3JkSWQgZmllbGQuICRzaG93RGlza0xvYyB3aWxsIHN0aWxsIGJlIGFjY2VwdGVkIGZvciBPUF9RVUVSWSBzdHllIGZpbmQuXG4gICAgICovXG4gICAgc2hvd1JlY29yZElkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIHRoaXMuZmluZE9wdGlvbnMuc2hvd1JlY29yZElkID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBxdWVyeSBtb2RpZmllciB0byB0aGUgY3Vyc29yIHF1ZXJ5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBxdWVyeSBtb2RpZmllciAobXVzdCBzdGFydCB3aXRoICQsIHN1Y2ggYXMgJG9yZGVyYnkgZXRjKVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBtb2RpZmllciB2YWx1ZS5cbiAgICAgKi9cbiAgICBhZGRRdWVyeU1vZGlmaWVyKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIGlmIChuYW1lWzBdICE9PSAnJCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYCR7bmFtZX0gaXMgbm90IGEgdmFsaWQgcXVlcnkgbW9kaWZpZXJgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdHJpcCBvZiB0aGUgJFxuICAgICAgICBjb25zdCBmaWVsZCA9IG5hbWUuc3Vic3RyKDEpO1xuICAgICAgICAvLyBOT1RFOiBjb25zaWRlciBzb21lIFRTIG1hZ2ljIGZvciB0aGlzXG4gICAgICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIHRoaXMuZmluZE9wdGlvbnMuY29tbWVudCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXhwbGFpbic6XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5leHBsYWluID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoaW50JzpcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRPcHRpb25zLmhpbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21heCc6XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5tYXggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21heFRpbWVNUyc6XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5tYXhUaW1lTVMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5taW4gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29yZGVyYnknOlxuICAgICAgICAgICAgICAgIHRoaXMuZmluZE9wdGlvbnMuc29ydCA9ICgwLCBzb3J0XzEuZm9ybWF0U29ydCkodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yRmlsdGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXR1cm5LZXknOlxuICAgICAgICAgICAgICAgIHRoaXMuZmluZE9wdGlvbnMucmV0dXJuS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzaG93RGlza0xvYyc6XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5zaG93UmVjb3JkSWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCBxdWVyeSBtb2RpZmllcjogJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb21tZW50IHRvIHRoZSBjdXJzb3IgcXVlcnkgYWxsb3dpbmcgZm9yIHRyYWNraW5nIHRoZSBjb21tZW50IGluIHRoZSBsb2cuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgY29tbWVudCBhdHRhY2hlZCB0byB0aGlzIHF1ZXJ5LlxuICAgICAqL1xuICAgIGNvbW1lbnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5jb21tZW50ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYSBtYXhBd2FpdFRpbWVNUyBvbiBhIHRhaWxpbmcgY3Vyc29yIHF1ZXJ5IHRvIGFsbG93IHRvIGN1c3RvbWl6ZSB0aGUgdGltZW91dCB2YWx1ZSBmb3IgdGhlIG9wdGlvbiBhd2FpdERhdGEgKE9ubHkgc3VwcG9ydGVkIG9uIE1vbmdvREIgMy4yIG9yIGhpZ2hlciwgaWdub3JlZCBvdGhlcndpc2UpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFib3J0aW5nIHRoZSB0YWlsZWQgcXVlcnkuXG4gICAgICovXG4gICAgbWF4QXdhaXRUaW1lTVModmFsdWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IGZvciBtYXhBd2FpdFRpbWVNUyBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgbWF4VGltZU1TIG9uIHRoZSBjdXJzb3IgcXVlcnksIGFsbG93aW5nIGZvciBoYXJkIHRpbWVvdXQgbGltaXRzIG9uIHF1ZXJpZXMgKE9ubHkgc3VwcG9ydGVkIG9uIE1vbmdvREIgMi42IG9yIGhpZ2hlcilcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYWJvcnRpbmcgdGhlIHF1ZXJ5LlxuICAgICAqL1xuICAgIG1heFRpbWVNUyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRocm93SWZJbml0aWFsaXplZCgpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQXJndW1lbnQgZm9yIG1heFRpbWVNUyBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5tYXhUaW1lTVMgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb2plY3Qgc3RhZ2UgdG8gdGhlIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEluIG9yZGVyIHRvIHN0cmljdGx5IHR5cGUgdGhpcyBmdW5jdGlvbiB5b3UgbXVzdCBwcm92aWRlIGFuIGludGVyZmFjZVxuICAgICAqIHRoYXQgcmVwcmVzZW50cyB0aGUgZWZmZWN0IG9mIHlvdXIgcHJvamVjdGlvbiBvbiB0aGUgcmVzdWx0IGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgY2hhaW5pbmcgYSBwcm9qZWN0aW9uIHRvIHlvdXIgY3Vyc29yIGNoYW5nZXMgdGhlIHJldHVybmVkIHR5cGUgdG8gdGhlIGdlbmVyaWNcbiAgICAgKiB7QGxpbmsgRG9jdW1lbnR9IHR5cGUuXG4gICAgICogWW91IHNob3VsZCBzcGVjaWZ5IGEgcGFyYW1ldGVyaXplZCB0eXBlIHRvIGhhdmUgYXNzZXJ0aW9ucyBvbiB5b3VyIGZpbmFsIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBCZXN0IHdheVxuICAgICAqIGNvbnN0IGRvY3M6IEZpbmRDdXJzb3I8eyBhOiBudW1iZXIgfT4gPSBjdXJzb3IucHJvamVjdDx7IGE6IG51bWJlciB9Pih7IF9pZDogMCwgYTogdHJ1ZSB9KTtcbiAgICAgKiAvLyBGbGV4aWJsZSB3YXlcbiAgICAgKiBjb25zdCBkb2NzOiBGaW5kQ3Vyc29yPERvY3VtZW50PiA9IGN1cnNvci5wcm9qZWN0KHsgX2lkOiAwLCBhOiB0cnVlIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKlxuICAgICAqICoqTm90ZSBmb3IgVHlwZXNjcmlwdCBVc2VyczoqKiBhZGRpbmcgYSB0cmFuc2Zvcm0gY2hhbmdlcyB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGl0ZXJhdGlvbiBvZiB0aGlzIGN1cnNvcixcbiAgICAgKiBpdCAqKmRvZXMgbm90KiogcmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgY3Vyc29yLiBUaGlzIG1lYW5zIHdoZW4gY2FsbGluZyBwcm9qZWN0LFxuICAgICAqIHlvdSBzaG91bGQgYWx3YXlzIGFzc2lnbiB0aGUgcmVzdWx0IHRvIGEgbmV3IHZhcmlhYmxlIGluIG9yZGVyIHRvIGdldCBhIGNvcnJlY3RseSB0eXBlZCBjdXJzb3IgdmFyaWFibGUuXG4gICAgICogVGFrZSBub3RlIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGN1cnNvcjogRmluZEN1cnNvcjx7IGE6IG51bWJlcjsgYjogc3RyaW5nIH0+ID0gY29sbC5maW5kKCk7XG4gICAgICogY29uc3QgcHJvamVjdEN1cnNvciA9IGN1cnNvci5wcm9qZWN0PHsgYTogbnVtYmVyIH0+KHsgX2lkOiAwLCBhOiB0cnVlIH0pO1xuICAgICAqIGNvbnN0IGFQcm9wT25seUFycmF5OiB7YTogbnVtYmVyfVtdID0gYXdhaXQgcHJvamVjdEN1cnNvci50b0FycmF5KCk7XG4gICAgICpcbiAgICAgKiAvLyBvciBhbHdheXMgdXNlIGNoYWluaW5nIGFuZCBzYXZlIHRoZSBmaW5hbCBjdXJzb3JcbiAgICAgKlxuICAgICAqIGNvbnN0IGN1cnNvciA9IGNvbGwuZmluZCgpLnByb2plY3Q8eyBhOiBzdHJpbmcgfT4oe1xuICAgICAqICAgX2lkOiAwLFxuICAgICAqICAgYTogeyAkY29udmVydDogeyBpbnB1dDogJyRhJywgdG86ICdzdHJpbmcnIH1cbiAgICAgKiB9fSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHJvamVjdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRocm93SWZJbml0aWFsaXplZCgpO1xuICAgICAgICB0aGlzLmZpbmRPcHRpb25zLnByb2plY3Rpb24gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNvcnQgb3JkZXIgb2YgdGhlIGN1cnNvciBxdWVyeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3J0IC0gVGhlIGtleSBvciBrZXlzIHNldCBmb3IgdGhlIHNvcnQuXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiAtIFRoZSBkaXJlY3Rpb24gb2YgdGhlIHNvcnRpbmcgKDEgb3IgLTEpLlxuICAgICAqL1xuICAgIHNvcnQoc29ydCwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkluaXRpYWxpemVkKCk7XG4gICAgICAgIGlmICh0aGlzLmZpbmRPcHRpb25zLnRhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1RhaWxhYmxlQ3Vyc29yRXJyb3IoJ1RhaWxhYmxlIGN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IHNvcnRpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbmRPcHRpb25zLnNvcnQgPSAoMCwgc29ydF8xLmZvcm1hdFNvcnQpKHNvcnQsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgZGlzayB1c2UgZm9yIGJsb2NraW5nIHNvcnQgb3BlcmF0aW9ucyBleGNlZWRpbmcgMTAwTUIgbWVtb3J5LiAoTW9uZ29EQiAzLjIgb3IgaGlnaGVyKVxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvZmluZC8jZmluZC1jbWQtYWxsb3dkaXNrdXNlIHwgZmluZCBjb21tYW5kIGFsbG93RGlza1VzZSBkb2N1bWVudGF0aW9ufVxuICAgICAqL1xuICAgIGFsbG93RGlza1VzZShhbGxvdyA9IHRydWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmZpbmRPcHRpb25zLnNvcnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcImFsbG93RGlza1VzZVwiIHJlcXVpcmVzIGEgc29ydCBzcGVjaWZpY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXMgb2YgNi4wIHRoZSBkZWZhdWx0IGlzIHRydWUuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIGdldCBiYWNrIHRvIHRoZSBvbGQgYmVoYXZpb3IuXG4gICAgICAgIGlmICghYWxsb3cpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZE9wdGlvbnMuYWxsb3dEaXNrVXNlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbmRPcHRpb25zLmFsbG93RGlza1VzZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbGxhdGlvbiBvcHRpb25zIGZvciB0aGUgY3Vyc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGN1cnNvciBjb2xsYXRpb24gb3B0aW9ucyAoTW9uZ29EQiAzLjQgb3IgaGlnaGVyKSBzZXR0aW5ncyBmb3IgdXBkYXRlIG9wZXJhdGlvbiAoc2VlIDMuNCBkb2N1bWVudGF0aW9uIGZvciBhdmFpbGFibGUgZmllbGRzKS5cbiAgICAgKi9cbiAgICBjb2xsYXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5jb2xsYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbGltaXQgZm9yIHRoZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgbGltaXQgZm9yIHRoZSBjdXJzb3IgcXVlcnkuXG4gICAgICovXG4gICAgbGltaXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuZmluZE9wdGlvbnMudGFpbGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVGFpbGFibGVDdXJzb3JFcnJvcignVGFpbGFibGUgY3Vyc29yIGRvZXMgbm90IHN1cHBvcnQgbGltaXQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3BlcmF0aW9uIFwibGltaXRcIiByZXF1aXJlcyBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5saW1pdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBza2lwIGZvciB0aGUgY3Vyc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHNraXAgZm9yIHRoZSBjdXJzb3IgcXVlcnkuXG4gICAgICovXG4gICAgc2tpcCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRocm93SWZJbml0aWFsaXplZCgpO1xuICAgICAgICBpZiAodGhpcy5maW5kT3B0aW9ucy50YWlsYWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29UYWlsYWJsZUN1cnNvckVycm9yKCdUYWlsYWJsZSBjdXJzb3IgZG9lcyBub3Qgc3VwcG9ydCBza2lwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wZXJhdGlvbiBcInNraXBcIiByZXF1aXJlcyBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5kT3B0aW9ucy5za2lwID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluZEN1cnNvciA9IEZpbmRDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5kX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session,\n            signal: this.signal\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDRCQUE0QixtQkFBTyxDQUFDLCtJQUFpQztBQUNyRSwyQkFBMkIsbUJBQU8sQ0FBQyw2SUFBZ0M7QUFDbkUsMEJBQTBCLG1CQUFPLENBQUMsMkhBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGN1cnNvclxcbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGxpc3RfY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBMaXN0Q29sbGVjdGlvbnNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoZGIsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYi5jbGllbnQsIGRiLnMubmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBkYjtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RDb2xsZWN0aW9uc0N1cnNvcih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGxpc3RfY29sbGVjdGlvbnNfMS5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24odGhpcy5wYXJlbnQsIHRoaXMuZmlsdGVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbiwgdGhpcy50aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIHJldHVybiB7IHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc0N1cnNvciA9IExpc3RDb2xsZWN0aW9uc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9pbmRleGVzX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsNEJBQTRCLG1CQUFPLENBQUMsK0lBQWlDO0FBQ3JFLGtCQUFrQixtQkFBTyxDQUFDLDJIQUF1QjtBQUNqRCwwQkFBMEIsbUJBQU8sQ0FBQywySEFBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjdXJzb3JcXGxpc3RfaW5kZXhlc19jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgaW5kZXhlc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvaW5kZXhlc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RJbmRleGVzQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5jbGllbnQsIGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RJbmRleGVzQ3Vyc29yKHRoaXMucGFyZW50LCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBpbmRleGVzXzEuTGlzdEluZGV4ZXNPcGVyYXRpb24odGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5wYXJlbnQuY2xpZW50LCBvcGVyYXRpb24sIHRoaXMudGltZW91dENvbnRleHQpO1xuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0SW5kZXhlc0N1cnNvciA9IExpc3RJbmRleGVzQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!*************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9zZWFyY2hfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLDZCQUE2QixtQkFBTyxDQUFDLGlJQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkJBQTJCLG9CQUFvQjtBQUNqRSwyQ0FBMkMsd0JBQXdCLE9BQU8sc0JBQXNCLFFBQVE7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxjdXJzb3JcXGxpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0U2VhcmNoSW5kZXhlc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGFnZ3JlZ2F0aW9uX2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWdncmVnYXRpb25fY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RTZWFyY2hJbmRleGVzQ3Vyc29yIGV4dGVuZHMgYWdncmVnYXRpb25fY3Vyc29yXzEuQWdncmVnYXRpb25DdXJzb3Ige1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGZ1bGxOYW1lc3BhY2U6IG5zLCBjbGllbnQgfSwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gbmFtZSA9PSBudWxsID8gW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7fSB9XSA6IFt7ICRsaXN0U2VhcmNoSW5kZXhlczogeyBuYW1lIH0gfV07XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbnMsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X3NlYXJjaF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunCommandCursor = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param batchSize - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /**\n     * Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document\n     */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference,\n            responseType: responses_1.CursorResponse\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation, this.timeoutContext);\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return await (0, execute_operation_1.executeOperation)(this.client, getMoreOperation, this.timeoutContext);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvcnVuX2NvbW1hbmRfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixvQkFBb0IsbUJBQU8sQ0FBQywrSUFBaUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsNEJBQTRCLG1CQUFPLENBQUMsK0lBQWlDO0FBQ3JFLG1CQUFtQixtQkFBTyxDQUFDLDZIQUF3QjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyxtSUFBMkI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMsMkhBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxZQUFZO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGN1cnNvclxccnVuX2NvbW1hbmRfY3Vyc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SdW5Db21tYW5kQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgcmVzcG9uc2VzXzEgPSByZXF1aXJlKFwiLi4vY21hcC93aXJlX3Byb3RvY29sL3Jlc3BvbnNlc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBnZXRfbW9yZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZ2V0X21vcmVcIik7XG5jb25zdCBydW5fY29tbWFuZF8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvcnVuX2NvbW1hbmRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgUnVuQ29tbWFuZEN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUuY29tbWVudGAgZmllbGRcbiAgICAgKiBAcGFyYW0gY29tbWVudCAtIGFueSBCU09OIHZhbHVlXG4gICAgICovXG4gICAgc2V0Q29tbWVudChjb21tZW50KSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUubWF4VGltZU1TYCBmaWVsZC4gT25seSB2YWxpZCB3aGVuIGN1cnNvciBpcyB0YWlsYWJsZSBhd2FpdFxuICAgICAqIEBwYXJhbSBtYXhUaW1lTVMgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBuZXcgZGF0YVxuICAgICAqL1xuICAgIHNldE1heFRpbWVNUyhtYXhUaW1lTVMpIHtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9IG1heFRpbWVNUztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBgZ2V0TW9yZS5iYXRjaFNpemVgIGZpZWxkXG4gICAgICogQHBhcmFtIGJhdGNoU2l6ZSAtIHRoZSBudW1iZXIgZG9jdW1lbnRzIHRvIHJldHVybiBpbiB0aGUgYG5leHRCYXRjaGBcbiAgICAgKi9cbiAgICBzZXRCYXRjaFNpemUoYmF0Y2hTaXplKSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuYmF0Y2hTaXplID0gYmF0Y2hTaXplO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ0Nsb25lIG5vdCBzdXBwb3J0ZWQsIGNyZWF0ZSBhIG5ldyBjdXJzb3Igd2l0aCBkYi5ydW5DdXJzb3JDb21tYW5kJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogcmVhZENvbmNlcm4gbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICB3aXRoUmVhZENvbmNlcm4oXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdSdW5Db21tYW5kQ3Vyc29yIGRvZXMgbm90IHN1cHBvcnQgcmVhZENvbmNlcm4gaXQgbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBiZWluZyBydW4nKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiB2YXJpb3VzIGN1cnNvciBmbGFncyBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIGFkZEN1cnNvckZsYWcoXywgX18pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignUnVuQ29tbWFuZEN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IGN1cnNvciBmbGFncywgdGhleSBtdXN0IGJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIGJlaW5nIHJ1bicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogbWF4VGltZU1TIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50XG4gICAgICovXG4gICAgbWF4VGltZU1TKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignbWF4VGltZU1TIG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgY29tbWFuZCBkb2N1bWVudCBkaXJlY3RseSwgdG8gY29uZmlndXJlIGdldE1vcmUubWF4VGltZU1TIHVzZSBjdXJzb3Iuc2V0TWF4VGltZU1TKCknKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiBiYXRjaFNpemUgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBiYXRjaFNpemUoXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdiYXRjaFNpemUgbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBjb21tYW5kIGRvY3VtZW50IGRpcmVjdGx5LCB0byBjb25maWd1cmUgZ2V0TW9yZS5iYXRjaFNpemUgdXNlIGN1cnNvci5zZXRCYXRjaFNpemUoKScpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoZGIsIGNvbW1hbmQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihkYi5jbGllbnQsICgwLCB1dGlsc18xLm5zKShkYi5uYW1lc3BhY2UpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IE9iamVjdC5mcmVlemUoeyAuLi5jb21tYW5kIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgcnVuX2NvbW1hbmRfMS5SdW5Db21tYW5kT3BlcmF0aW9uKHRoaXMuZGIsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLmN1cnNvck9wdGlvbnMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6IHJlc3BvbnNlc18xLkN1cnNvclJlc3BvbnNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBvcGVyYXRpb24sIHRoaXMudGltZW91dENvbnRleHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLFxuICAgICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgICAgIHJlc3BvbnNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBnZXRNb3JlKF9iYXRjaFNpemUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgZ2V0TW9yZU9wZXJhdGlvbiA9IG5ldyBnZXRfbW9yZV8xLkdldE1vcmVPcGVyYXRpb24odGhpcy5uYW1lc3BhY2UsIHRoaXMuaWQsIHRoaXMuc2VydmVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uOiB0aGlzLnNlc3Npb24sXG4gICAgICAgICAgICAuLi50aGlzLmdldE1vcmVPcHRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIGdldE1vcmVPcGVyYXRpb24sIHRoaXMudGltZW91dENvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQ29tbWFuZEN1cnNvciA9IFJ1bkNvbW1hbmRDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5fY29tbWFuZF9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites',\n    'timeoutMS'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    get timeoutMS() {\n        return this.s.options?.timeoutMS;\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, (0, utils_1.resolveOptions)(undefined, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            timeoutMS: options?.timeoutMS ?? this.timeoutMS,\n            session: options?.session,\n            readPreference: options?.readPreference,\n            signal: options?.signal\n        })));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database.\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, (0, utils_1.resolveOptions)(undefined, {\n            ...options,\n            new_collection: true,\n            readPreference: read_preference_1.ReadPreference.primary\n        })));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, name, indexSpec, options));\n        return indexes[0];\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexInformation(name, options) {\n        return await this.collection(name).indexInformation((0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.aws4 = void 0;\nexports.getKerberos = getKerberos;\nexports.getZstdLibrary = getZstdLibrary;\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nexports.getGcpMetadata = getGcpMetadata;\nexports.getSnappy = getSnappy;\nexports.getSocks = getSocks;\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nfunction getKerberos() {\n    let kerberos;\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        kerberos = __webpack_require__(/*! kerberos */ \"?18c5\");\n    }\n    catch (error) {\n        kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication', { cause: error, dependencyName: 'kerberos' }));\n    }\n    return kerberos;\n}\nfunction getZstdLibrary() {\n    let ZStandard;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        ZStandard = __webpack_require__(/*! @mongodb-js/zstd */ \"?9645\");\n    }\n    catch (error) {\n        ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression', { cause: error, dependencyName: 'zstd' }));\n    }\n    return ZStandard;\n}\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = __webpack_require__(/*! @aws-sdk/credential-providers */ \"?5cb5\");\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.', { cause: error, dependencyName: '@aws-sdk/credential-providers' }));\n    }\n}\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = __webpack_require__(/*! gcp-metadata */ \"?401c\");\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.', { cause: error, dependencyName: 'gcp-metadata' }));\n    }\n}\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = __webpack_require__(/*! snappy */ \"?7442\");\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause: error, dependencyName: 'snappy' });\n        return { kModuleError };\n    }\n}\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = __webpack_require__(/*! socks */ \"?a3f4\");\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause: error, dependencyName: 'socks' });\n        return { kModuleError };\n    }\n}\nexports.aws4 = loadAws4();\nfunction loadAws4() {\n    let aws4;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        aws4 = __webpack_require__(/*! aws4 */ \"(rsc)/../../node_modules/.pnpm/aws4@1.13.2/node_modules/aws4/aws4.js\");\n    }\n    catch (error) {\n        aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication', { cause: error, dependencyName: 'aws4' }));\n    }\n    return aws4;\n}\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        mongodbClientEncryption = __webpack_require__(/*! mongodb-client-encryption */ \"?088c\");\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause: error, dependencyName: 'mongodb-client-encryption' });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\n//# sourceMappingURL=deps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/encrypter.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/encrypter.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this.internalClient = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        let internalClient = this.internalClient;\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this.internalClient = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        const internalClient = this.internalClient;\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        let error;\n        try {\n            await this.autoEncrypter.teardown(force);\n        }\n        catch (autoEncrypterError) {\n            error = autoEncrypterError;\n        }\n        const internalClient = this.internalClient;\n        if (internalClient != null && client !== internalClient) {\n            return await internalClient.close(force);\n        }\n        if (error != null) {\n            throw error;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project', {\n                cause: mongodbClientEncryption['kModuleError'],\n                dependencyName: 'mongodb-client-encryption'\n            });\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9lbmNyeXB0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3Qix5QkFBeUIsbUJBQU8sQ0FBQyxnS0FBeUM7QUFDMUUsb0JBQW9CLG1CQUFPLENBQUMsd0dBQWE7QUFDekMsZUFBZSxtQkFBTyxDQUFDLDhGQUFRO0FBQy9CLGdCQUFnQixtQkFBTyxDQUFDLGdHQUFTO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLDhHQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxlbmNyeXB0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVuY3J5cHRlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgYXV0b19lbmNyeXB0ZXJfMSA9IHJlcXVpcmUoXCIuL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vYXV0b19lbmNyeXB0ZXJcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuL2RlcHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCBtb25nb19jbGllbnRfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2NsaWVudFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEVuY3J5cHRlciB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCB1cmksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmF1dG9FbmNyeXB0aW9uICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwiYXV0b0VuY3J5cHRpb25cIiBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluaXRpYWxpemUgdG8gbnVsbCwgaWYgd2UgY2FsbCBnZXRJbnRlcm5hbENsaWVudCwgd2UgbWF5IHNldCB0aGlzIGl0IGlzIGltcG9ydGFudCB0byBub3Qgb3ZlcndyaXRlIHRob3NlIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAgICB0aGlzLmludGVybmFsQ2xpZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ieXBhc3NBdXRvRW5jcnlwdGlvbiA9ICEhb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5ieXBhc3NBdXRvRW5jcnlwdGlvbjtcbiAgICAgICAgdGhpcy5uZWVkc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4UG9vbFNpemUgPT09IDAgJiYgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmtleVZhdWx0Q2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ua2V5VmF1bHRDbGllbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9IHRoaXMuZ2V0SW50ZXJuYWxDbGllbnQoY2xpZW50LCB1cmksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ5cGFzc0F1dG9FbmNyeXB0aW9uKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLm1ldGFkYXRhQ2xpZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMubWF4UG9vbFNpemUgPT09IDApIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ubWV0YWRhdGFDbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLm1ldGFkYXRhQ2xpZW50ID0gdGhpcy5nZXRJbnRlcm5hbENsaWVudChjbGllbnQsIHVyaSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucHJveHlIb3N0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLnByb3h5T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwcm94eUhvc3Q6IG9wdGlvbnMucHJveHlIb3N0LFxuICAgICAgICAgICAgICAgIHByb3h5UG9ydDogb3B0aW9ucy5wcm94eVBvcnQsXG4gICAgICAgICAgICAgICAgcHJveHlVc2VybmFtZTogb3B0aW9ucy5wcm94eVVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHByb3h5UGFzc3dvcmQ6IG9wdGlvbnMucHJveHlQYXNzd29yZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF1dG9FbmNyeXB0ZXIgPSBuZXcgYXV0b19lbmNyeXB0ZXJfMS5BdXRvRW5jcnlwdGVyKGNsaWVudCwgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbik7XG4gICAgfVxuICAgIGdldEludGVybmFsQ2xpZW50KGNsaWVudCwgdXJpLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBpbnRlcm5hbENsaWVudCA9IHRoaXMuaW50ZXJuYWxDbGllbnQ7XG4gICAgICAgIGlmIChpbnRlcm5hbENsaWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRPcHRpb25zID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucyksXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvcHRpb25zKVxuICAgICAgICAgICAgXSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ2F1dG9FbmNyeXB0aW9uJywgJ21pblBvb2xTaXplJywgJ3NlcnZlcnMnLCAnY2FzZVRyYW5zbGF0ZScsICdkYk5hbWUnXS5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LnNldChjbG9uZWRPcHRpb25zLCBrZXksIFJlZmxlY3QuZ2V0KG9wdGlvbnMsIGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xvbmVkT3B0aW9ucy5taW5Qb29sU2l6ZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbENsaWVudCA9IG5ldyBtb25nb19jbGllbnRfMS5Nb25nb0NsaWVudCh1cmksIGNsb25lZE9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbENsaWVudCA9IGludGVybmFsQ2xpZW50O1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgY29uc3RhbnRzXzEuTU9OR09fQ0xJRU5UX0VWRU5UUykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgY2xpZW50Lmxpc3RlbmVycyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsQ2xpZW50Lm9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsaWVudC5vbignbmV3TGlzdGVuZXInLCAoZXZlbnROYW1lLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIGludGVybmFsQ2xpZW50Py5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5uZWVkc0Nvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcm5hbENsaWVudDtcbiAgICB9XG4gICAgYXN5bmMgY29ubmVjdEludGVybmFsQ2xpZW50KCkge1xuICAgICAgICBjb25zdCBpbnRlcm5hbENsaWVudCA9IHRoaXMuaW50ZXJuYWxDbGllbnQ7XG4gICAgICAgIGlmICh0aGlzLm5lZWRzQ29ubmVjdGluZyAmJiBpbnRlcm5hbENsaWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5lZWRzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXdhaXQgaW50ZXJuYWxDbGllbnQuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlQ2FsbGJhY2soY2xpZW50LCBmb3JjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgKDAsIHV0aWxfMS5jYWxsYmFja2lmeSkodGhpcy5jbG9zZS5iaW5kKHRoaXMpKShjbGllbnQsIGZvcmNlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGFzeW5jIGNsb3NlKGNsaWVudCwgZm9yY2UpIHtcbiAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hdXRvRW5jcnlwdGVyLnRlYXJkb3duKGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoYXV0b0VuY3J5cHRlckVycm9yKSB7XG4gICAgICAgICAgICBlcnJvciA9IGF1dG9FbmNyeXB0ZXJFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlcm5hbENsaWVudCA9IHRoaXMuaW50ZXJuYWxDbGllbnQ7XG4gICAgICAgIGlmIChpbnRlcm5hbENsaWVudCAhPSBudWxsICYmIGNsaWVudCAhPT0gaW50ZXJuYWxDbGllbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBpbnRlcm5hbENsaWVudC5jbG9zZShmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjaGVja0Zvck1vbmdvQ3J5cHQoKSB7XG4gICAgICAgIGNvbnN0IG1vbmdvZGJDbGllbnRFbmNyeXB0aW9uID0gKDAsIGRlcHNfMS5nZXRNb25nb0RCQ2xpZW50RW5jcnlwdGlvbikoKTtcbiAgICAgICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIG1vbmdvZGJDbGllbnRFbmNyeXB0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ0F1dG8tZW5jcnlwdGlvbiByZXF1ZXN0ZWQsIGJ1dCB0aGUgbW9kdWxlIGlzIG5vdCBpbnN0YWxsZWQuICcgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgYWRkIGBtb25nb2RiLWNsaWVudC1lbmNyeXB0aW9uYCBhcyBhIGRlcGVuZGVuY3kgb2YgeW91ciBwcm9qZWN0Jywge1xuICAgICAgICAgICAgICAgIGNhdXNlOiBtb25nb2RiQ2xpZW50RW5jcnlwdGlvblsna01vZHVsZUVycm9yJ10sXG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeU5hbWU6ICdtb25nb2RiLWNsaWVudC1lbmNyeXB0aW9uJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkVuY3J5cHRlciA9IEVuY3J5cHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY3J5cHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoOperationTimeoutError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteCursorError = exports.MongoClientBulkWriteError = exports.MongoGCPError = exports.MongoAzureError = exports.MongoOIDCError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoStalePrimaryError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nexports.isRetryableWriteError = isRetryableWriteError;\nexports.isRetryableReadError = isRetryableReadError;\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nexports.isResumableError = isResumableError;\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    AuthenticationFailed: 18,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    // WriteConcernTimeout is WriteConcernFailed on pre-8.1 servers\n    WriteConcernTimeout: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391,\n    ReadConcernMajorityNotAvailableYet: 134\n});\n// From spec https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/change-streams/change-streams.md#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    PoolRequstedRetry: 'PoolRequstedRetry',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    get errorLabels() {\n        return Array.from(this.errorLabelSet);\n    }\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        /** @internal */\n        this.errorLabelSet = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n            ? e.message\n            : 'empty error message';\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this.errorLabelSet.has(label);\n    }\n    addErrorLabel(label) {\n        this.errorLabelSet.add(label);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            for (const label of message.errorLabels)\n                this.addErrorLabel(label);\n        }\n        this.errorResponse = message;\n        for (const name in message) {\n            if (name !== 'errorLabels' &&\n                name !== 'errmsg' &&\n                name !== 'message' &&\n                name !== 'errorResponse') {\n                this[name] = message[name];\n            }\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state.\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a primary server is marked stale, never directly thrown\n *\n * @public\n * @category Error\n */\nclass MongoStalePrimaryError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoStalePrimaryError';\n    }\n}\nexports.MongoStalePrimaryError = MongoStalePrimaryError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via OIDC callbacks, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoOIDCError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoOIDCError';\n    }\n}\nexports.MongoOIDCError = MongoOIDCError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * A error generated when the user attempts to authenticate\n * via GCP, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoGCPError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGCPError';\n    }\n}\nexports.MongoGCPError = MongoGCPError;\n/**\n * An error indicating that an error occurred when executing the bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteError extends MongoServerError {\n    /**\n     * Initialize the client bulk write error.\n     * @param message - The error message.\n     */\n    constructor(message) {\n        super(message);\n        this.writeConcernErrors = [];\n        this.writeErrors = new Map();\n    }\n    get name() {\n        return 'MongoClientBulkWriteError';\n    }\n}\nexports.MongoClientBulkWriteError = MongoClientBulkWriteError;\n/**\n * An error indicating that an error occurred when processing bulk write results.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteCursorError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoClientBulkWriteCursorError';\n    }\n}\nexports.MongoClientBulkWriteCursorError = MongoClientBulkWriteCursorError;\n/**\n * An error indicating that an error occurred on the client when executing a client bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteExecutionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoClientBulkWriteExecutionError';\n    }\n}\nexports.MongoClientBulkWriteExecutionError = MongoClientBulkWriteExecutionError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * @public\n * @category Error\n *\n * The `MongoOperationTimeoutError` class represents an error that occurs when an operation could not be completed within the specified `timeoutMS`.\n * It is generated by the driver in support of the \"client side operation timeout\" feature so inherits from `MongoDriverError`.\n * When `timeoutMS` is enabled `MongoServerError`s relating to `MaxTimeExpired` errors will be converted to `MongoOperationTimeoutError`\n *\n * @example\n * ```ts\n * try {\n *   await blogs.insertOne(blogPost, { timeoutMS: 60_000 })\n * } catch (error) {\n *   if (error instanceof MongoOperationTimeoutError) {\n *     console.log(`Oh no! writer's block!`, error);\n *   }\n * }\n * ```\n */\nclass MongoOperationTimeoutError extends MongoDriverError {\n    get name() {\n        return 'MongoOperationTimeoutError';\n    }\n}\nexports.MongoOperationTimeoutError = MongoOperationTimeoutError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        this.beforeHandshake = !!options?.beforeHandshake;\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this.dependencyName = options.dependencyName;\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(result) {\n        super({ ...result.writeConcernError, ...result });\n        this.errInfo = result.writeConcernError.errInfo;\n        this.result = result;\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion, serverType) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        if (serverType === 'Mongos' && maxWireVersion < 9) {\n            // use original top-level code from server response\n            return RETRYABLE_WRITE_ERROR_CODES.has(error.result.code ?? 0);\n        }\n        const code = error.result.writeConcernError.code ?? Number(error.code);\n        return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);\n    }\n    if (error instanceof MongoError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nfunction isRetryableWriteError(error) {\n    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||\n        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));\n}\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExplainableCursor = exports.Explain = exports.ExplainVerbosity = void 0;\nexports.validateExplainTimeoutOptions = validateExplainTimeoutOptions;\nexports.decorateWithExplain = decorateWithExplain;\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity, maxTimeMS) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n        this.maxTimeMS = maxTimeMS;\n    }\n    static fromOptions({ explain } = {}) {\n        if (explain == null)\n            return;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        const { verbosity, maxTimeMS } = explain;\n        return new Explain(verbosity, maxTimeMS);\n    }\n}\nexports.Explain = Explain;\nfunction validateExplainTimeoutOptions(options, explain) {\n    const { maxTimeMS, timeoutMS } = options;\n    if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n        throw new error_1.MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n    }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    const { verbosity, maxTimeMS } = explain;\n    const baseCommand = { explain: command, verbosity };\n    if (typeof maxTimeMS === 'number') {\n        baseCommand.maxTimeMS = maxTimeMS;\n    }\n    return baseCommand;\n}\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nclass ExplainableCursor extends abstract_cursor_1.AbstractCursor {\n    resolveExplainTimeoutOptions(verbosity, options) {\n        let explain;\n        let timeout;\n        if (verbosity == null && options == null) {\n            explain = undefined;\n            timeout = undefined;\n        }\n        else if (verbosity != null && options == null) {\n            explain =\n                typeof verbosity !== 'object'\n                    ? verbosity\n                    : 'verbosity' in verbosity\n                        ? verbosity\n                        : undefined;\n            timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n        }\n        else {\n            // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n            explain = verbosity;\n            timeout = options;\n        }\n        return { timeout, explain };\n    }\n}\nexports.ExplainableCursor = ExplainableCursor;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9leHBsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLGVBQWUsR0FBRyx3QkFBd0I7QUFDdEUscUNBQXFDO0FBQ3JDLDJCQUEyQjtBQUMzQiwwQkFBMEIsbUJBQU8sQ0FBQyxrSUFBMEI7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsZ0dBQVM7QUFDakM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVSxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXGV4cGxhaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cGxhaW5hYmxlQ3Vyc29yID0gZXhwb3J0cy5FeHBsYWluID0gZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5ID0gdm9pZCAwO1xuZXhwb3J0cy52YWxpZGF0ZUV4cGxhaW5UaW1lb3V0T3B0aW9ucyA9IHZhbGlkYXRlRXhwbGFpblRpbWVvdXRPcHRpb25zO1xuZXhwb3J0cy5kZWNvcmF0ZVdpdGhFeHBsYWluID0gZGVjb3JhdGVXaXRoRXhwbGFpbjtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vY3Vyc29yL2Fic3RyYWN0X2N1cnNvclwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkV4cGxhaW5WZXJib3NpdHkgPSBPYmplY3QuZnJlZXplKHtcbiAgICBxdWVyeVBsYW5uZXI6ICdxdWVyeVBsYW5uZXInLFxuICAgIHF1ZXJ5UGxhbm5lckV4dGVuZGVkOiAncXVlcnlQbGFubmVyRXh0ZW5kZWQnLFxuICAgIGV4ZWN1dGlvblN0YXRzOiAnZXhlY3V0aW9uU3RhdHMnLFxuICAgIGFsbFBsYW5zRXhlY3V0aW9uOiAnYWxsUGxhbnNFeGVjdXRpb24nXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEV4cGxhaW4ge1xuICAgIGNvbnN0cnVjdG9yKHZlcmJvc2l0eSwgbWF4VGltZU1TKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyYm9zaXR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkuYWxsUGxhbnNFeGVjdXRpb25cbiAgICAgICAgICAgICAgICA6IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5xdWVyeVBsYW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFRpbWVNUyA9IG1heFRpbWVNUztcbiAgICB9XG4gICAgc3RhdGljIGZyb21PcHRpb25zKHsgZXhwbGFpbiB9ID0ge30pIHtcbiAgICAgICAgaWYgKGV4cGxhaW4gPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBleHBsYWluID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGV4cGxhaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cGxhaW4oZXhwbGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2ZXJib3NpdHksIG1heFRpbWVNUyB9ID0gZXhwbGFpbjtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYWluKHZlcmJvc2l0eSwgbWF4VGltZU1TKTtcbiAgICB9XG59XG5leHBvcnRzLkV4cGxhaW4gPSBFeHBsYWluO1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsYWluVGltZW91dE9wdGlvbnMob3B0aW9ucywgZXhwbGFpbikge1xuICAgIGNvbnN0IHsgbWF4VGltZU1TLCB0aW1lb3V0TVMgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHRpbWVvdXRNUyAhPSBudWxsICYmIChtYXhUaW1lTVMgIT0gbnVsbCB8fCBleHBsYWluPy5tYXhUaW1lTVMgIT0gbnVsbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignQ2Fubm90IHVzZSBtYXhUaW1lTVMgd2l0aCB0aW1lb3V0TVMgZm9yIGV4cGxhaW4gY29tbWFuZHMuJyk7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBsaWVzIGFuIGV4cGxhaW4gdG8gYSBnaXZlbiBjb21tYW5kLlxuICogQGludGVybmFsXG4gKlxuICogQHBhcmFtIGNvbW1hbmQgLSB0aGUgY29tbWFuZCBvbiB3aGljaCB0byBhcHBseSB0aGUgZXhwbGFpblxuICogQHBhcmFtIG9wdGlvbnMgLSB0aGUgb3B0aW9ucyBjb250YWluaW5nIHRoZSBleHBsYWluIHZlcmJvc2l0eVxuICovXG5mdW5jdGlvbiBkZWNvcmF0ZVdpdGhFeHBsYWluKGNvbW1hbmQsIGV4cGxhaW4pIHtcbiAgICBjb25zdCB7IHZlcmJvc2l0eSwgbWF4VGltZU1TIH0gPSBleHBsYWluO1xuICAgIGNvbnN0IGJhc2VDb21tYW5kID0geyBleHBsYWluOiBjb21tYW5kLCB2ZXJib3NpdHkgfTtcbiAgICBpZiAodHlwZW9mIG1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYmFzZUNvbW1hbmQubWF4VGltZU1TID0gbWF4VGltZU1TO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZUNvbW1hbmQ7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBBIGJhc2UgY2xhc3MgZm9yIGFueSBjdXJzb3JzIHRoYXQgaGF2ZSBgZXhwbGFpbigpYCBtZXRob2RzLlxuICovXG5jbGFzcyBFeHBsYWluYWJsZUN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICByZXNvbHZlRXhwbGFpblRpbWVvdXRPcHRpb25zKHZlcmJvc2l0eSwgb3B0aW9ucykge1xuICAgICAgICBsZXQgZXhwbGFpbjtcbiAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgIGlmICh2ZXJib3NpdHkgPT0gbnVsbCAmJiBvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIGV4cGxhaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZlcmJvc2l0eSAhPSBudWxsICYmIG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgZXhwbGFpbiA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIHZlcmJvc2l0eSAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgPyB2ZXJib3NpdHlcbiAgICAgICAgICAgICAgICAgICAgOiAndmVyYm9zaXR5JyBpbiB2ZXJib3NpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0eXBlb2YgdmVyYm9zaXR5ID09PSAnb2JqZWN0JyAmJiAndGltZW91dE1TJyBpbiB2ZXJib3NpdHkgPyB2ZXJib3NpdHkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGlzbid0IHNtYXJ0IGVub3VnaCB0byBkZXRlcm1pbmUgdGhhdCBpZiBib3RoIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCB0aGUgZmlyc3QgaXMgZXhwbGFpbiBvcHRpb25zXG4gICAgICAgICAgICBleHBsYWluID0gdmVyYm9zaXR5O1xuICAgICAgICAgICAgdGltZW91dCA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdGltZW91dCwgZXhwbGFpbiB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwbGFpbmFibGVDdXJzb3IgPSBFeHBsYWluYWJsZUN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/download.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/download.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst abstract_cursor_1 = __webpack_require__(/*! ../cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference,\n            timeoutContext: options?.timeoutMS != null\n                ? new timeout_1.CSOTTimeoutContext({ timeoutMS: options.timeoutMS, serverSelectionTimeoutMS: 0 })\n                : undefined\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        const remainingTimeMS = this.s.timeoutContext?.getRemainingTimeMSOrThrow();\n        await this.s.cursor?.close({ timeoutMS: remainingTimeMS });\n    }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(undefined, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        let remainingTimeMS;\n        try {\n            remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.s.cursor = stream.s.chunks\n            .find(filter, {\n            timeoutMode: stream.s.options.timeoutMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n            timeoutMS: remainingTimeMS\n        })\n            .sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    let remainingTimeMS;\n    try {\n        remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n    }\n    catch (error) {\n        if (!stream.destroyed)\n            stream.destroy(error);\n        return;\n    }\n    findOneOptions.timeoutMS = remainingTimeMS;\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/index.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.setMaxListeners(0);\n        const privateOptions = (0, utils_1.resolveOptions)(db, {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        });\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            timeoutMS: this.s.options.timeoutMS,\n            ...options\n        });\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            timeoutMS: this.s.options.timeoutMS,\n            ...options,\n            id\n        });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, { timeoutMS: this.s.options.timeoutMS, ...options });\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id, options) {\n        const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);\n        let timeoutContext = undefined;\n        if (timeoutMS) {\n            timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS\n            });\n        }\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id }, { timeoutMS: timeoutContext?.remainingTimeMS });\n        const remainingTimeMS = timeoutContext?.remainingTimeMS;\n        if (remainingTimeMS != null && remainingTimeMS <= 0)\n            throw new error_1.MongoOperationTimeoutError(`Timed out after ${timeoutMS}ms`);\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id }, { timeoutMS: remainingTimeMS });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { timeoutMS: this.s.options.timeoutMS, ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename, options) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update, options);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop(options) {\n        const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);\n        let timeoutContext = undefined;\n        if (timeoutMS) {\n            timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS\n            });\n        }\n        if (timeoutContext) {\n            await this.s._filesCollection.drop({ timeoutMS: timeoutContext.remainingTimeMS });\n            const remainingTimeMS = timeoutContext.getRemainingTimeMSOrThrow(`Timed out after ${timeoutMS}ms`);\n            await this.s._chunksCollection.drop({ timeoutMS: remainingTimeMS });\n        }\n        else {\n            await this.s._filesCollection.drop();\n            await this.s._chunksCollection.drop();\n        }\n    }\n}\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/upload.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/upload.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ../cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (options.timeoutMS != null)\n            this.timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS: options.timeoutMS,\n                serverSelectionTimeoutMS: (0, utils_1.resolveTimeoutOptions)(this.bucket.s.db.client, {})\n                    .serverSelectionTimeoutMS\n            });\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n                callback();\n            }, error => {\n                if (error instanceof error_1.MongoOperationTimeoutError) {\n                    return handleError(this, error, callback);\n                }\n                (0, utils_1.squashError)(error);\n                callback();\n            });\n        }\n        else {\n            return process.nextTick(callback);\n        }\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        const remainingTimeMS = this.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${this.timeoutContext?.timeoutMS}ms`);\n        await this.chunks.deleteMany({ files_id: this.id }, { timeoutMS: remainingTimeMS });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let remainingTimeMS;\n    remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    let indexes;\n    try {\n        indexes = await stream.chunks\n            .listIndexes({\n            timeoutMode: remainingTimeMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n            timeoutMS: remainingTimeMS\n        })\n            .toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true,\n            timeoutMS: remainingTimeMS\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n        if (remainingTimeMS != null && remainingTimeMS <= 0) {\n            return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n        }\n        stream.files\n            .insertOne(gridFSFile, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n            .then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => {\n            return handleError(stream, error, callback);\n        });\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    let remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    const doc = await stream.files.findOne({}, {\n        projection: { _id: 1 },\n        timeoutMS: remainingTimeMS\n    });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    const listIndexesOptions = {\n        timeoutMode: remainingTimeMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n        timeoutMS: remainingTimeMS\n    };\n    try {\n        indexes = await stream.files.listIndexes(listIndexesOptions).toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n        await stream.files.createIndex(index, { background: false, timeoutMS: remainingTimeMS });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n            if (remainingTimeMS != null && remainingTimeMS <= 0) {\n                return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n            }\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks\n                .insertOne(doc, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n                .then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => {\n                return handleError(stream, error, callback);\n            });\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n    if (remainingTimeMS != null && remainingTimeMS <= 0) {\n        return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n    }\n    ++stream.state.outstandingRequests;\n    stream.chunks\n        .insertOne(doc, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n        .then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => {\n        return handleError(stream, error, callback);\n    });\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/index.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoOperationTimeoutError = exports.MongoOIDCError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoGCPError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteError = exports.MongoClientBulkWriteCursorError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.SeverityLevel = exports.MongoLoggableComponent = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CursorTimeoutMode = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.ExplainableCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.configureExplicitResourceManagement = exports.MongoWriteConcernError = exports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoStalePrimaryError = exports.MongoServerSelectionError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({ enumerable: true, get: function () { return admin_1.Admin; } }));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({ enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } }));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({ enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } }));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({ enumerable: true, get: function () { return change_stream_1.ChangeStream; } }));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({ enumerable: true, get: function () { return collection_1.Collection; } }));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({ enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } }));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({ enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } }));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({ enumerable: true, get: function () { return find_cursor_1.FindCursor; } }));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({ enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } }));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({ enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } }));\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nconst explain_1 = __webpack_require__(/*! ./explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainableCursor\", ({ enumerable: true, get: function () { return explain_1.ExplainableCursor; } }));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({ enumerable: true, get: function () { return gridfs_1.GridFSBucket; } }));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({ enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } }));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({ enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } }));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({ enumerable: true, get: function () { return mongo_client_1.MongoClient; } }));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({ enumerable: true, get: function () { return mongo_types_1.CancellationToken; } }));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({ enumerable: true, get: function () { return sessions_1.ClientSession; } }));\n/** @public */\nvar bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({ enumerable: true, get: function () { return common_1.MongoBulkWriteError; } }));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({ enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } }));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({ enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({ enumerable: true, get: function () { return error_1.MongoAPIError; } }));\nObject.defineProperty(exports, \"MongoAWSError\", ({ enumerable: true, get: function () { return error_1.MongoAWSError; } }));\nObject.defineProperty(exports, \"MongoAzureError\", ({ enumerable: true, get: function () { return error_1.MongoAzureError; } }));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } }));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({ enumerable: true, get: function () { return error_1.MongoChangeStreamError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteCursorError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteCursorError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteExecutionError; } }));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({ enumerable: true, get: function () { return error_1.MongoCompatibilityError; } }));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({ enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } }));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({ enumerable: true, get: function () { return error_1.MongoCursorInUseError; } }));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({ enumerable: true, get: function () { return error_1.MongoDecompressionError; } }));\nObject.defineProperty(exports, \"MongoDriverError\", ({ enumerable: true, get: function () { return error_1.MongoDriverError; } }));\nObject.defineProperty(exports, \"MongoError\", ({ enumerable: true, get: function () { return error_1.MongoError; } }));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({ enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } }));\nObject.defineProperty(exports, \"MongoGCPError\", ({ enumerable: true, get: function () { return error_1.MongoGCPError; } }));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } }));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } }));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({ enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoKerberosError\", ({ enumerable: true, get: function () { return error_1.MongoKerberosError; } }));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({ enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } }));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({ enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } }));\nObject.defineProperty(exports, \"MongoNetworkError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkError; } }));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } }));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({ enumerable: true, get: function () { return error_1.MongoNotConnectedError; } }));\nObject.defineProperty(exports, \"MongoOIDCError\", ({ enumerable: true, get: function () { return error_1.MongoOIDCError; } }));\nObject.defineProperty(exports, \"MongoOperationTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoOperationTimeoutError; } }));\nObject.defineProperty(exports, \"MongoParseError\", ({ enumerable: true, get: function () { return error_1.MongoParseError; } }));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({ enumerable: true, get: function () { return error_1.MongoRuntimeError; } }));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({ enumerable: true, get: function () { return error_1.MongoServerClosedError; } }));\nObject.defineProperty(exports, \"MongoServerError\", ({ enumerable: true, get: function () { return error_1.MongoServerError; } }));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({ enumerable: true, get: function () { return error_1.MongoServerSelectionError; } }));\nObject.defineProperty(exports, \"MongoStalePrimaryError\", ({ enumerable: true, get: function () { return error_1.MongoStalePrimaryError; } }));\nObject.defineProperty(exports, \"MongoSystemError\", ({ enumerable: true, get: function () { return error_1.MongoSystemError; } }));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({ enumerable: true, get: function () { return error_1.MongoTailableCursorError; } }));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({ enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } }));\nObject.defineProperty(exports, \"MongoTransactionError\", ({ enumerable: true, get: function () { return error_1.MongoTransactionError; } }));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({ enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } }));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({ enumerable: true, get: function () { return error_1.MongoWriteConcernError; } }));\nvar resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\");\nObject.defineProperty(exports, \"configureExplicitResourceManagement\", ({ enumerable: true, get: function () { return resource_management_1.configureExplicitResourceManagement; } }));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({ enumerable: true, get: function () { return common_2.BatchType; } }));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({ enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } }));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({ enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } }));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({ enumerable: true, get: function () { return providers_1.AuthMechanism; } }));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({ enumerable: true, get: function () { return compression_1.Compressor; } }));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({ enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } }));\nObject.defineProperty(exports, \"CursorTimeoutMode\", ({ enumerable: true, get: function () { return abstract_cursor_2.CursorTimeoutMode; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({ enumerable: true, get: function () { return error_2.MongoErrorLabel; } }));\nvar explain_2 = __webpack_require__(/*! ./explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({ enumerable: true, get: function () { return explain_2.ExplainVerbosity; } }));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({ enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } }));\nvar mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nObject.defineProperty(exports, \"MongoLoggableComponent\", ({ enumerable: true, get: function () { return mongo_logger_1.MongoLoggableComponent; } }));\nObject.defineProperty(exports, \"SeverityLevel\", ({ enumerable: true, get: function () { return mongo_logger_1.SeverityLevel; } }));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({ enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } }));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({ enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } }));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({ enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } }));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({ enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } }));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({ enumerable: true, get: function () { return common_3.ServerType; } }));\nObject.defineProperty(exports, \"TopologyType\", ({ enumerable: true, get: function () { return common_3.TopologyType; } }));\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({ enumerable: true, get: function () { return read_concern_2.ReadConcern; } }));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({ enumerable: true, get: function () { return read_preference_2.ReadPreference; } }));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({ enumerable: true, get: function () { return write_concern_1.WriteConcern; } }));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } }));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } }));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } }));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } }));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } }));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } }));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({ enumerable: true, get: function () { return events_1.ServerClosedEvent; } }));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } }));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({ enumerable: true, get: function () { return events_1.ServerOpeningEvent; } }));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyClosedEvent; } }));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({ enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } }));\nvar server_selection_events_1 = __webpack_require__(/*! ./sdam/server_selection_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection_events.js\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionFailedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionStartedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionSucceededEvent; } }));\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.WaitingForSuitableServerEvent; } }));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({ enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } }));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } }));\nObject.defineProperty(exports, \"MongoCryptError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptError; } }));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } }));\nvar mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", ({ enumerable: true, get: function () { return mongo_client_auth_providers_1.MongoClientAuthProviders; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst executor_1 = __webpack_require__(/*! ./operations/client_bulk_write/executor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.options = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this.options.mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger\n            ? new mongo_logger_1.MongoLogger(this.options.mongoLoggerOptions)\n            : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this.options),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            activeCursors: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options() {\n                return client.options;\n            },\n            get readConcern() {\n                return client.options.readConcern;\n            },\n            get writeConcern() {\n                return client.options.writeConcern;\n            },\n            get readPreference() {\n                return client.options.readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this.options.hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this.options.srvHost);\n        const cosmosDBHostnames = this.options.hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this.options.srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    get serverApi() {\n        return this.options.serverApi && Object.freeze({ ...this.options.serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this.options.monitorCommands;\n    }\n    set monitorCommands(value) {\n        this.options.monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this.options.autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get timeoutMS() {\n        return this.s.options.timeoutMS;\n    }\n    /**\n     * Executes a client bulk write operation, available on server 8.0+.\n     * @param models - The client bulk write models.\n     * @param options - The client bulk write options.\n     * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n     */\n    async bulkWrite(models, options) {\n        if (this.autoEncrypter) {\n            throw new error_1.MongoInvalidArgumentError('MongoClient bulkWrite does not currently support automatic encryption.');\n        }\n        // We do not need schema type information past this point (\"as any\" is fine)\n        return await new executor_1.ClientBulkWriteExecutor(this, models, (0, utils_1.resolveOptions)(this, options)).execute();\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return await this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this.options;\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.ENVIRONMENT;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await this.topology?.connect(options);\n            }\n            catch (error) {\n                this.topology?.close();\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Cleans up client-side resources used by the MongoCLient and .  This includes:\n     *\n     * - Closes all open, unused connections (see note).\n     * - Ends all in-use sessions with {@link ClientSession#endSession|ClientSession.endSession()}.\n     * - Ends all unused sessions server-side.\n     * - Cleans up any resources being used for auto encryption if auto encryption is enabled.\n     *\n     * @remarks Any in-progress operations are not killed and any connections used by in progress operations\n     * will be cleaned up lazily as operations finish.\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        if (this.closeLock) {\n            return await this.closeLock;\n        }\n        try {\n            this.closeLock = this._close(force);\n            await this.closeLock;\n        }\n        finally {\n            // release\n            this.closeLock = undefined;\n        }\n    }\n    /* @internal */\n    async _close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeCursorCloses = Array.from(this.s.activeCursors, cursor => cursor.close());\n        this.s.activeCursors.clear();\n        await Promise.all(activeCursorCloses);\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true }));\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        topology.close();\n        const { encrypter } = this.options;\n        if (encrypter) {\n            await encrypter.close(this, force);\n        }\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.s.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this.options, options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return await client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this.options);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n(0, resource_management_1.configureResourceManagement)(MongoClient.prototype);\n//# sourceMappingURL=mongo_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client_auth_providers.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client_auth_providers.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./cmap/auth/mongodb_aws */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst automated_callback_workflow_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/automated_callback_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js\");\nconst human_callback_workflow_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/human_callback_workflow */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js\");\nconst token_cache_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/token_cache */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\");\nconst plain_1 = __webpack_require__(/*! ./cmap/auth/plain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./cmap/auth/scram */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./cmap/auth/x509 */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([\n    [\n        providers_1.AuthMechanism.MONGODB_AWS,\n        ({ AWS_CREDENTIAL_PROVIDER }) => new mongodb_aws_1.MongoDBAWS(AWS_CREDENTIAL_PROVIDER)\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_CR,\n        () => {\n            throw new error_1.MongoInvalidArgumentError('MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+');\n        }\n    ],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, properties => new mongodb_oidc_1.MongoDBOIDC(getWorkflow(properties))],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n    constructor() {\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @param credentials - The credentials.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */\n    getOrCreateProvider(name, authMechanismProperties) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const providerFunction = AUTH_PROVIDERS.get(name);\n        if (!providerFunction) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        const provider = providerFunction(authMechanismProperties);\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(authMechanismProperties) {\n    if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n        return new human_callback_workflow_1.HumanCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n    }\n    else if (authMechanismProperties.OIDC_CALLBACK) {\n        return new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n    }\n    else {\n        const environment = authMechanismProperties.ENVIRONMENT;\n        const workflow = mongodb_oidc_1.OIDC_WORKFLOWS.get(environment)?.();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError(`Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`);\n        }\n        return workflow;\n    }\n}\n//# sourceMappingURL=mongo_client_auth_providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLHNIQUFvQjtBQUM3QyxzQkFBc0IsbUJBQU8sQ0FBQyxnSUFBeUI7QUFDdkQsdUJBQXVCLG1CQUFPLENBQUMsa0lBQTBCO0FBQ3pELHNDQUFzQyxtQkFBTyxDQUFDLDBMQUFzRDtBQUNwRyxrQ0FBa0MsbUJBQU8sQ0FBQyxrTEFBa0Q7QUFDNUYsc0JBQXNCLG1CQUFPLENBQUMsMEpBQXNDO0FBQ3BFLGdCQUFnQixtQkFBTyxDQUFDLG9IQUFtQjtBQUMzQyxvQkFBb0IsbUJBQU8sQ0FBQyw0SEFBdUI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMsb0hBQW1CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyxrSEFBa0I7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsZ0dBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsTUFBTTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxvQ0FBb0M7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcbW9uZ29fY2xpZW50X2F1dGhfcHJvdmlkZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0NsaWVudEF1dGhQcm92aWRlcnMgPSB2b2lkIDA7XG5jb25zdCBnc3NhcGlfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9nc3NhcGlcIik7XG5jb25zdCBtb25nb2RiX2F3c18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvZGJfYXdzXCIpO1xuY29uc3QgbW9uZ29kYl9vaWRjXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjXCIpO1xuY29uc3QgYXV0b21hdGVkX2NhbGxiYWNrX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F1dG9tYXRlZF9jYWxsYmFja193b3JrZmxvd1wiKTtcbmNvbnN0IGh1bWFuX2NhbGxiYWNrX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2h1bWFuX2NhbGxiYWNrX3dvcmtmbG93XCIpO1xuY29uc3QgdG9rZW5fY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvdG9rZW5fY2FjaGVcIik7XG5jb25zdCBwbGFpbl8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3BsYWluXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvcHJvdmlkZXJzXCIpO1xuY29uc3Qgc2NyYW1fMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9zY3JhbVwiKTtcbmNvbnN0IHg1MDlfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC94NTA5XCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgQVVUSF9QUk9WSURFUlMgPSBuZXcgTWFwKFtcbiAgICBbXG4gICAgICAgIHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9BV1MsXG4gICAgICAgICh7IEFXU19DUkVERU5USUFMX1BST1ZJREVSIH0pID0+IG5ldyBtb25nb2RiX2F3c18xLk1vbmdvREJBV1MoQVdTX0NSRURFTlRJQUxfUFJPVklERVIpXG4gICAgXSxcbiAgICBbXG4gICAgICAgIHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9DUixcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignTU9OR09EQi1DUiBpcyBubyBsb25nZXIgYSBzdXBwb3J0ZWQgYXV0aCBtZWNoYW5pc20gaW4gTW9uZ29EQiA0LjArJyk7XG4gICAgICAgIH1cbiAgICBdLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfR1NTQVBJLCAoKSA9PiBuZXcgZ3NzYXBpXzEuR1NTQVBJKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQywgcHJvcGVydGllcyA9PiBuZXcgbW9uZ29kYl9vaWRjXzEuTW9uZ29EQk9JREMoZ2V0V29ya2Zsb3cocHJvcGVydGllcykpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1BMQUlOLCAoKSA9PiBuZXcgcGxhaW5fMS5QbGFpbigpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTEsICgpID0+IG5ldyBzY3JhbV8xLlNjcmFtU0hBMSgpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTI1NiwgKCkgPT4gbmV3IHNjcmFtXzEuU2NyYW1TSEEyNTYoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9YNTA5LCAoKSA9PiBuZXcgeDUwOV8xLlg1MDkoKV1cbl0pO1xuLyoqXG4gKiBDcmVhdGUgYSBzZXQgb2YgcHJvdmlkZXJzIHBlciBjbGllbnRcbiAqIHRvIGF2b2lkIHNoYXJpbmcgdGhlIHByb3ZpZGVyJ3MgY2FjaGUgYmV0d2VlbiBkaWZmZXJlbnQgY2xpZW50cy5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBNb25nb0NsaWVudEF1dGhQcm92aWRlcnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV4aXN0aW5nUHJvdmlkZXJzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgb3IgY3JlYXRlIGFuIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBtZWNoYW5pc20uXG4gICAgICogV2UgZG9uJ3Qgd2FudCB0byBjcmVhdGUgYWxsIHByb3ZpZGVycyBhdCBvbmNlLCBhcyBzb21lIHByb3ZpZGVycyBtYXkgbm90IGJlIHVzZWQuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvdmlkZXIgdG8gZ2V0IG9yIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbHMgLSBUaGUgY3JlZGVudGlhbHMuXG4gICAgICogQHJldHVybnMgVGhlIHByb3ZpZGVyLlxuICAgICAqIEB0aHJvd3MgTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciBpZiB0aGUgbWVjaGFuaXNtIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0T3JDcmVhdGVQcm92aWRlcihuYW1lLCBhdXRoTWVjaGFuaXNtUHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSB0aGlzLmV4aXN0aW5nUHJvdmlkZXJzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGF1dGhQcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGF1dGhQcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm92aWRlckZ1bmN0aW9uID0gQVVUSF9QUk9WSURFUlMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoIXByb3ZpZGVyRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYGF1dGhNZWNoYW5pc20gJHtuYW1lfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBwcm92aWRlckZ1bmN0aW9uKGF1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzKTtcbiAgICAgICAgdGhpcy5leGlzdGluZ1Byb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NsaWVudEF1dGhQcm92aWRlcnMgPSBNb25nb0NsaWVudEF1dGhQcm92aWRlcnM7XG4vKipcbiAqIEdldHMgZWl0aGVyIGEgZGV2aWNlIHdvcmtmbG93IG9yIGNhbGxiYWNrIHdvcmtmbG93LlxuICovXG5mdW5jdGlvbiBnZXRXb3JrZmxvdyhhdXRoTWVjaGFuaXNtUHJvcGVydGllcykge1xuICAgIGlmIChhdXRoTWVjaGFuaXNtUHJvcGVydGllcy5PSURDX0hVTUFOX0NBTExCQUNLKSB7XG4gICAgICAgIHJldHVybiBuZXcgaHVtYW5fY2FsbGJhY2tfd29ya2Zsb3dfMS5IdW1hbkNhbGxiYWNrV29ya2Zsb3cobmV3IHRva2VuX2NhY2hlXzEuVG9rZW5DYWNoZSgpLCBhdXRoTWVjaGFuaXNtUHJvcGVydGllcy5PSURDX0hVTUFOX0NBTExCQUNLKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMuT0lEQ19DQUxMQkFDSykge1xuICAgICAgICByZXR1cm4gbmV3IGF1dG9tYXRlZF9jYWxsYmFja193b3JrZmxvd18xLkF1dG9tYXRlZENhbGxiYWNrV29ya2Zsb3cobmV3IHRva2VuX2NhY2hlXzEuVG9rZW5DYWNoZSgpLCBhdXRoTWVjaGFuaXNtUHJvcGVydGllcy5PSURDX0NBTExCQUNLKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMuRU5WSVJPTk1FTlQ7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gbW9uZ29kYl9vaWRjXzEuT0lEQ19XT1JLRkxPV1MuZ2V0KGVudmlyb25tZW50KT8uKCk7XG4gICAgICAgIGlmICghd29ya2Zsb3cpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYENvdWxkIG5vdCBsb2FkIHdvcmtmbG93IGZvciBlbnZpcm9ubWVudCAke2F1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzLkVOVklST05NRU5UfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3JrZmxvdztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @public */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            const logLine = (0, util_1.inspect)(log, { compact: true, breakLength: Infinity });\n            stream.write(`${logLine}\\n`, 'utf-8', cb);\n            return;\n        })\n    };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    let currentLength = 0;\n    const maxDocumentLengthEnsurer = function maxDocumentLengthEnsurer(key, value) {\n        if (currentLength >= maxDocumentLength) {\n            return undefined;\n        }\n        // Account for root document\n        if (key === '') {\n            // Account for starting brace\n            currentLength += 1;\n            return value;\n        }\n        // +4 accounts for 2 quotation marks, colon and comma after value\n        // Note that this potentially undercounts since it does not account for escape sequences which\n        // will have an additional backslash added to them once passed through JSON.stringify.\n        currentLength += key.length + 4;\n        if (value == null)\n            return value;\n        switch (typeof value) {\n            case 'string':\n                // +2 accounts for quotes\n                // Note that this potentially undercounts similarly to the key length calculation\n                currentLength += value.length + 2;\n                break;\n            case 'number':\n            case 'bigint':\n                currentLength += String(value).length;\n                break;\n            case 'boolean':\n                currentLength += value ? 4 : 5;\n                break;\n            case 'object':\n                if ((0, utils_1.isUint8Array)(value)) {\n                    // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                    // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                    // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                    currentLength += (22 + value.byteLength + value.byteLength * 0.33 + 18) | 0;\n                }\n                else if ('_bsontype' in value) {\n                    const v = value;\n                    switch (v._bsontype) {\n                        case 'Int32':\n                            currentLength += String(v.value).length;\n                            break;\n                        case 'Double':\n                            // Account for representing integers as <value>.0\n                            currentLength +=\n                                (v.value | 0) === v.value ? String(v.value).length + 2 : String(v.value).length;\n                            break;\n                        case 'Long':\n                            currentLength += v.toString().length;\n                            break;\n                        case 'ObjectId':\n                            // '{\"$oid\":\"XXXXXXXXXXXXXXXXXXXXXXXX\"}'\n                            currentLength += 35;\n                            break;\n                        case 'MaxKey':\n                        case 'MinKey':\n                            // '{\"$maxKey\":1}' or '{\"$minKey\":1}'\n                            currentLength += 13;\n                            break;\n                        case 'Binary':\n                            // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                            // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                            // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                            currentLength += (22 + value.position + value.position * 0.33 + 18) | 0;\n                            break;\n                        case 'Timestamp':\n                            // '{\"$timestamp\":{\"t\":<t>,\"i\":<i>}}'\n                            currentLength += 19 + String(v.t).length + 5 + String(v.i).length + 2;\n                            break;\n                        case 'Code':\n                            // '{\"$code\":\"<code>\"}' or '{\"$code\":\"<code>\",\"$scope\":<scope>}'\n                            if (v.scope == null) {\n                                currentLength += v.code.length + 10 + 2;\n                            }\n                            else {\n                                // Ignoring actual scope object, so this undercounts by a significant amount\n                                currentLength += v.code.length + 10 + 11;\n                            }\n                            break;\n                        case 'BSONRegExp':\n                            // '{\"$regularExpression\":{\"pattern\":\"<pattern>\",\"options\":\"<options>\"}}'\n                            currentLength += 34 + v.pattern.length + 13 + v.options.length + 3;\n                            break;\n                    }\n                }\n        }\n        return value;\n    };\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            if (maxDocumentLength !== 0) {\n                strToTruncate = bson_1.EJSON.stringify(value, maxDocumentLengthEnsurer, 0, options);\n            }\n            else {\n                strToTruncate = bson_1.EJSON.stringify(value, options);\n            }\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * Typescript type safe event emitter\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */\n    emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */\n    emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n    constructor(...args) {\n        super(...args);\n        this.on('error', utils_1.noop);\n    }\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb190eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyx5QkFBeUI7QUFDckQsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsdUJBQXVCLG1CQUFPLENBQUMsOEdBQWdCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLGdHQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG1vbmdvX3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IGV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBtb25nb19sb2dnZXJfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2xvZ2dlclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qKlxuICogVHlwZXNjcmlwdCB0eXBlIHNhZmUgZXZlbnQgZW1pdHRlclxuICogQHB1YmxpY1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1kZWNsYXJhdGlvbi1tZXJnaW5nXG5jbGFzcyBUeXBlZEV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2coZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KVxuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcodGhpcy5jb21wb25lbnQsIGFyZ3NbMF0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZW1pdEFuZExvZ0hlYXJ0YmVhdChldmVudCwgdG9wb2xvZ3lJZCwgc2VydmVyQ29ubmVjdGlvbklkLCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29uc3QgbG9nZ2FibGVIZWFydGJlYXRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICB0b3BvbG9neUlkOiB0b3BvbG9neUlkLFxuICAgICAgICAgICAgICAgIHNlcnZlckNvbm5lY3Rpb25JZDogc2VydmVyQ29ubmVjdGlvbklkID8/IG51bGwsXG4gICAgICAgICAgICAgICAgLi4uYXJnc1swXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKHRoaXMuY29tcG9uZW50LCBsb2dnYWJsZUhlYXJ0YmVhdEV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZW1pdEFuZExvZ0NvbW1hbmQobW9uaXRvckNvbW1hbmRzLCBldmVudCwgZGF0YWJhc2VOYW1lLCBjb25uZWN0aW9uRXN0YWJsaXNoZWQsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKG1vbml0b3JDb21tYW5kcykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdGlvbkVzdGFibGlzaGVkKSB7XG4gICAgICAgICAgICBjb25zdCBsb2dnYWJsZUNvbW1hbmRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBkYXRhYmFzZU5hbWU6IGRhdGFiYXNlTmFtZSxcbiAgICAgICAgICAgICAgICAuLi5hcmdzWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5DT01NQU5ELCBsb2dnYWJsZUNvbW1hbmRFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gVHlwZWRFdmVudEVtaXR0ZXI7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW4gZXh0ZW5kcyBUeXBlZEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5vbignZXJyb3InLCB1dGlsc18xLm5vb3ApO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvX3R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/aggregate.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/aggregate.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get commandName() {\n        return 'aggregate';\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRywrQkFBK0I7QUFDNUQsb0JBQW9CLG1CQUFPLENBQUMsK0lBQWlDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLGlIQUFrQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJCQUEyQjtBQUN0RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELG1CQUFtQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxhZ2dyZWdhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFnZ3JlZ2F0ZU9wZXJhdGlvbiA9IGV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT04gPSB2b2lkIDA7XG5jb25zdCByZXNwb25zZXNfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL3dpcmVfcHJvdG9jb2wvcmVzcG9uc2VzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktdHlwZS1hc3NlcnRpb25cbmV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT04gPSAxO1xuY29uc3QgTUlOX1dJUkVfVkVSU0lPTl8kT1VUX1JFQURfQ09OQ0VSTl9TVVBQT1JUID0gODtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEFnZ3JlZ2F0ZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgcGlwZWxpbmUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCB7IC4uLm9wdGlvbnMsIGRiTmFtZTogbnMuZGIgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICAvLyBDb3ZlcnMgd2hlbiBucy5jb2xsZWN0aW9uIGlzIG51bGwsIHVuZGVmaW5lZCBvciB0aGUgZW1wdHkgc3RyaW5nLCB1c2UgREJfQUdHUkVHQVRFX0NPTExFQ1RJT05cbiAgICAgICAgdGhpcy50YXJnZXQgPSBucy5jb2xsZWN0aW9uIHx8IGV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT047XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIGhhdmUgYSB3cml0ZSBzdGFnZSwgb3ZlcnJpZGUgcmVhZCBwcmVmZXJlbmNlIGlmIHNvXG4gICAgICAgIHRoaXMuaGFzV3JpdGVTdGFnZSA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnM/Lm91dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMucGlwZWxpbmUgPSB0aGlzLnBpcGVsaW5lLmNvbmNhdCh7ICRvdXQ6IG9wdGlvbnMub3V0IH0pO1xuICAgICAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaXBlbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaW5hbFN0YWdlID0gcGlwZWxpbmVbcGlwZWxpbmUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoZmluYWxTdGFnZS4kb3V0IHx8IGZpbmFsU3RhZ2UuJG1lcmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNXcml0ZVN0YWdlKSB7XG4gICAgICAgICAgICB0aGlzLnRyeVNlY29uZGFyeVdyaXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4gJiYgdGhpcy53cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcImV4cGxhaW5cIiBjYW5ub3QgYmUgdXNlZCBvbiBhbiBhZ2dyZWdhdGUgY2FsbCB3aXRoIHdyaXRlQ29uY2VybicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zPy5jdXJzb3IgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5jdXJzb3IgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDdXJzb3Igb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdhZ2dyZWdhdGUnO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGFzV3JpdGVTdGFnZTtcbiAgICB9XG4gICAgYWRkVG9QaXBlbGluZShzdGFnZSkge1xuICAgICAgICB0aGlzLnBpcGVsaW5lLnB1c2goc3RhZ2UpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2VydmVyV2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgYWdncmVnYXRlOiB0aGlzLnRhcmdldCwgcGlwZWxpbmU6IHRoaXMucGlwZWxpbmUgfTtcbiAgICAgICAgaWYgKHRoaXMuaGFzV3JpdGVTdGFnZSAmJiBzZXJ2ZXJXaXJlVmVyc2lvbiA8IE1JTl9XSVJFX1ZFUlNJT05fJE9VVF9SRUFEX0NPTkNFUk5fU1VQUE9SVCkge1xuICAgICAgICAgICAgdGhpcy5yZWFkQ29uY2VybiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNXcml0ZVN0YWdlICYmIHRoaXMud3JpdGVDb25jZXJuKSB7XG4gICAgICAgICAgICB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmFwcGx5KGNvbW1hbmQsIHRoaXMud3JpdGVDb25jZXJuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmFsbG93RGlza1VzZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb21tYW5kLmFsbG93RGlza1VzZSA9IG9wdGlvbnMuYWxsb3dEaXNrVXNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhpbnQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sZXQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubGV0ID0gb3B0aW9ucy5sZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbW1hbmQuY3Vyc29yID0gb3B0aW9ucy5jdXJzb3IgfHwge307XG4gICAgICAgIGlmIChvcHRpb25zLmJhdGNoU2l6ZSAmJiAhdGhpcy5oYXNXcml0ZVN0YWdlKSB7XG4gICAgICAgICAgICBjb21tYW5kLmN1cnNvci5iYXRjaFNpemUgPSBvcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kLCB0aW1lb3V0Q29udGV4dCwgdGhpcy5leHBsYWluID8gcmVzcG9uc2VzXzEuRXhwbGFpbmVkQ3Vyc29yUmVzcG9uc2UgOiByZXNwb25zZXNfMS5DdXJzb3JSZXNwb25zZSk7XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGVPcGVyYXRpb24gPSBBZ2dyZWdhdGVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQWdncmVnYXRlT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdncmVnYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/bulk_write.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/bulk_write.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            timeoutContext\n        };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        return await bulk.execute({ ...options, session });\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2J1bGtfd3JpdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MscUJBQXFCO0FBQ3pEO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcYnVsa193cml0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVsa1dyaXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBCdWxrV3JpdGVPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2J1bGtXcml0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25zID0gdGhpcy5vcGVyYXRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5ic29uT3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgdGltZW91dENvbnRleHRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBidWxrIG9wZXJhdGlvblxuICAgICAgICBjb25zdCBidWxrID0gb3B0aW9ucy5vcmRlcmVkID09PSBmYWxzZVxuICAgICAgICAgICAgPyBjb2xsLmluaXRpYWxpemVVbm9yZGVyZWRCdWxrT3Aob3B0aW9ucylcbiAgICAgICAgICAgIDogY29sbC5pbml0aWFsaXplT3JkZXJlZEJ1bGtPcChvcHRpb25zKTtcbiAgICAgICAgLy8gZm9yIGVhY2ggb3AgZ28gdGhyb3VnaCBhbmQgYWRkIHRvIHRoZSBidWxrXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnVsay5yYXcob3BlcmF0aW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnVsa1xuICAgICAgICByZXR1cm4gYXdhaXQgYnVsay5leGVjdXRlKHsgLi4ub3B0aW9ucywgc2Vzc2lvbiB9KTtcbiAgICB9XG59XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IEJ1bGtXcml0ZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShCdWxrV3JpdGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWxrX3dyaXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteOperation = void 0;\nconst beta_1 = __webpack_require__(/*! ../../beta */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/beta.js\");\nconst responses_1 = __webpack_require__(/*! ../../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ../command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Executes a single client bulk write operation within a potential batch.\n * @internal\n */\nclass ClientBulkWriteOperation extends command_1.CommandOperation {\n    get commandName() {\n        return 'bulkWrite';\n    }\n    constructor(commandBuilder, options) {\n        super(undefined, options);\n        this.commandBuilder = commandBuilder;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    resetBatch() {\n        return this.commandBuilder.resetBatch();\n    }\n    get canRetryWrite() {\n        return this.commandBuilder.isBatchRetryable;\n    }\n    /**\n     * Execute the command. Superclass will handle write concern, etc.\n     * @param server - The server.\n     * @param session - The session.\n     * @returns The response.\n     */\n    async execute(server, session, timeoutContext) {\n        let command;\n        if (server.description.type === beta_1.ServerType.LoadBalancer) {\n            if (session) {\n                let connection;\n                if (!session.pinnedConnection) {\n                    // Checkout a connection to build the command.\n                    connection = await server.pool.checkOut({ timeoutContext });\n                    // Pin the connection to the session so it get used to execute the command and we do not\n                    // perform a double check-in/check-out.\n                    session.pin(connection);\n                }\n                else {\n                    connection = session.pinnedConnection;\n                }\n                command = this.commandBuilder.buildBatch(connection.hello?.maxMessageSizeBytes, connection.hello?.maxWriteBatchSize, connection.hello?.maxBsonObjectSize);\n            }\n            else {\n                throw new beta_1.MongoClientBulkWriteExecutionError('Session provided to the client bulk write operation must be present.');\n            }\n        }\n        else {\n            // At this point we have a server and the auto connect code has already\n            // run in executeOperation, so the server description will be populated.\n            // We can use that to build the command.\n            if (!server.description.maxWriteBatchSize ||\n                !server.description.maxMessageSizeBytes ||\n                !server.description.maxBsonObjectSize) {\n                throw new beta_1.MongoClientBulkWriteExecutionError('In order to execute a client bulk write, both maxWriteBatchSize, maxMessageSizeBytes and maxBsonObjectSize must be provided by the servers hello response.');\n            }\n            command = this.commandBuilder.buildBatch(server.description.maxMessageSizeBytes, server.description.maxWriteBatchSize, server.description.maxBsonObjectSize);\n        }\n        // Check after the batch is built if we cannot retry it and override the option.\n        if (!this.canRetryWrite) {\n            this.options.willRetryWrite = false;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, responses_1.ClientBulkWriteCursorResponse);\n    }\n}\nexports.ClientBulkWriteOperation = ClientBulkWriteOperation;\n// Skipping the collation as it goes on the individual ops.\n(0, operation_1.defineAspects)(ClientBulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION,\n    operation_1.Aspect.CURSOR_CREATING,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.COMMAND_BATCHING\n]);\n//# sourceMappingURL=client_bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2NsaWVudF9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxlQUFlLG1CQUFPLENBQUMsa0dBQVk7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsa0pBQW9DO0FBQ2hFLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLGdIQUFZO0FBQ3RDLG9CQUFvQixtQkFBTyxDQUFDLG9IQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxnQkFBZ0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxjbGllbnRfYnVsa193cml0ZVxcY2xpZW50X2J1bGtfd3JpdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGJldGFfMSA9IHJlcXVpcmUoXCIuLi8uLi9iZXRhXCIpO1xuY29uc3QgcmVzcG9uc2VzXzEgPSByZXF1aXJlKFwiLi4vLi4vY21hcC93aXJlX3Byb3RvY29sL3Jlc3BvbnNlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKlxuICogRXhlY3V0ZXMgYSBzaW5nbGUgY2xpZW50IGJ1bGsgd3JpdGUgb3BlcmF0aW9uIHdpdGhpbiBhIHBvdGVudGlhbCBiYXRjaC5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBDbGllbnRCdWxrV3JpdGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2J1bGtXcml0ZSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbW1hbmRCdWlsZGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1aWxkZXIgPSBjb21tYW5kQnVpbGRlcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgcmVzZXRCYXRjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZEJ1aWxkZXIucmVzZXRCYXRjaCgpO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlXcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZEJ1aWxkZXIuaXNCYXRjaFJldHJ5YWJsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgY29tbWFuZC4gU3VwZXJjbGFzcyB3aWxsIGhhbmRsZSB3cml0ZSBjb25jZXJuLCBldGMuXG4gICAgICogQHBhcmFtIHNlcnZlciAtIFRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHNlc3Npb24gLSBUaGUgc2Vzc2lvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UuXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGxldCBjb21tYW5kO1xuICAgICAgICBpZiAoc2VydmVyLmRlc2NyaXB0aW9uLnR5cGUgPT09IGJldGFfMS5TZXJ2ZXJUeXBlLkxvYWRCYWxhbmNlcikge1xuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24ucGlubmVkQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVja291dCBhIGNvbm5lY3Rpb24gdG8gYnVpbGQgdGhlIGNvbW1hbmQuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBhd2FpdCBzZXJ2ZXIucG9vbC5jaGVja091dCh7IHRpbWVvdXRDb250ZXh0IH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBQaW4gdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHNlc3Npb24gc28gaXQgZ2V0IHVzZWQgdG8gZXhlY3V0ZSB0aGUgY29tbWFuZCBhbmQgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIHBlcmZvcm0gYSBkb3VibGUgY2hlY2staW4vY2hlY2stb3V0LlxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnBpbihjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzZXNzaW9uLnBpbm5lZENvbm5lY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRCdWlsZGVyLmJ1aWxkQmF0Y2goY29ubmVjdGlvbi5oZWxsbz8ubWF4TWVzc2FnZVNpemVCeXRlcywgY29ubmVjdGlvbi5oZWxsbz8ubWF4V3JpdGVCYXRjaFNpemUsIGNvbm5lY3Rpb24uaGVsbG8/Lm1heEJzb25PYmplY3RTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBiZXRhXzEuTW9uZ29DbGllbnRCdWxrV3JpdGVFeGVjdXRpb25FcnJvcignU2Vzc2lvbiBwcm92aWRlZCB0byB0aGUgY2xpZW50IGJ1bGsgd3JpdGUgb3BlcmF0aW9uIG11c3QgYmUgcHJlc2VudC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhIHNlcnZlciBhbmQgdGhlIGF1dG8gY29ubmVjdCBjb2RlIGhhcyBhbHJlYWR5XG4gICAgICAgICAgICAvLyBydW4gaW4gZXhlY3V0ZU9wZXJhdGlvbiwgc28gdGhlIHNlcnZlciBkZXNjcmlwdGlvbiB3aWxsIGJlIHBvcHVsYXRlZC5cbiAgICAgICAgICAgIC8vIFdlIGNhbiB1c2UgdGhhdCB0byBidWlsZCB0aGUgY29tbWFuZC5cbiAgICAgICAgICAgIGlmICghc2VydmVyLmRlc2NyaXB0aW9uLm1heFdyaXRlQmF0Y2hTaXplIHx8XG4gICAgICAgICAgICAgICAgIXNlcnZlci5kZXNjcmlwdGlvbi5tYXhNZXNzYWdlU2l6ZUJ5dGVzIHx8XG4gICAgICAgICAgICAgICAgIXNlcnZlci5kZXNjcmlwdGlvbi5tYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBiZXRhXzEuTW9uZ29DbGllbnRCdWxrV3JpdGVFeGVjdXRpb25FcnJvcignSW4gb3JkZXIgdG8gZXhlY3V0ZSBhIGNsaWVudCBidWxrIHdyaXRlLCBib3RoIG1heFdyaXRlQmF0Y2hTaXplLCBtYXhNZXNzYWdlU2l6ZUJ5dGVzIGFuZCBtYXhCc29uT2JqZWN0U2l6ZSBtdXN0IGJlIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXJzIGhlbGxvIHJlc3BvbnNlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWFuZCA9IHRoaXMuY29tbWFuZEJ1aWxkZXIuYnVpbGRCYXRjaChzZXJ2ZXIuZGVzY3JpcHRpb24ubWF4TWVzc2FnZVNpemVCeXRlcywgc2VydmVyLmRlc2NyaXB0aW9uLm1heFdyaXRlQmF0Y2hTaXplLCBzZXJ2ZXIuZGVzY3JpcHRpb24ubWF4QnNvbk9iamVjdFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGFmdGVyIHRoZSBiYXRjaCBpcyBidWlsdCBpZiB3ZSBjYW5ub3QgcmV0cnkgaXQgYW5kIG92ZXJyaWRlIHRoZSBvcHRpb24uXG4gICAgICAgIGlmICghdGhpcy5jYW5SZXRyeVdyaXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMud2lsbFJldHJ5V3JpdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kLCB0aW1lb3V0Q29udGV4dCwgcmVzcG9uc2VzXzEuQ2xpZW50QnVsa1dyaXRlQ3Vyc29yUmVzcG9uc2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50QnVsa1dyaXRlT3BlcmF0aW9uID0gQ2xpZW50QnVsa1dyaXRlT3BlcmF0aW9uO1xuLy8gU2tpcHBpbmcgdGhlIGNvbGxhdGlvbiBhcyBpdCBnb2VzIG9uIHRoZSBpbmRpdmlkdWFsIG9wcy5cbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDbGllbnRCdWxrV3JpdGVPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNPTU1BTkRfQkFUQ0hJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50X2J1bGtfd3JpdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildReplaceOneOperation = exports.buildUpdateManyOperation = exports.buildUpdateOneOperation = exports.buildDeleteManyOperation = exports.buildDeleteOneOperation = exports.buildInsertOneOperation = exports.ClientBulkWriteCommandBuilder = void 0;\nexports.buildOperation = buildOperation;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst commands_1 = __webpack_require__(/*! ../../cmap/commands */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * The bytes overhead for the extra fields added post command generation.\n */\nconst MESSAGE_OVERHEAD_BYTES = 1000;\n/** @internal */\nclass ClientBulkWriteCommandBuilder {\n    /**\n     * Create the command builder.\n     * @param models - The client write models.\n     */\n    constructor(models, options, pkFactory) {\n        this.models = models;\n        this.options = options;\n        this.pkFactory = pkFactory ?? utils_1.DEFAULT_PK_FACTORY;\n        this.currentModelIndex = 0;\n        this.previousModelIndex = 0;\n        this.lastOperations = [];\n        this.isBatchRetryable = true;\n    }\n    /**\n     * Gets the errorsOnly value for the command, which is the inverse of the\n     * user provided verboseResults option. Defaults to true.\n     */\n    get errorsOnly() {\n        if ('verboseResults' in this.options) {\n            return !this.options.verboseResults;\n        }\n        return true;\n    }\n    /**\n     * Determines if there is another batch to process.\n     * @returns True if not all batches have been built.\n     */\n    hasNextBatch() {\n        return this.currentModelIndex < this.models.length;\n    }\n    /**\n     * When we need to retry a command we need to set the current\n     * model index back to its previous value.\n     */\n    resetBatch() {\n        this.currentModelIndex = this.previousModelIndex;\n        return true;\n    }\n    /**\n     * Build a single batch of a client bulk write command.\n     * @param maxMessageSizeBytes - The max message size in bytes.\n     * @param maxWriteBatchSize - The max write batch size.\n     * @returns The client bulk write command.\n     */\n    buildBatch(maxMessageSizeBytes, maxWriteBatchSize, maxBsonObjectSize) {\n        // We start by assuming the batch has no multi-updates, so it is retryable\n        // until we find them.\n        this.isBatchRetryable = true;\n        let commandLength = 0;\n        let currentNamespaceIndex = 0;\n        const command = this.baseCommand();\n        const namespaces = new Map();\n        // In the case of retries we need to mark where we started this batch.\n        this.previousModelIndex = this.currentModelIndex;\n        while (this.currentModelIndex < this.models.length) {\n            const model = this.models[this.currentModelIndex];\n            const ns = model.namespace;\n            const nsIndex = namespaces.get(ns);\n            // Multi updates are not retryable.\n            if (model.name === 'deleteMany' || model.name === 'updateMany') {\n                this.isBatchRetryable = false;\n            }\n            if (nsIndex != null) {\n                // Build the operation and serialize it to get the bytes buffer.\n                const operation = buildOperation(model, nsIndex, this.pkFactory);\n                let operationBuffer;\n                try {\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize operation to BSON`, { cause });\n                }\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation buffer can fit in the command. If it can,\n                // then add the operation to the document sequence and increment the\n                // current length as long as the ops don't exceed the maxWriteBatchSize.\n                if (commandLength + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength = MESSAGE_OVERHEAD_BYTES + command.ops.push(operation, operationBuffer);\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n            else {\n                // The namespace is not already in the nsInfo so we will set it in the map, and\n                // construct our nsInfo and ops documents and buffers.\n                namespaces.set(ns, currentNamespaceIndex);\n                const nsInfo = { ns: ns };\n                const operation = buildOperation(model, currentNamespaceIndex, this.pkFactory);\n                let nsInfoBuffer;\n                let operationBuffer;\n                try {\n                    nsInfoBuffer = bson_1.BSON.serialize(nsInfo);\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize ns info to BSON`, { cause });\n                }\n                validateBufferSize('nsInfo', nsInfoBuffer, maxBsonObjectSize);\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation and nsInfo buffers can fit in the command. If they\n                // can, then add the operation and nsInfo to their respective document\n                // sequences and increment the current length as long as the ops don't exceed\n                // the maxWriteBatchSize.\n                if (commandLength + nsInfoBuffer.length + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength =\n                        MESSAGE_OVERHEAD_BYTES +\n                            command.nsInfo.push(nsInfo, nsInfoBuffer) +\n                            command.ops.push(operation, operationBuffer);\n                    // We've added a new namespace, increment the namespace index.\n                    currentNamespaceIndex++;\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n        }\n        // Set the last operations and return the command.\n        this.lastOperations = command.ops.documents;\n        return command;\n    }\n    baseCommand() {\n        const command = {\n            bulkWrite: 1,\n            errorsOnly: this.errorsOnly,\n            ordered: this.options.ordered ?? true,\n            ops: new commands_1.DocumentSequence('ops'),\n            nsInfo: new commands_1.DocumentSequence('nsInfo')\n        };\n        // Add bypassDocumentValidation if it was present in the options.\n        if (this.options.bypassDocumentValidation != null) {\n            command.bypassDocumentValidation = this.options.bypassDocumentValidation;\n        }\n        // Add let if it was present in the options.\n        if (this.options.let) {\n            command.let = this.options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ClientBulkWriteCommandBuilder = ClientBulkWriteCommandBuilder;\nfunction validateBufferSize(name, buffer, maxBsonObjectSize) {\n    if (buffer.length > maxBsonObjectSize) {\n        throw new error_1.MongoInvalidArgumentError(`Client bulk write operation ${name} of length ${buffer.length} exceeds the max bson object size of ${maxBsonObjectSize}`);\n    }\n}\n/**\n * Build the insert one operation.\n * @param model - The insert one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildInsertOneOperation = (model, index, pkFactory) => {\n    const document = {\n        insert: index,\n        document: model.document\n    };\n    document.document._id = model.document._id ?? pkFactory.createPk();\n    return document;\n};\nexports.buildInsertOneOperation = buildInsertOneOperation;\n/**\n * Build the delete one operation.\n * @param model - The insert many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteOneOperation = (model, index) => {\n    return createDeleteOperation(model, index, false);\n};\nexports.buildDeleteOneOperation = buildDeleteOneOperation;\n/**\n * Build the delete many operation.\n * @param model - The delete many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteManyOperation = (model, index) => {\n    return createDeleteOperation(model, index, true);\n};\nexports.buildDeleteManyOperation = buildDeleteManyOperation;\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createDeleteOperation(model, index, multi) {\n    const document = {\n        delete: index,\n        multi: multi,\n        filter: model.filter\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n}\n/**\n * Build the update one operation.\n * @param model - The update one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateOneOperation = (model, index) => {\n    return createUpdateOperation(model, index, false);\n};\nexports.buildUpdateOneOperation = buildUpdateOneOperation;\n/**\n * Build the update many operation.\n * @param model - The update many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateManyOperation = (model, index) => {\n    return createUpdateOperation(model, index, true);\n};\nexports.buildUpdateManyOperation = buildUpdateManyOperation;\n/**\n * Validate the update document.\n * @param update - The update document.\n */\nfunction validateUpdate(update) {\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n        throw new error_1.MongoAPIError('Client bulk write update models must only contain atomic modifiers (start with $) and must not be empty.');\n    }\n}\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createUpdateOperation(model, index, multi) {\n    // Update documents provided in UpdateOne and UpdateMany write models are\n    // required only to contain atomic modifiers (i.e. keys that start with \"$\").\n    // Drivers MUST throw an error if an update document is empty or if the\n    // document's first key does not start with \"$\".\n    validateUpdate(model.update);\n    const document = {\n        update: index,\n        multi: multi,\n        filter: model.filter,\n        updateMods: model.update\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.arrayFilters) {\n        document.arrayFilters = model.arrayFilters;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n}\n/**\n * Build the replace one operation.\n * @param model - The replace one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildReplaceOneOperation = (model, index) => {\n    if ((0, utils_1.hasAtomicOperators)(model.replacement)) {\n        throw new error_1.MongoAPIError('Client bulk write replace models must not contain atomic modifiers (start with $) and must not be empty.');\n    }\n    const document = {\n        update: index,\n        multi: false,\n        filter: model.filter,\n        updateMods: model.replacement\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n};\nexports.buildReplaceOneOperation = buildReplaceOneOperation;\n/** @internal */\nfunction buildOperation(model, index, pkFactory) {\n    switch (model.name) {\n        case 'insertOne':\n            return (0, exports.buildInsertOneOperation)(model, index, pkFactory);\n        case 'deleteOne':\n            return (0, exports.buildDeleteOneOperation)(model, index);\n        case 'deleteMany':\n            return (0, exports.buildDeleteManyOperation)(model, index);\n        case 'updateOne':\n            return (0, exports.buildUpdateOneOperation)(model, index);\n        case 'updateMany':\n            return (0, exports.buildUpdateManyOperation)(model, index);\n        case 'replaceOne':\n            return (0, exports.buildReplaceOneOperation)(model, index);\n    }\n}\n//# sourceMappingURL=command_builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteExecutor = void 0;\nconst abstract_cursor_1 = __webpack_require__(/*! ../../cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nconst client_bulk_write_cursor_1 = __webpack_require__(/*! ../../cursor/client_bulk_write_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst client_bulk_write_1 = __webpack_require__(/*! ./client_bulk_write */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\");\nconst command_builder_1 = __webpack_require__(/*! ./command_builder */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js\");\nconst results_merger_1 = __webpack_require__(/*! ./results_merger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js\");\n/**\n * Responsible for executing a client bulk write.\n * @internal\n */\nclass ClientBulkWriteExecutor {\n    /**\n     * Instantiate the executor.\n     * @param client - The mongo client.\n     * @param operations - The user supplied bulk write models.\n     * @param options - The bulk write options.\n     */\n    constructor(client, operations, options) {\n        if (operations.length === 0) {\n            throw new error_1.MongoClientBulkWriteExecutionError('No client bulk write models were provided.');\n        }\n        this.client = client;\n        this.operations = operations;\n        this.options = {\n            ordered: true,\n            bypassDocumentValidation: false,\n            verboseResults: false,\n            ...options\n        };\n        // If no write concern was provided, we inherit one from the client.\n        if (!this.options.writeConcern) {\n            this.options.writeConcern = write_concern_1.WriteConcern.fromOptions(this.client.s.options);\n        }\n        if (this.options.writeConcern?.w === 0) {\n            if (this.options.verboseResults) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and verbose results');\n            }\n            if (this.options.ordered) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and ordered writes');\n            }\n        }\n    }\n    /**\n     * Execute the client bulk write. Will split commands into batches and exhaust the cursors\n     * for each, then merge the results into one.\n     * @returns The result.\n     */\n    async execute() {\n        // The command builder will take the user provided models and potential split the batch\n        // into multiple commands due to size.\n        const pkFactory = this.client.s.options.pkFactory;\n        const commandBuilder = new command_builder_1.ClientBulkWriteCommandBuilder(this.operations, this.options, pkFactory);\n        // Unacknowledged writes need to execute all batches and return { ok: 1}\n        const resolvedOptions = (0, utils_1.resolveTimeoutOptions)(this.client, this.options);\n        const context = timeout_1.TimeoutContext.create(resolvedOptions);\n        if (this.options.writeConcern?.w === 0) {\n            while (commandBuilder.hasNextBatch()) {\n                const operation = new client_bulk_write_1.ClientBulkWriteOperation(commandBuilder, this.options);\n                await (0, execute_operation_1.executeOperation)(this.client, operation, context);\n            }\n            return results_merger_1.ClientBulkWriteResultsMerger.unacknowledged();\n        }\n        else {\n            const resultsMerger = new results_merger_1.ClientBulkWriteResultsMerger(this.options);\n            // For each command will will create and exhaust a cursor for the results.\n            while (commandBuilder.hasNextBatch()) {\n                const cursorContext = new abstract_cursor_1.CursorTimeoutContext(context, Symbol());\n                const options = {\n                    ...this.options,\n                    timeoutContext: cursorContext,\n                    ...(resolvedOptions.timeoutMS != null && { timeoutMode: abstract_cursor_1.CursorTimeoutMode.LIFETIME })\n                };\n                const cursor = new client_bulk_write_cursor_1.ClientBulkWriteCursor(this.client, commandBuilder, options);\n                try {\n                    await resultsMerger.merge(cursor);\n                }\n                catch (error) {\n                    // Write concern errors are recorded in the writeConcernErrors field on MongoClientBulkWriteError.\n                    // When a write concern error is encountered, it should not terminate execution of the bulk write\n                    // for either ordered or unordered bulk writes. However, drivers MUST throw an exception at the end\n                    // of execution if any write concern errors were observed.\n                    if (error instanceof error_1.MongoServerError && !(error instanceof error_1.MongoClientBulkWriteError)) {\n                        // Server side errors need to be wrapped inside a MongoClientBulkWriteError, where the root\n                        // cause is the error property and a partial result is to be included.\n                        const bulkWriteError = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client bulk write encountered an error during execution'\n                        });\n                        bulkWriteError.cause = error;\n                        bulkWriteError.partialResult = resultsMerger.bulkWriteResult;\n                        throw bulkWriteError;\n                    }\n                    else {\n                        // Client side errors are just thrown.\n                        throw error;\n                    }\n                }\n            }\n            // If we have write concern errors or unordered write errors at the end we throw.\n            if (resultsMerger.writeConcernErrors.length > 0 || resultsMerger.writeErrors.size > 0) {\n                const error = new error_1.MongoClientBulkWriteError({\n                    message: 'Mongo client bulk write encountered errors during execution.'\n                });\n                error.writeConcernErrors = resultsMerger.writeConcernErrors;\n                error.writeErrors = resultsMerger.writeErrors;\n                error.partialResult = resultsMerger.bulkWriteResult;\n                throw error;\n            }\n            return resultsMerger.bulkWriteResult;\n        }\n    }\n}\nexports.ClientBulkWriteExecutor = ClientBulkWriteExecutor;\n//# sourceMappingURL=executor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2V4ZWN1dG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQiwwQkFBMEIsbUJBQU8sQ0FBQyxzSUFBOEI7QUFDaEUsbUNBQW1DLG1CQUFPLENBQUMsd0pBQXVDO0FBQ2xGLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLHdHQUFlO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLG9IQUFxQjtBQUNyRCw0QkFBNEIsbUJBQU8sQ0FBQyxvSUFBc0I7QUFDMUQsNEJBQTRCLG1CQUFPLENBQUMscUpBQXFCO0FBQ3pELDBCQUEwQixtQkFBTyxDQUFDLGlKQUFtQjtBQUNyRCx5QkFBeUIsbUJBQU8sQ0FBQywrSUFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCwyREFBMkQ7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxjbGllbnRfYnVsa193cml0ZVxcZXhlY3V0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEJ1bGtXcml0ZUV4ZWN1dG9yID0gdm9pZCAwO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi4vLi4vY3Vyc29yL2Fic3RyYWN0X2N1cnNvclwiKTtcbmNvbnN0IGNsaWVudF9idWxrX3dyaXRlX2N1cnNvcl8xID0gcmVxdWlyZShcIi4uLy4uL2N1cnNvci9jbGllbnRfYnVsa193cml0ZV9jdXJzb3JcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdGltZW91dF8xID0gcmVxdWlyZShcIi4uLy4uL3RpbWVvdXRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uLy4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgY2xpZW50X2J1bGtfd3JpdGVfMSA9IHJlcXVpcmUoXCIuL2NsaWVudF9idWxrX3dyaXRlXCIpO1xuY29uc3QgY29tbWFuZF9idWlsZGVyXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kX2J1aWxkZXJcIik7XG5jb25zdCByZXN1bHRzX21lcmdlcl8xID0gcmVxdWlyZShcIi4vcmVzdWx0c19tZXJnZXJcIik7XG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciBleGVjdXRpbmcgYSBjbGllbnQgYnVsayB3cml0ZS5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBDbGllbnRCdWxrV3JpdGVFeGVjdXRvciB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGV4ZWN1dG9yLlxuICAgICAqIEBwYXJhbSBjbGllbnQgLSBUaGUgbW9uZ28gY2xpZW50LlxuICAgICAqIEBwYXJhbSBvcGVyYXRpb25zIC0gVGhlIHVzZXIgc3VwcGxpZWQgYnVsayB3cml0ZSBtb2RlbHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgYnVsayB3cml0ZSBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgb3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ2xpZW50QnVsa1dyaXRlRXhlY3V0aW9uRXJyb3IoJ05vIGNsaWVudCBidWxrIHdyaXRlIG1vZGVscyB3ZXJlIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSBvcGVyYXRpb25zO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBvcmRlcmVkOiB0cnVlLFxuICAgICAgICAgICAgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIHZlcmJvc2VSZXN1bHRzOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgbm8gd3JpdGUgY29uY2VybiB3YXMgcHJvdmlkZWQsIHdlIGluaGVyaXQgb25lIGZyb20gdGhlIGNsaWVudC5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuID0gd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5mcm9tT3B0aW9ucyh0aGlzLmNsaWVudC5zLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuPy53ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZlcmJvc2VSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQ2Fubm90IHJlcXVlc3QgdW5hY2tub3dsZWRnZWQgd3JpdGUgY29uY2VybiBhbmQgdmVyYm9zZSByZXN1bHRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9yZGVyZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDYW5ub3QgcmVxdWVzdCB1bmFja25vd2xlZGdlZCB3cml0ZSBjb25jZXJuIGFuZCBvcmRlcmVkIHdyaXRlcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIGNsaWVudCBidWxrIHdyaXRlLiBXaWxsIHNwbGl0IGNvbW1hbmRzIGludG8gYmF0Y2hlcyBhbmQgZXhoYXVzdCB0aGUgY3Vyc29yc1xuICAgICAqIGZvciBlYWNoLCB0aGVuIG1lcmdlIHRoZSByZXN1bHRzIGludG8gb25lLlxuICAgICAqIEByZXR1cm5zIFRoZSByZXN1bHQuXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZSgpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1hbmQgYnVpbGRlciB3aWxsIHRha2UgdGhlIHVzZXIgcHJvdmlkZWQgbW9kZWxzIGFuZCBwb3RlbnRpYWwgc3BsaXQgdGhlIGJhdGNoXG4gICAgICAgIC8vIGludG8gbXVsdGlwbGUgY29tbWFuZHMgZHVlIHRvIHNpemUuXG4gICAgICAgIGNvbnN0IHBrRmFjdG9yeSA9IHRoaXMuY2xpZW50LnMub3B0aW9ucy5wa0ZhY3Rvcnk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRCdWlsZGVyID0gbmV3IGNvbW1hbmRfYnVpbGRlcl8xLkNsaWVudEJ1bGtXcml0ZUNvbW1hbmRCdWlsZGVyKHRoaXMub3BlcmF0aW9ucywgdGhpcy5vcHRpb25zLCBwa0ZhY3RvcnkpO1xuICAgICAgICAvLyBVbmFja25vd2xlZGdlZCB3cml0ZXMgbmVlZCB0byBleGVjdXRlIGFsbCBiYXRjaGVzIGFuZCByZXR1cm4geyBvazogMX1cbiAgICAgICAgY29uc3QgcmVzb2x2ZWRPcHRpb25zID0gKDAsIHV0aWxzXzEucmVzb2x2ZVRpbWVvdXRPcHRpb25zKSh0aGlzLmNsaWVudCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRpbWVvdXRfMS5UaW1lb3V0Q29udGV4dC5jcmVhdGUocmVzb2x2ZWRPcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm4/LncgPT09IDApIHtcbiAgICAgICAgICAgIHdoaWxlIChjb21tYW5kQnVpbGRlci5oYXNOZXh0QmF0Y2goKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBjbGllbnRfYnVsa193cml0ZV8xLkNsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbihjb21tYW5kQnVpbGRlciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgb3BlcmF0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzX21lcmdlcl8xLkNsaWVudEJ1bGtXcml0ZVJlc3VsdHNNZXJnZXIudW5hY2tub3dsZWRnZWQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHNNZXJnZXIgPSBuZXcgcmVzdWx0c19tZXJnZXJfMS5DbGllbnRCdWxrV3JpdGVSZXN1bHRzTWVyZ2VyKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBGb3IgZWFjaCBjb21tYW5kIHdpbGwgd2lsbCBjcmVhdGUgYW5kIGV4aGF1c3QgYSBjdXJzb3IgZm9yIHRoZSByZXN1bHRzLlxuICAgICAgICAgICAgd2hpbGUgKGNvbW1hbmRCdWlsZGVyLmhhc05leHRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyc29yQ29udGV4dCA9IG5ldyBhYnN0cmFjdF9jdXJzb3JfMS5DdXJzb3JUaW1lb3V0Q29udGV4dChjb250ZXh0LCBTeW1ib2woKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0Q29udGV4dDogY3Vyc29yQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHJlc29sdmVkT3B0aW9ucy50aW1lb3V0TVMgIT0gbnVsbCAmJiB7IHRpbWVvdXRNb2RlOiBhYnN0cmFjdF9jdXJzb3JfMS5DdXJzb3JUaW1lb3V0TW9kZS5MSUZFVElNRSB9KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyc29yID0gbmV3IGNsaWVudF9idWxrX3dyaXRlX2N1cnNvcl8xLkNsaWVudEJ1bGtXcml0ZUN1cnNvcih0aGlzLmNsaWVudCwgY29tbWFuZEJ1aWxkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdHNNZXJnZXIubWVyZ2UoY3Vyc29yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdyaXRlIGNvbmNlcm4gZXJyb3JzIGFyZSByZWNvcmRlZCBpbiB0aGUgd3JpdGVDb25jZXJuRXJyb3JzIGZpZWxkIG9uIE1vbmdvQ2xpZW50QnVsa1dyaXRlRXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gYSB3cml0ZSBjb25jZXJuIGVycm9yIGlzIGVuY291bnRlcmVkLCBpdCBzaG91bGQgbm90IHRlcm1pbmF0ZSBleGVjdXRpb24gb2YgdGhlIGJ1bGsgd3JpdGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVpdGhlciBvcmRlcmVkIG9yIHVub3JkZXJlZCBidWxrIHdyaXRlcy4gSG93ZXZlciwgZHJpdmVycyBNVVNUIHRocm93IGFuIGV4Y2VwdGlvbiBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIGV4ZWN1dGlvbiBpZiBhbnkgd3JpdGUgY29uY2VybiBlcnJvcnMgd2VyZSBvYnNlcnZlZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yICYmICEoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvQ2xpZW50QnVsa1dyaXRlRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXJ2ZXIgc2lkZSBlcnJvcnMgbmVlZCB0byBiZSB3cmFwcGVkIGluc2lkZSBhIE1vbmdvQ2xpZW50QnVsa1dyaXRlRXJyb3IsIHdoZXJlIHRoZSByb290XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXVzZSBpcyB0aGUgZXJyb3IgcHJvcGVydHkgYW5kIGEgcGFydGlhbCByZXN1bHQgaXMgdG8gYmUgaW5jbHVkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWxrV3JpdGVFcnJvciA9IG5ldyBlcnJvcl8xLk1vbmdvQ2xpZW50QnVsa1dyaXRlRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdNb25nbyBjbGllbnQgYnVsayB3cml0ZSBlbmNvdW50ZXJlZCBhbiBlcnJvciBkdXJpbmcgZXhlY3V0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWxrV3JpdGVFcnJvci5jYXVzZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVsa1dyaXRlRXJyb3IucGFydGlhbFJlc3VsdCA9IHJlc3VsdHNNZXJnZXIuYnVsa1dyaXRlUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgYnVsa1dyaXRlRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGllbnQgc2lkZSBlcnJvcnMgYXJlIGp1c3QgdGhyb3duLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHdyaXRlIGNvbmNlcm4gZXJyb3JzIG9yIHVub3JkZXJlZCB3cml0ZSBlcnJvcnMgYXQgdGhlIGVuZCB3ZSB0aHJvdy5cbiAgICAgICAgICAgIGlmIChyZXN1bHRzTWVyZ2VyLndyaXRlQ29uY2VybkVycm9ycy5sZW5ndGggPiAwIHx8IHJlc3VsdHNNZXJnZXIud3JpdGVFcnJvcnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBlcnJvcl8xLk1vbmdvQ2xpZW50QnVsa1dyaXRlRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTW9uZ28gY2xpZW50IGJ1bGsgd3JpdGUgZW5jb3VudGVyZWQgZXJyb3JzIGR1cmluZyBleGVjdXRpb24uJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVycm9yLndyaXRlQ29uY2VybkVycm9ycyA9IHJlc3VsdHNNZXJnZXIud3JpdGVDb25jZXJuRXJyb3JzO1xuICAgICAgICAgICAgICAgIGVycm9yLndyaXRlRXJyb3JzID0gcmVzdWx0c01lcmdlci53cml0ZUVycm9ycztcbiAgICAgICAgICAgICAgICBlcnJvci5wYXJ0aWFsUmVzdWx0ID0gcmVzdWx0c01lcmdlci5idWxrV3JpdGVSZXN1bHQ7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c01lcmdlci5idWxrV3JpdGVSZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNsaWVudEJ1bGtXcml0ZUV4ZWN1dG9yID0gQ2xpZW50QnVsa1dyaXRlRXhlY3V0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteResultsMerger = void 0;\nconst __1 = __webpack_require__(/*! ../.. */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/index.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/**\n * Unacknowledged bulk writes are always the same.\n */\nconst UNACKNOWLEDGED = {\n    acknowledged: false,\n    insertedCount: 0,\n    upsertedCount: 0,\n    matchedCount: 0,\n    modifiedCount: 0,\n    deletedCount: 0,\n    insertResults: undefined,\n    updateResults: undefined,\n    deleteResults: undefined\n};\n/**\n * Merges client bulk write cursor responses together into a single result.\n * @internal\n */\nclass ClientBulkWriteResultsMerger {\n    /**\n     * @returns The standard unacknowledged bulk write result.\n     */\n    static unacknowledged() {\n        return UNACKNOWLEDGED;\n    }\n    /**\n     * Instantiate the merger.\n     * @param options - The options.\n     */\n    constructor(options) {\n        this.options = options;\n        this.currentBatchOffset = 0;\n        this.writeConcernErrors = [];\n        this.writeErrors = new Map();\n        this.result = {\n            acknowledged: true,\n            insertedCount: 0,\n            upsertedCount: 0,\n            matchedCount: 0,\n            modifiedCount: 0,\n            deletedCount: 0,\n            insertResults: undefined,\n            updateResults: undefined,\n            deleteResults: undefined\n        };\n        if (options.verboseResults) {\n            this.result.insertResults = new Map();\n            this.result.updateResults = new Map();\n            this.result.deleteResults = new Map();\n        }\n    }\n    /**\n     * Get the bulk write result object.\n     */\n    get bulkWriteResult() {\n        return {\n            acknowledged: this.result.acknowledged,\n            insertedCount: this.result.insertedCount,\n            upsertedCount: this.result.upsertedCount,\n            matchedCount: this.result.matchedCount,\n            modifiedCount: this.result.modifiedCount,\n            deletedCount: this.result.deletedCount,\n            insertResults: this.result.insertResults,\n            updateResults: this.result.updateResults,\n            deleteResults: this.result.deleteResults\n        };\n    }\n    /**\n     * Merge the results in the cursor to the existing result.\n     * @param currentBatchOffset - The offset index to the original models.\n     * @param response - The cursor response.\n     * @param documents - The documents in the cursor.\n     * @returns The current result.\n     */\n    async merge(cursor) {\n        let writeConcernErrorResult;\n        try {\n            for await (const document of cursor) {\n                // Only add to maps if ok: 1\n                if (document.ok === 1) {\n                    if (this.options.verboseResults) {\n                        this.processDocument(cursor, document);\n                    }\n                }\n                else {\n                    // If an individual write error is encountered during an ordered bulk write, drivers MUST\n                    // record the error in writeErrors and immediately throw the exception. Otherwise, drivers\n                    // MUST continue to iterate the results cursor and execute any further bulkWrite batches.\n                    if (this.options.ordered) {\n                        const error = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client ordered bulk write encountered a write error.'\n                        });\n                        error.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                        error.partialResult = this.result;\n                        throw error;\n                    }\n                    else {\n                        this.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof __1.MongoWriteConcernError) {\n                const result = error.result;\n                writeConcernErrorResult = {\n                    insertedCount: result.nInserted,\n                    upsertedCount: result.nUpserted,\n                    matchedCount: result.nMatched,\n                    modifiedCount: result.nModified,\n                    deletedCount: result.nDeleted,\n                    writeConcernError: result.writeConcernError\n                };\n                if (this.options.verboseResults && result.cursor.firstBatch) {\n                    for (const document of result.cursor.firstBatch) {\n                        if (document.ok === 1) {\n                            this.processDocument(cursor, document);\n                        }\n                    }\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            // Update the counts from the cursor response.\n            if (cursor.response) {\n                const response = cursor.response;\n                this.incrementCounts(response);\n            }\n            // Increment the batch offset.\n            this.currentBatchOffset += cursor.operations.length;\n        }\n        // If we have write concern errors ensure they are added.\n        if (writeConcernErrorResult) {\n            const writeConcernError = writeConcernErrorResult.writeConcernError;\n            this.incrementCounts(writeConcernErrorResult);\n            this.writeConcernErrors.push({\n                code: writeConcernError.code,\n                message: writeConcernError.errmsg\n            });\n        }\n        return this.result;\n    }\n    /**\n     * Process an individual document in the results.\n     * @param cursor - The cursor.\n     * @param document - The document to process.\n     */\n    processDocument(cursor, document) {\n        // Get the corresponding operation from the command.\n        const operation = cursor.operations[document.idx];\n        // Handle insert results.\n        if ('insert' in operation) {\n            this.result.insertResults?.set(document.idx + this.currentBatchOffset, {\n                insertedId: operation.document._id\n            });\n        }\n        // Handle update results.\n        if ('update' in operation) {\n            const result = {\n                matchedCount: document.n,\n                modifiedCount: document.nModified ?? 0,\n                // Check if the bulk did actually upsert.\n                didUpsert: document.upserted != null\n            };\n            if (document.upserted) {\n                result.upsertedId = document.upserted._id;\n            }\n            this.result.updateResults?.set(document.idx + this.currentBatchOffset, result);\n        }\n        // Handle delete results.\n        if ('delete' in operation) {\n            this.result.deleteResults?.set(document.idx + this.currentBatchOffset, {\n                deletedCount: document.n\n            });\n        }\n    }\n    /**\n     * Increment the result counts.\n     * @param document - The document with the results.\n     */\n    incrementCounts(document) {\n        this.result.insertedCount += document.insertedCount;\n        this.result.upsertedCount += document.upsertedCount;\n        this.result.matchedCount += document.matchedCount;\n        this.result.modifiedCount += document.modifiedCount;\n        this.result.deletedCount += document.deletedCount;\n    }\n}\nexports.ClientBulkWriteResultsMerger = ClientBulkWriteResultsMerger;\n//# sourceMappingURL=results_merger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/collections.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/collections.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixxQkFBcUIsbUJBQU8sQ0FBQywyR0FBZTtBQUM1QyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixJQUFJLCtFQUErRTtBQUNsSDtBQUNBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxjb2xsZWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sbGVjdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ29sbGVjdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIExldCdzIGdldCB0aGUgY29sbGVjdGlvbiBuYW1lc1xuICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCB0aGlzLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHt9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IHRydWUsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLCBzZXNzaW9uIH0pXG4gICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSB9IG9mIGRvY3VtZW50cykge1xuICAgICAgICAgICAgaWYgKCFuYW1lLmluY2x1ZGVzKCckJykpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgY29sbGVjdGlvbnMgcmVtb3ZpbmcgYW55IGlsbGVnYWwgb25lc1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25zLnB1c2gobmV3IGNvbGxlY3Rpb25fMS5Db2xsZWN0aW9uKHRoaXMuZGIsIG5hbWUsIHRoaXMuZGIucy5vcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBjb2xsZWN0aW9uIG9iamVjdHNcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sbGVjdGlvbnNPcGVyYXRpb24gPSBDb2xsZWN0aW9uc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n            if (this.explain)\n                (0, explain_1.validateExplainTimeoutOptions)(this.options, this.explain);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return super.canRetryWrite;\n    }\n    async executeCommand(server, session, cmd, timeoutContext, responseType) {\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            timeoutContext,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, explain_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return await server.command(this.ns, cmd, options, responseType);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbW1hbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHFHQUFZO0FBQ3RDLHVCQUF1QixtQkFBTyxDQUFDLCtHQUFpQjtBQUNoRCwyQkFBMkIsbUJBQU8sQ0FBQyxpSUFBMEI7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsd0JBQXdCLG1CQUFPLENBQUMsaUhBQWtCO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXGNvbW1hbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbW1hbmRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgZXhwbGFpbl8xID0gcmVxdWlyZShcIi4uL2V4cGxhaW5cIik7XG5jb25zdCByZWFkX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi9yZWFkX2NvbmNlcm5cIik7XG5jb25zdCBzZXJ2ZXJfc2VsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb21tYW5kT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgLy8gTk9URTogdGhpcyB3YXMgZXhwbGljaXRseSBhZGRlZCBmb3IgdGhlIGFkZC9yZW1vdmUgdXNlciBvcGVyYXRpb25zLCBpdCdzIGxpa2VseVxuICAgICAgICAvLyAgICAgICBzb21ldGhpbmcgd2UnZCB3YW50IHRvIHJlY29uc2lkZXIuIFBlcmhhcHMgdGhvc2UgY29tbWFuZHMgY2FuIHVzZSBgQWRtaW5gXG4gICAgICAgIC8vICAgICAgIGFzIGEgcGFyZW50P1xuICAgICAgICBjb25zdCBkYk5hbWVPdmVycmlkZSA9IG9wdGlvbnM/LmRiTmFtZSB8fCBvcHRpb25zPy5hdXRoZGI7XG4gICAgICAgIGlmIChkYk5hbWVPdmVycmlkZSkge1xuICAgICAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoZGJOYW1lT3ZlcnJpZGUsICckY21kJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5zID0gcGFyZW50XG4gICAgICAgICAgICAgICAgPyBwYXJlbnQucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKVxuICAgICAgICAgICAgICAgIDogbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZENvbmNlcm4gPSByZWFkX2NvbmNlcm5fMS5SZWFkQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy53cml0ZUNvbmNlcm4gPSB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSkge1xuICAgICAgICAgICAgdGhpcy5leHBsYWluID0gZXhwbGFpbl8xLkV4cGxhaW4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAodGhpcy5leHBsYWluKVxuICAgICAgICAgICAgICAgICgwLCBleHBsYWluXzEudmFsaWRhdGVFeHBsYWluVGltZW91dE9wdGlvbnMpKHRoaXMub3B0aW9ucywgdGhpcy5leHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zPy5leHBsYWluICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYE9wdGlvbiBcImV4cGxhaW5cIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgY29tbWFuZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGFpbiA9PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5jYW5SZXRyeVdyaXRlO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCwgdGltZW91dENvbnRleHQsIHJlc3BvbnNlVHlwZSkge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuYnNvbk9wdGlvbnMsXG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dCxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBjb25zdCBpblRyYW5zYWN0aW9uID0gdGhpcy5zZXNzaW9uICYmIHRoaXMuc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLnJlYWRDb25jZXJuICYmICgwLCB1dGlsc18xLmNvbW1hbmRTdXBwb3J0c1JlYWRDb25jZXJuKShjbWQpICYmICFpblRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyByZWFkQ29uY2VybjogdGhpcy5yZWFkQ29uY2VybiB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cnlTZWNvbmRhcnlXcml0ZSAmJiBzZXJ2ZXJXaXJlVmVyc2lvbiA8IHNlcnZlcl9zZWxlY3Rpb25fMS5NSU5fU0VDT05EQVJZX1dSSVRFX1dJUkVfVkVSU0lPTikge1xuICAgICAgICAgICAgb3B0aW9ucy5vbWl0UmVhZFByZWZlcmVuY2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKSAmJiAhaW5UcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5hcHBseShjbWQsIHRoaXMud3JpdGVDb25jZXJuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24gJiZcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmNvbGxhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT04pKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyBjb2xsYXRpb246IG9wdGlvbnMuY29sbGF0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSkgJiYgdGhpcy5leHBsYWluKSB7XG4gICAgICAgICAgICBjbWQgPSAoMCwgZXhwbGFpbl8xLmRlY29yYXRlV2l0aEV4cGxhaW4pKGNtZCwgdGhpcy5leHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywgY21kLCBvcHRpb25zLCByZXNwb25zZVR5cGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tbWFuZE9wZXJhdGlvbiA9IENvbW1hbmRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/count.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/count.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSyx3QkFBd0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxjb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ291bnRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lc3BhY2UsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IHM6IHsgbmFtZXNwYWNlOiBuYW1lc3BhY2UgfSB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IG5hbWVzcGFjZS5jb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZmlsdGVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY291bnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY21kID0ge1xuICAgICAgICAgICAgY291bnQ6IHRoaXMuY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyeVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubGltaXQgPSBvcHRpb25zLmxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLnNraXAgPSBvcHRpb25zLnNraXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGludCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbWQuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQubiA6IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IENvdW50T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENvdW50T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/create_collection.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/create_collection.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'timeoutMS',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'create';\n    }\n    async execute(server, session, timeoutContext) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.s.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = indexes_1.CreateIndexesOperation.fromIndexSpecification(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session, timeoutContext);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session, timeoutContext) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd, timeoutContext);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQywrSUFBaUM7QUFDN0QscUJBQXFCLG1CQUFPLENBQUMsMkdBQWU7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0JBQWdCLEdBQUcsS0FBSztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELG9CQUFvQix5Q0FBeUMsNENBQTRDO0FBQ3RLO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRixnRkFBZ0YsS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0dBQXNHLG9CQUFvQixJQUFJO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXGNyZWF0ZV9jb2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi9pbmRleGVzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG5jb25zdCBJTExFR0FMX0NPTU1BTkRfRklFTERTID0gbmV3IFNldChbXG4gICAgJ3cnLFxuICAgICd3dGltZW91dCcsXG4gICAgJ3RpbWVvdXRNUycsXG4gICAgJ2onLFxuICAgICdmc3luYycsXG4gICAgJ2F1dG9JbmRleElkJyxcbiAgICAncGtGYWN0b3J5JyxcbiAgICAncmF3JyxcbiAgICAncmVhZFByZWZlcmVuY2UnLFxuICAgICdzZXNzaW9uJyxcbiAgICAncmVhZENvbmNlcm4nLFxuICAgICd3cml0ZUNvbmNlcm4nLFxuICAgICdyYXcnLFxuICAgICdmaWVsZHNBc1JhdycsXG4gICAgJ3VzZUJpZ0ludDY0JyxcbiAgICAncHJvbW90ZUxvbmdzJyxcbiAgICAncHJvbW90ZVZhbHVlcycsXG4gICAgJ3Byb21vdGVCdWZmZXJzJyxcbiAgICAnYnNvblJlZ0V4cCcsXG4gICAgJ3NlcmlhbGl6ZUZ1bmN0aW9ucycsXG4gICAgJ2lnbm9yZVVuZGVmaW5lZCcsXG4gICAgJ2VuYWJsZVV0ZjhWYWxpZGF0aW9uJ1xuXSk7XG4vKiBAaW50ZXJuYWwgKi9cbmNvbnN0IElOVkFMSURfUUVfVkVSU0lPTiA9ICdEcml2ZXIgc3VwcG9ydCBvZiBRdWVyeWFibGUgRW5jcnlwdGlvbiBpcyBpbmNvbXBhdGlibGUgd2l0aCBzZXJ2ZXIuIFVwZ3JhZGUgc2VydmVyIHRvIHVzZSBRdWVyeWFibGUgRW5jcnlwdGlvbi4nO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY3JlYXRlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkRmllbGRzID0gb3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHMgPz9cbiAgICAgICAgICAgIGRiLmNsaWVudC5zLm9wdGlvbnMuYXV0b0VuY3J5cHRpb24/LmVuY3J5cHRlZEZpZWxkc01hcD8uW2Ake2RiLmRhdGFiYXNlTmFtZX0uJHtuYW1lfWBdO1xuICAgICAgICBpZiAoZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGluZyBhIFFFIGNvbGxlY3Rpb24gcmVxdWlyZWQgbWluIHNlcnZlciBvZiA3LjAuMFxuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTUzNTMpOiBHZXQgd2lyZSB2ZXJzaW9uIGluZm9ybWF0aW9uIGZyb20gY29ubmVjdGlvbi5cbiAgICAgICAgICAgIGlmICghc2VydmVyLmxvYWRCYWxhbmNlZCAmJlxuICAgICAgICAgICAgICAgIHNlcnZlci5kZXNjcmlwdGlvbi5tYXhXaXJlVmVyc2lvbiA8IGNvbnN0YW50c18xLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoYCR7SU5WQUxJRF9RRV9WRVJTSU9OfSBUaGUgbWluaW11bSBzZXJ2ZXIgdmVyc2lvbiByZXF1aXJlZCBpcyAke2NvbnN0YW50c18xLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT059YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDcmVhdGUgYXV4aWxsaWFyeSBjb2xsZWN0aW9ucyBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGVzY0NvbGxlY3Rpb24gPSBlbmNyeXB0ZWRGaWVsZHMuZXNjQ29sbGVjdGlvbiA/PyBgZW54Y29sXy4ke25hbWV9LmVzY2A7XG4gICAgICAgICAgICBjb25zdCBlY29jQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lY29jQ29sbGVjdGlvbiA/PyBgZW54Y29sXy4ke25hbWV9LmVjb2NgO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb2xsZWN0aW9uTmFtZSBvZiBbZXNjQ29sbGVjdGlvbiwgZWNvY0NvbGxlY3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlT3AgPSBuZXcgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbihkYiwgY29sbGVjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY2x1c3RlcmVkSW5kZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBfaWQ6IDEgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY3JlYXRlT3AuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgZW5jcnlwdGVkRmllbGRzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sbCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1aXJlZCBpbmRleCBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUluZGV4T3AgPSBpbmRleGVzXzEuQ3JlYXRlSW5kZXhlc09wZXJhdGlvbi5mcm9tSW5kZXhTcGVjaWZpY2F0aW9uKGRiLCBuYW1lLCB7IF9fc2FmZUNvbnRlbnRfXzogMSB9LCB7fSk7XG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVJbmRleE9wLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgY3JlYXRlOiBuYW1lIH07XG4gICAgICAgIGZvciAoY29uc3QgbiBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uc1tuXSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnNbbl0gIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAhSUxMRUdBTF9DT01NQU5EX0ZJRUxEUy5oYXMobikpIHtcbiAgICAgICAgICAgICAgICBjbWRbbl0gPSBvcHRpb25zW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG90aGVyd2lzZSBqdXN0IGV4ZWN1dGUgdGhlIGNvbW1hbmRcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQsIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbihkYiwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlX2NvbGxlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/delete.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/delete.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nexports.makeDeleteStatement = makeDeleteStatement;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'delete';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command, timeoutContext);\n        return res;\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2RlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUI7QUFDbEYsMkJBQTJCO0FBQzNCLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLHFFQUFxRSxzQkFBc0I7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxkZWxldGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlbGV0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLkRlbGV0ZU9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuRGVsZXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuZXhwb3J0cy5tYWtlRGVsZXRlU3RhdGVtZW50ID0gbWFrZURlbGV0ZVN0YXRlbWVudDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEZWxldGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHN0YXRlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmIChzdXBlci5jYW5SZXRyeVdyaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZlcnkob3AgPT4gKG9wLmxpbWl0ICE9IG51bGwgPyBvcC5saW1pdCA+IDAgOiB0cnVlKSk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRlbGV0ZTogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZGVsZXRlczogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5sZXQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubGV0ID0gb3B0aW9ucy5sZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuYWNrbm93bGVkZ2VkV3JpdGUgPSB0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLndyaXRlQ29uY2Vybi53ID09PSAwO1xuICAgICAgICBpZiAodW5hY2tub3dsZWRnZWRXcml0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVtZW50cy5maW5kKChvKSA9PiBvLmhpbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM1NDEpOiBmaXggZXJyb3IgZm9yIGhpbnQgd2l0aCB1bmFja25vd2xlZGdlZCB3cml0ZXNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgaGludCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSBEZWxldGVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVPbmVPcGVyYXRpb24gZXh0ZW5kcyBEZWxldGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZURlbGV0ZVN0YXRlbWVudChmaWx0ZXIsIHsgLi4ub3B0aW9ucywgbGltaXQ6IDEgfSldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlT25lT3BlcmF0aW9uID0gRGVsZXRlT25lT3BlcmF0aW9uO1xuY2xhc3MgRGVsZXRlTWFueU9wZXJhdGlvbiBleHRlbmRzIERlbGV0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIFttYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlTWFueU9wZXJhdGlvbiA9IERlbGV0ZU1hbnlPcGVyYXRpb247XG5mdW5jdGlvbiBtYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9wID0ge1xuICAgICAgICBxOiBmaWx0ZXIsXG4gICAgICAgIGxpbWl0OiB0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmxpbWl0IDogMFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgICAgIG9wLmNvbGxhdGlvbiA9IG9wdGlvbnMuY29sbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgIG9wLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuICAgIHJldHVybiBvcDtcbn1cbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlT25lT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU1hbnlPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/distinct.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/distinct.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return 'distinct';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Rpc3RpbmN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcZGlzdGluY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKlxuICogUmV0dXJuIGEgbGlzdCBvZiBkaXN0aW5jdCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBrZXkgYWNyb3NzIGEgY29sbGVjdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBEaXN0aW5jdE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBEaXN0aW5jdCBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiAtIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGtleSAtIEZpZWxkIG9mIHRoZSBkb2N1bWVudCB0byBmaW5kIGRpc3RpbmN0IHZhbHVlcyBmb3IuXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IGZvciBmaWx0ZXJpbmcgdGhlIHNldCBvZiBkb2N1bWVudHMgdG8gd2hpY2ggd2UgYXBwbHkgdGhlIGRpc3RpbmN0IGZpbHRlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzLiBTZWUgQ29sbGVjdGlvbi5wcm90b3R5cGUuZGlzdGluY3QgZm9yIGEgbGlzdCBvZiBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGtleSwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkaXN0aW5jdCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleTtcbiAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAvLyBEaXN0aW5jdCBjb21tYW5kXG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGRpc3RpbmN0OiBjb2xsLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQWRkIG1heFRpbWVNUyBpZiBkZWZpbmVkXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb21tZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGludCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbWQuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB3ZSBoYXZlIGEgcmVhZENvbmNlcm4gc3BlY2lmaWVkXG4gICAgICAgICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aFJlYWRDb25jZXJuKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBIYXZlIHdlIHNwZWNpZmllZCBjb2xsYXRpb25cbiAgICAgICAgKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoQ29sbGF0aW9uKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCwgdGltZW91dENvbnRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5leHBsYWluID8gcmVzdWx0IDogcmVzdWx0LnZhbHVlcztcbiAgICB9XG59XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gRGlzdGluY3RPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGlzdGluY3RPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/drop.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/drop.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return 'drop';\n    }\n    async execute(server, session, timeoutContext) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.s.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return await this.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { drop: this.name }, timeoutContext);\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dropDatabase';\n    }\n    async execute(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { dropDatabase: 1 }, timeoutContext);\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Ryb3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsK0JBQStCO0FBQy9ELGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsZ0JBQWdCLEdBQUcsS0FBSztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsTUFBTSxJQUFJLGlCQUFpQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxLQUFLO0FBQ25GLGdGQUFnRixLQUFLO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcZHJvcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHJvcERhdGFiYXNlT3BlcmF0aW9uID0gZXhwb3J0cy5Ecm9wQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZEZpZWxkc01hcCA9IGRiLmNsaWVudC5zLm9wdGlvbnMuYXV0b0VuY3J5cHRpb24/LmVuY3J5cHRlZEZpZWxkc01hcDtcbiAgICAgICAgbGV0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/IGVuY3J5cHRlZEZpZWxkc01hcD8uW2Ake2RiLmRhdGFiYXNlTmFtZX0uJHtuYW1lfWBdO1xuICAgICAgICBpZiAoIWVuY3J5cHRlZEZpZWxkcyAmJiBlbmNyeXB0ZWRGaWVsZHNNYXApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBNb25nb0NsaWVudCB3YXMgY29uZmlndXJlZCB3aXRoIGFuIGVuY3J5cHRlZEZpZWxkc01hcCxcbiAgICAgICAgICAgIC8vIGFuZCBubyBlbmNyeXB0ZWRGaWVsZHMgY29uZmlnIHdhcyBhdmFpbGFibGUgaW4gaXQgb3IgZXhwbGljaXRseVxuICAgICAgICAgICAgLy8gcGFzc2VkIGFzIGFuIGFyZ3VtZW50LCB0aGUgc3BlYyB0ZWxscyB1cyB0byBsb29rIG9uZSB1cCB1c2luZ1xuICAgICAgICAgICAgLy8gbGlzdENvbGxlY3Rpb25zKCkuXG4gICAgICAgICAgICBjb25zdCBsaXN0Q29sbGVjdGlvbnNSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lIH0sIHsgbmFtZU9ubHk6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEZpZWxkcyA9IGxpc3RDb2xsZWN0aW9uc1Jlc3VsdD8uWzBdPy5vcHRpb25zPy5lbmNyeXB0ZWRGaWVsZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAvLyBEcm9wIGF1eGlsbGlhcnkgY29sbGVjdGlvbnMsIGlnbm9yaW5nIHBvdGVudGlhbCBOYW1lc3BhY2VOb3RGb3VuZCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgY29uc3QgZHJvcE9wID0gbmV3IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZHJvcE9wLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLmNvZGUgIT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5OYW1lc3BhY2VOb3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcDogdGhpcy5uYW1lIH0sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wQ29sbGVjdGlvbk9wZXJhdGlvbiA9IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcERhdGFiYXNlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BEYXRhYmFzZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcERhdGFiYXNlOiAxIH0sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wRGF0YWJhc2VPcGVyYXRpb24gPSBEcm9wRGF0YWJhc2VPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRHJvcENvbGxlY3Rpb25PcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRHJvcERhdGFiYXNlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd, timeoutContext);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2VzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1Q0FBdUM7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXGVzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NvdW50JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgY291bnQ6IHRoaXMuY29sbGVjdGlvbk5hbWUgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IHRoaXMub3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQsIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlPy5uIHx8IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNVUlNPUl9DUkVBVElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeOperation = executeOperation;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected, see {@link autoConnect}\n * - Creates a session if none is provided and cleans up the session it creates\n * - Tries an operation and retries under certain conditions, see {@link tryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */\nasync function executeOperation(client, operation, timeoutContext) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    const topology = client.topology == null\n        ? await (0, utils_1.abortable)(autoConnect(client), operation.options)\n        : client.topology;\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (inTransaction &&\n        !readPreference.equals(read_preference_1.ReadPreference.primary) &&\n        (hasReadAspect || operation.commandName === 'runCommand')) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    timeoutContext ??= timeout_1.TimeoutContext.create({\n        session,\n        serverSelectionTimeoutMS: client.s.options.serverSelectionTimeoutMS,\n        waitQueueTimeoutMS: client.s.options.waitQueueTimeoutMS,\n        timeoutMS: operation.options.timeoutMS\n    });\n    try {\n        return await tryOperation(operation, {\n            topology,\n            timeoutContext,\n            session,\n            readPreference\n        });\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession();\n        }\n    }\n}\n/**\n * Connects a client if it has not yet been connected\n * @internal\n */\nasync function autoConnect(client) {\n    if (client.topology == null) {\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options.__skipPingOnConnect = true;\n        try {\n            await client.connect();\n            if (client.topology == null) {\n                throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n            }\n            return client.topology;\n        }\n        finally {\n            delete client.s.options.__skipPingOnConnect;\n        }\n    }\n    return client.topology;\n}\n/**\n * Executes an operation and retries as appropriate\n * @internal\n *\n * @remarks\n * Implements behaviour described in [Retryable Reads](https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md) and [Retryable\n * Writes](https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md) specification\n *\n * This function:\n * - performs initial server selection\n * - attempts to execute an operation\n * - retries the operation if it meets the criteria for a retryable read or a retryable write\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param operation - The operation to execute\n * */\nasync function tryOperation(operation, { topology, timeoutContext, session, readPreference }) {\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    let server = await topology.selectServer(selector, {\n        session,\n        operationName: operation.commandName,\n        timeoutContext,\n        signal: operation.options.signal\n    });\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const inTransaction = session?.inTransaction() ?? false;\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const willRetry = operation.hasAspect(operation_1.Aspect.RETRYABLE) &&\n        session != null &&\n        ((hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite));\n    if (hasWriteAspect && willRetryWrite && session != null) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    const maxTries = willRetry ? (timeoutContext.csotEnabled() ? Infinity : 2) : 1;\n    let previousOperationError;\n    let previousServer;\n    for (let tries = 0; tries < maxTries; tries++) {\n        if (previousOperationError) {\n            if (hasWriteAspect && previousOperationError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n                throw new error_1.MongoServerError({\n                    message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    originalError: previousOperationError\n                });\n            }\n            if (operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING) && !operation.canRetryWrite) {\n                throw previousOperationError;\n            }\n            if (hasWriteAspect && !(0, error_1.isRetryableWriteError)(previousOperationError))\n                throw previousOperationError;\n            if (hasReadAspect && !(0, error_1.isRetryableReadError)(previousOperationError))\n                throw previousOperationError;\n            if (previousOperationError instanceof error_1.MongoNetworkError &&\n                operation.hasAspect(operation_1.Aspect.CURSOR_CREATING) &&\n                session != null &&\n                session.isPinned &&\n                !session.inTransaction()) {\n                session.unpin({ force: true, forceClear: true });\n            }\n            server = await topology.selectServer(selector, {\n                session,\n                operationName: operation.commandName,\n                previousServer,\n                signal: operation.options.signal\n            });\n            if (hasWriteAspect && !(0, utils_1.supportsRetryableWrites)(server)) {\n                throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n            }\n        }\n        try {\n            // If tries > 0 and we are command batching we need to reset the batch.\n            if (tries > 0 && operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING)) {\n                operation.resetBatch();\n            }\n            return await operation.execute(server, session, timeoutContext);\n        }\n        catch (operationError) {\n            if (!(operationError instanceof error_1.MongoError))\n                throw operationError;\n            if (previousOperationError != null &&\n                operationError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n                throw previousOperationError;\n            }\n            previousServer = server.description;\n            previousOperationError = operationError;\n            // Reset timeouts\n            timeoutContext.clear();\n        }\n    }\n    throw (previousOperationError ??\n        new error_1.MongoRuntimeError('Tried to propagate retryability error, but no error was found.'));\n}\n//# sourceMappingURL=execute_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQywwQkFBMEIsbUJBQU8sQ0FBQyxxSEFBb0I7QUFDdEQsMkJBQTJCLG1CQUFPLENBQUMsaUlBQTBCO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLHFHQUFZO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msd0JBQXdCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEdBQTBHLG9CQUFvQjtBQUM5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxtREFBbUQ7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywrQkFBK0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxleGVjdXRlX29wZXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhlY3V0ZU9wZXJhdGlvbiA9IGV4ZWN1dGVPcGVyYXRpb247XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3Qgc2VydmVyX3NlbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vc2VydmVyX3NlbGVjdGlvblwiKTtcbmNvbnN0IHRpbWVvdXRfMSA9IHJlcXVpcmUoXCIuLi90aW1lb3V0XCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY29uc3QgTU1BUHYxX1JFVFJZX1dSSVRFU19FUlJPUl9DT0RFID0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLklsbGVnYWxPcGVyYXRpb247XG5jb25zdCBNTUFQdjFfUkVUUllfV1JJVEVTX0VSUk9SX01FU1NBR0UgPSAnVGhpcyBNb25nb0RCIGRlcGxveW1lbnQgZG9lcyBub3Qgc3VwcG9ydCByZXRyeWFibGUgd3JpdGVzLiBQbGVhc2UgYWRkIHJldHJ5V3JpdGVzPWZhbHNlIHRvIHlvdXIgY29ubmVjdGlvbiBzdHJpbmcuJztcbi8qKlxuICogRXhlY3V0ZXMgdGhlIGdpdmVuIG9wZXJhdGlvbiB3aXRoIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAqIEBpbnRlcm5hbFxuICpcbiAqIEByZW1hcmtzXG4gKiBBbGxvd3MgZm9yIGEgc2luZ2xlIHBvaW50IG9mIGVudHJ5IHRvIHByb3ZpZGUgZmVhdHVyZXMgc3VjaCBhcyBpbXBsaWNpdCBzZXNzaW9ucywgd2hpY2hcbiAqIGFyZSByZXF1aXJlZCBieSB0aGUgRHJpdmVyIFNlc3Npb25zIHNwZWNpZmljYXRpb24gaW4gdGhlIGV2ZW50IHRoYXQgYSBDbGllbnRTZXNzaW9uIGlzXG4gKiBub3QgcHJvdmlkZWQuXG4gKlxuICogVGhlIGV4cGVjdGF0aW9uIGlzIHRoYXQgdGhpcyBmdW5jdGlvbjpcbiAqIC0gQ29ubmVjdHMgdGhlIE1vbmdvQ2xpZW50IGlmIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuIGNvbm5lY3RlZCwgc2VlIHtAbGluayBhdXRvQ29ubmVjdH1cbiAqIC0gQ3JlYXRlcyBhIHNlc3Npb24gaWYgbm9uZSBpcyBwcm92aWRlZCBhbmQgY2xlYW5zIHVwIHRoZSBzZXNzaW9uIGl0IGNyZWF0ZXNcbiAqIC0gVHJpZXMgYW4gb3BlcmF0aW9uIGFuZCByZXRyaWVzIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgc2VlIHtAbGluayB0cnlPcGVyYXRpb259XG4gKlxuICogQHR5cGVQYXJhbSBUIC0gVGhlIG9wZXJhdGlvbidzIHR5cGVcbiAqIEB0eXBlUGFyYW0gVFJlc3VsdCAtIFRoZSB0eXBlIG9mIHRoZSBvcGVyYXRpb24ncyByZXN1bHQsIGNhbGN1bGF0ZWQgZnJvbSBUXG4gKlxuICogQHBhcmFtIGNsaWVudCAtIFRoZSBNb25nb0NsaWVudCB0byBleGVjdXRlIHRoaXMgb3BlcmF0aW9uIHdpdGhcbiAqIEBwYXJhbSBvcGVyYXRpb24gLSBUaGUgb3BlcmF0aW9uIHRvIGV4ZWN1dGVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZU9wZXJhdGlvbihjbGllbnQsIG9wZXJhdGlvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICBpZiAoIShvcGVyYXRpb24gaW5zdGFuY2VvZiBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbikpIHtcbiAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBFeHRlbmQgTW9uZ29SdW50aW1lRXJyb3JcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1RoaXMgbWV0aG9kIHJlcXVpcmVzIGEgdmFsaWQgb3BlcmF0aW9uIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGNvbnN0IHRvcG9sb2d5ID0gY2xpZW50LnRvcG9sb2d5ID09IG51bGxcbiAgICAgICAgPyBhd2FpdCAoMCwgdXRpbHNfMS5hYm9ydGFibGUpKGF1dG9Db25uZWN0KGNsaWVudCksIG9wZXJhdGlvbi5vcHRpb25zKVxuICAgICAgICA6IGNsaWVudC50b3BvbG9neTtcbiAgICAvLyBUaGUgZHJpdmVyIHNlc3Npb25zIHNwZWMgbWFuZGF0ZXMgdGhhdCB3ZSBpbXBsaWNpdGx5IGNyZWF0ZSBzZXNzaW9ucyBmb3Igb3BlcmF0aW9uc1xuICAgIC8vIHRoYXQgYXJlIG5vdCBleHBsaWNpdGx5IHByb3ZpZGVkIHdpdGggYSBzZXNzaW9uLlxuICAgIGxldCBzZXNzaW9uID0gb3BlcmF0aW9uLnNlc3Npb247XG4gICAgbGV0IG93bmVyO1xuICAgIGlmIChzZXNzaW9uID09IG51bGwpIHtcbiAgICAgICAgb3duZXIgPSBTeW1ib2woKTtcbiAgICAgICAgc2Vzc2lvbiA9IGNsaWVudC5zdGFydFNlc3Npb24oeyBvd25lciwgZXhwbGljaXQ6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZXNzaW9uLmhhc0VuZGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvRXhwaXJlZFNlc3Npb25FcnJvcignVXNlIG9mIGV4cGlyZWQgc2Vzc2lvbnMgaXMgbm90IHBlcm1pdHRlZCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZXNzaW9uLnNuYXBzaG90RW5hYmxlZCAmJiAhdG9wb2xvZ3kuY2FwYWJpbGl0aWVzLnN1cHBvcnRzU25hcHNob3RSZWFkcykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcignU25hcHNob3QgcmVhZHMgcmVxdWlyZSBNb25nb0RCIDUuMCBvciBsYXRlcicpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZXNzaW9uLmNsaWVudCAhPT0gY2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0NsaWVudFNlc3Npb24gbXVzdCBiZSBmcm9tIHRoZSBzYW1lIE1vbmdvQ2xpZW50Jyk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gb3BlcmF0aW9uLnJlYWRQcmVmZXJlbmNlID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgY29uc3QgaW5UcmFuc2FjdGlvbiA9ICEhc2Vzc2lvbj8uaW5UcmFuc2FjdGlvbigpO1xuICAgIGNvbnN0IGhhc1JlYWRBc3BlY3QgPSBvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTik7XG4gICAgaWYgKGluVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgIXJlYWRQcmVmZXJlbmNlLmVxdWFscyhyZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5KSAmJlxuICAgICAgICAoaGFzUmVhZEFzcGVjdCB8fCBvcGVyYXRpb24uY29tbWFuZE5hbWUgPT09ICdydW5Db21tYW5kJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29UcmFuc2FjdGlvbkVycm9yKGBSZWFkIHByZWZlcmVuY2UgaW4gYSB0cmFuc2FjdGlvbiBtdXN0IGJlIHByaW1hcnksIG5vdDogJHtyZWFkUHJlZmVyZW5jZS5tb2RlfWApO1xuICAgIH1cbiAgICBpZiAoc2Vzc2lvbj8uaXNQaW5uZWQgJiYgc2Vzc2lvbi50cmFuc2FjdGlvbi5pc0NvbW1pdHRlZCAmJiAhb3BlcmF0aW9uLmJ5cGFzc1Bpbm5pbmdDaGVjaykge1xuICAgICAgICBzZXNzaW9uLnVucGluKCk7XG4gICAgfVxuICAgIHRpbWVvdXRDb250ZXh0ID8/PSB0aW1lb3V0XzEuVGltZW91dENvbnRleHQuY3JlYXRlKHtcbiAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiBjbGllbnQucy5vcHRpb25zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyxcbiAgICAgICAgd2FpdFF1ZXVlVGltZW91dE1TOiBjbGllbnQucy5vcHRpb25zLndhaXRRdWV1ZVRpbWVvdXRNUyxcbiAgICAgICAgdGltZW91dE1TOiBvcGVyYXRpb24ub3B0aW9ucy50aW1lb3V0TVNcbiAgICB9KTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdHJ5T3BlcmF0aW9uKG9wZXJhdGlvbiwge1xuICAgICAgICAgICAgdG9wb2xvZ3ksXG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dCxcbiAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGlmIChzZXNzaW9uPy5vd25lciAhPSBudWxsICYmIHNlc3Npb24ub3duZXIgPT09IG93bmVyKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ29ubmVjdHMgYSBjbGllbnQgaWYgaXQgaGFzIG5vdCB5ZXQgYmVlbiBjb25uZWN0ZWRcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiBhdXRvQ29ubmVjdChjbGllbnQpIHtcbiAgICBpZiAoY2xpZW50LnRvcG9sb2d5ID09IG51bGwpIHtcbiAgICAgICAgaWYgKGNsaWVudC5zLmhhc0JlZW5DbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTm90Q29ubmVjdGVkRXJyb3IoJ0NsaWVudCBtdXN0IGJlIGNvbm5lY3RlZCBiZWZvcmUgcnVubmluZyBvcGVyYXRpb25zJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpZW50LnMub3B0aW9ucy5fX3NraXBQaW5nT25Db25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XG4gICAgICAgICAgICBpZiAoY2xpZW50LnRvcG9sb2d5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignY2xpZW50LmNvbm5lY3QgZGlkIG5vdCBjcmVhdGUgYSB0b3BvbG9neSBidXQgYWxzbyBkaWQgbm90IHRocm93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LnRvcG9sb2d5O1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgZGVsZXRlIGNsaWVudC5zLm9wdGlvbnMuX19za2lwUGluZ09uQ29ubmVjdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xpZW50LnRvcG9sb2d5O1xufVxuLyoqXG4gKiBFeGVjdXRlcyBhbiBvcGVyYXRpb24gYW5kIHJldHJpZXMgYXMgYXBwcm9wcmlhdGVcbiAqIEBpbnRlcm5hbFxuICpcbiAqIEByZW1hcmtzXG4gKiBJbXBsZW1lbnRzIGJlaGF2aW91ciBkZXNjcmliZWQgaW4gW1JldHJ5YWJsZSBSZWFkc10oaHR0cHM6Ly9naXRodWIuY29tL21vbmdvZGIvc3BlY2lmaWNhdGlvbnMvYmxvYi9tYXN0ZXIvc291cmNlL3JldHJ5YWJsZS1yZWFkcy9yZXRyeWFibGUtcmVhZHMubWQpIGFuZCBbUmV0cnlhYmxlXG4gKiBXcml0ZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9yZXRyeWFibGUtd3JpdGVzL3JldHJ5YWJsZS13cml0ZXMubWQpIHNwZWNpZmljYXRpb25cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uOlxuICogLSBwZXJmb3JtcyBpbml0aWFsIHNlcnZlciBzZWxlY3Rpb25cbiAqIC0gYXR0ZW1wdHMgdG8gZXhlY3V0ZSBhbiBvcGVyYXRpb25cbiAqIC0gcmV0cmllcyB0aGUgb3BlcmF0aW9uIGlmIGl0IG1lZXRzIHRoZSBjcml0ZXJpYSBmb3IgYSByZXRyeWFibGUgcmVhZCBvciBhIHJldHJ5YWJsZSB3cml0ZVxuICpcbiAqIEB0eXBlUGFyYW0gVCAtIFRoZSBvcGVyYXRpb24ncyB0eXBlXG4gKiBAdHlwZVBhcmFtIFRSZXN1bHQgLSBUaGUgdHlwZSBvZiB0aGUgb3BlcmF0aW9uJ3MgcmVzdWx0LCBjYWxjdWxhdGVkIGZyb20gVFxuICpcbiAqIEBwYXJhbSBvcGVyYXRpb24gLSBUaGUgb3BlcmF0aW9uIHRvIGV4ZWN1dGVcbiAqICovXG5hc3luYyBmdW5jdGlvbiB0cnlPcGVyYXRpb24ob3BlcmF0aW9uLCB7IHRvcG9sb2d5LCB0aW1lb3V0Q29udGV4dCwgc2Vzc2lvbiwgcmVhZFByZWZlcmVuY2UgfSkge1xuICAgIGxldCBzZWxlY3RvcjtcbiAgICBpZiAob3BlcmF0aW9uLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVIpKSB7XG4gICAgICAgIC8vIEdldE1vcmUgYW5kIEtpbGxDdXJzb3Igb3BlcmF0aW9ucyBtdXN0IGFsd2F5cyBzZWxlY3QgdGhlIHNhbWUgc2VydmVyLCBidXQgcnVuIHRocm91Z2hcbiAgICAgICAgLy8gc2VydmVyIHNlbGVjdGlvbiB0byBwb3RlbnRpYWxseSBmb3JjZSBtb25pdG9yIGNoZWNrcyBpZiB0aGUgc2VydmVyIGlzXG4gICAgICAgIC8vIGluIGFuIHVua25vd24gc3RhdGUuXG4gICAgICAgIHNlbGVjdG9yID0gKDAsIHNlcnZlcl9zZWxlY3Rpb25fMS5zYW1lU2VydmVyU2VsZWN0b3IpKG9wZXJhdGlvbi5zZXJ2ZXI/LmRlc2NyaXB0aW9uKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3BlcmF0aW9uLnRyeVNlY29uZGFyeVdyaXRlKSB7XG4gICAgICAgIC8vIElmIG9wZXJhdGlvbiBzaG91bGQgdHJ5IHRvIHdyaXRlIHRvIHNlY29uZGFyeSB1c2UgdGhlIGN1c3RvbSBzZXJ2ZXIgc2VsZWN0b3JcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHByb3ZpZGUgdGhlIHJlYWQgcHJlZmVyZW5jZS5cbiAgICAgICAgc2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnNlY29uZGFyeVdyaXRhYmxlU2VydmVyU2VsZWN0b3IpKHRvcG9sb2d5LmNvbW1vbldpcmVWZXJzaW9uLCByZWFkUHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZWxlY3RvciA9IHJlYWRQcmVmZXJlbmNlO1xuICAgIH1cbiAgICBsZXQgc2VydmVyID0gYXdhaXQgdG9wb2xvZ3kuc2VsZWN0U2VydmVyKHNlbGVjdG9yLCB7XG4gICAgICAgIHNlc3Npb24sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5jb21tYW5kTmFtZSxcbiAgICAgICAgdGltZW91dENvbnRleHQsXG4gICAgICAgIHNpZ25hbDogb3BlcmF0aW9uLm9wdGlvbnMuc2lnbmFsXG4gICAgfSk7XG4gICAgY29uc3QgaGFzUmVhZEFzcGVjdCA9IG9wZXJhdGlvbi5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OKTtcbiAgICBjb25zdCBoYXNXcml0ZUFzcGVjdCA9IG9wZXJhdGlvbi5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG4gICAgY29uc3QgaW5UcmFuc2FjdGlvbiA9IHNlc3Npb24/LmluVHJhbnNhY3Rpb24oKSA/PyBmYWxzZTtcbiAgICBjb25zdCB3aWxsUmV0cnlSZWFkID0gdG9wb2xvZ3kucy5vcHRpb25zLnJldHJ5UmVhZHMgJiYgIWluVHJhbnNhY3Rpb24gJiYgb3BlcmF0aW9uLmNhblJldHJ5UmVhZDtcbiAgICBjb25zdCB3aWxsUmV0cnlXcml0ZSA9IHRvcG9sb2d5LnMub3B0aW9ucy5yZXRyeVdyaXRlcyAmJlxuICAgICAgICAhaW5UcmFuc2FjdGlvbiAmJlxuICAgICAgICAoMCwgdXRpbHNfMS5zdXBwb3J0c1JldHJ5YWJsZVdyaXRlcykoc2VydmVyKSAmJlxuICAgICAgICBvcGVyYXRpb24uY2FuUmV0cnlXcml0ZTtcbiAgICBjb25zdCB3aWxsUmV0cnkgPSBvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUpICYmXG4gICAgICAgIHNlc3Npb24gIT0gbnVsbCAmJlxuICAgICAgICAoKGhhc1JlYWRBc3BlY3QgJiYgd2lsbFJldHJ5UmVhZCkgfHwgKGhhc1dyaXRlQXNwZWN0ICYmIHdpbGxSZXRyeVdyaXRlKSk7XG4gICAgaWYgKGhhc1dyaXRlQXNwZWN0ICYmIHdpbGxSZXRyeVdyaXRlICYmIHNlc3Npb24gIT0gbnVsbCkge1xuICAgICAgICBvcGVyYXRpb24ub3B0aW9ucy53aWxsUmV0cnlXcml0ZSA9IHRydWU7XG4gICAgICAgIHNlc3Npb24uaW5jcmVtZW50VHJhbnNhY3Rpb25OdW1iZXIoKTtcbiAgICB9XG4gICAgY29uc3QgbWF4VHJpZXMgPSB3aWxsUmV0cnkgPyAodGltZW91dENvbnRleHQuY3NvdEVuYWJsZWQoKSA/IEluZmluaXR5IDogMikgOiAxO1xuICAgIGxldCBwcmV2aW91c09wZXJhdGlvbkVycm9yO1xuICAgIGxldCBwcmV2aW91c1NlcnZlcjtcbiAgICBmb3IgKGxldCB0cmllcyA9IDA7IHRyaWVzIDwgbWF4VHJpZXM7IHRyaWVzKyspIHtcbiAgICAgICAgaWYgKHByZXZpb3VzT3BlcmF0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChoYXNXcml0ZUFzcGVjdCAmJiBwcmV2aW91c09wZXJhdGlvbkVycm9yLmNvZGUgPT09IE1NQVB2MV9SRVRSWV9XUklURVNfRVJST1JfQ09ERSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNTUFQdjFfUkVUUllfV1JJVEVTX0VSUk9SX01FU1NBR0UsXG4gICAgICAgICAgICAgICAgICAgIGVycm1zZzogTU1BUHYxX1JFVFJZX1dSSVRFU19FUlJPUl9NRVNTQUdFLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBwcmV2aW91c09wZXJhdGlvbkVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuQ09NTUFORF9CQVRDSElORykgJiYgIW9wZXJhdGlvbi5jYW5SZXRyeVdyaXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcHJldmlvdXNPcGVyYXRpb25FcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNXcml0ZUFzcGVjdCAmJiAhKDAsIGVycm9yXzEuaXNSZXRyeWFibGVXcml0ZUVycm9yKShwcmV2aW91c09wZXJhdGlvbkVycm9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBwcmV2aW91c09wZXJhdGlvbkVycm9yO1xuICAgICAgICAgICAgaWYgKGhhc1JlYWRBc3BlY3QgJiYgISgwLCBlcnJvcl8xLmlzUmV0cnlhYmxlUmVhZEVycm9yKShwcmV2aW91c09wZXJhdGlvbkVycm9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBwcmV2aW91c09wZXJhdGlvbkVycm9yO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzT3BlcmF0aW9uRXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yICYmXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HKSAmJlxuICAgICAgICAgICAgICAgIHNlc3Npb24gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHNlc3Npb24uaXNQaW5uZWQgJiZcbiAgICAgICAgICAgICAgICAhc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnVucGluKHsgZm9yY2U6IHRydWUsIGZvcmNlQ2xlYXI6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXJ2ZXIgPSBhd2FpdCB0b3BvbG9neS5zZWxlY3RTZXJ2ZXIoc2VsZWN0b3IsIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5jb21tYW5kTmFtZSxcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NlcnZlcixcbiAgICAgICAgICAgICAgICBzaWduYWw6IG9wZXJhdGlvbi5vcHRpb25zLnNpZ25hbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaGFzV3JpdGVBc3BlY3QgJiYgISgwLCB1dGlsc18xLnN1cHBvcnRzUmV0cnlhYmxlV3JpdGVzKShzZXJ2ZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcignU2VsZWN0ZWQgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgcmV0cnlhYmxlIHdyaXRlcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJZiB0cmllcyA+IDAgYW5kIHdlIGFyZSBjb21tYW5kIGJhdGNoaW5nIHdlIG5lZWQgdG8gcmVzZXQgdGhlIGJhdGNoLlxuICAgICAgICAgICAgaWYgKHRyaWVzID4gMCAmJiBvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5DT01NQU5EX0JBVENISU5HKSkge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi5yZXNldEJhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgb3BlcmF0aW9uLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKG9wZXJhdGlvbkVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShvcGVyYXRpb25FcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvcikpXG4gICAgICAgICAgICAgICAgdGhyb3cgb3BlcmF0aW9uRXJyb3I7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNPcGVyYXRpb25FcnJvciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uRXJyb3IuaGFzRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5Ob1dyaXRlc1BlcmZvcm1lZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBwcmV2aW91c09wZXJhdGlvbkVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNTZXJ2ZXIgPSBzZXJ2ZXIuZGVzY3JpcHRpb247XG4gICAgICAgICAgICBwcmV2aW91c09wZXJhdGlvbkVycm9yID0gb3BlcmF0aW9uRXJyb3I7XG4gICAgICAgICAgICAvLyBSZXNldCB0aW1lb3V0c1xuICAgICAgICAgICAgdGltZW91dENvbnRleHQuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyAocHJldmlvdXNPcGVyYXRpb25FcnJvciA/P1xuICAgICAgICBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignVHJpZWQgdG8gcHJvcGFnYXRlIHJldHJ5YWJpbGl0eSBlcnJvciwgYnV0IG5vIGVycm9yIHdhcyBmb3VuZC4nKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlX29wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(ns, filter = {}, options = {}) {\n        super(undefined, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    get commandName() {\n        return 'find';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            (0, explain_1.validateExplainTimeoutOptions)(this.options, this.explain);\n            findCommand = (0, explain_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return await server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session,\n            timeoutContext\n        }, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find_and_modify.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return 'findAndModify';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        return options.includeResultMetadata ? result : (result.value ?? null);\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/get_more.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/get_more.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetMoreOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'getMore';\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session, timeoutContext) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            timeoutContext,\n            ...this.options\n        };\n        return await server.command(this.ns, getMoreCmd, commandOptions, responses_1.CursorResponse);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2dldF9tb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixvQkFBb0IsbUJBQU8sQ0FBQywrSUFBaUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxnZXRfbW9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgR2V0TW9yZU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgY3Vyc29ySWQsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZ2V0TW9yZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsdGhvdWdoIHRoZXJlIGlzIGEgc2VydmVyIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnZXQgbW9yZSBvcGVyYXRpb24sIHRoZSBzaWduYXR1cmVcbiAgICAgKiBmb3IgZXhlY3V0ZSBwYXNzZXMgYSBzZXJ2ZXIgc28gd2Ugd2lsbCBqdXN0IHVzZSB0aGF0IG9uZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgX3Nlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGlmIChzZXJ2ZXIgIT09IHRoaXMuc2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignR2V0bW9yZSBtdXN0IHJ1biBvbiB0aGUgc2FtZSBzZXJ2ZXIgb3BlcmF0aW9uIGJlZ2FuIG9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3Vyc29ySWQgPT0gbnVsbCB8fCB0aGlzLmN1cnNvcklkLmlzWmVybygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignVW5hYmxlIHRvIGl0ZXJhdGUgY3Vyc29yIHdpdGggbm8gaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5ucy5jb2xsZWN0aW9uO1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDdXJzb3JzIHNob3VsZCBoYXZlIGFkb3B0ZWQgdGhlIG5hbWVzcGFjZSByZXR1cm5lZCBieSBNb25nb0RCXG4gICAgICAgICAgICAvLyB3aGljaCBzaG91bGQgYWx3YXlzIGRlZmluZWQgYSBjb2xsZWN0aW9uIG5hbWUgKGV2ZW4gYSBwc2V1ZG8gb25lLCBleC4gZGIuYWdncmVnYXRlKCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignQSBjb2xsZWN0aW9uIG5hbWUgbXVzdCBiZSBkZXRlcm1pbmVkIGJlZm9yZSBnZXRNb3JlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ2V0TW9yZUNtZCA9IHtcbiAgICAgICAgICAgIGdldE1vcmU6IHRoaXMuY3Vyc29ySWQsXG4gICAgICAgICAgICBjb2xsZWN0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmJhdGNoU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQuYmF0Y2hTaXplID0gTWF0aC5hYnModGhpcy5vcHRpb25zLmJhdGNoU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMubWF4QXdhaXRUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLm1heFRpbWVNUyA9IHRoaXMub3B0aW9ucy5tYXhBd2FpdFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQgJiYgKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikgPj0gOSkge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5jb21tZW50ID0gdGhpcy5vcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tbWFuZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZXR1cm5GaWVsZFNlbGVjdG9yOiBudWxsLFxuICAgICAgICAgICAgZG9jdW1lbnRzUmV0dXJuZWRJbjogJ25leHRCYXRjaCcsXG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dCxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywgZ2V0TW9yZUNtZCwgY29tbWFuZE9wdGlvbnMsIHJlc3BvbnNlc18xLkN1cnNvclJlc3BvbnNlKTtcbiAgICB9XG59XG5leHBvcnRzLkdldE1vcmVPcGVyYXRpb24gPSBHZXRNb3JlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEdldE1vcmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5NVVNUX1NFTEVDVF9TQU1FX1NFUlZFUl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X21vcmUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesOperation = exports.DropIndexOperation = exports.CreateIndexesOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n/**\n * Converts an `IndexSpecification`, which can be specified in multiple formats, into a\n * valid `key` for the createIndexes command.\n */\nfunction constructIndexDescriptionMap(indexSpec) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return key;\n}\n/**\n * Receives an index description and returns a modified index description which has had invalid options removed\n * from the description and has mapped the `version` option to the `v` option.\n */\nfunction resolveIndexDescription(description) {\n    const validProvidedOptions = Object.entries(description).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName));\n    return Object.fromEntries(\n    // we support the `version` option, but the `createIndexes` command expects it to be the `v`\n    validProvidedOptions.map(([name, value]) => (name === 'version' ? ['v', value] : [name, value])));\n}\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map((userIndex) => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name ?? Array.from(key).flat().join('_');\n            const validIndexOptions = resolveIndexDescription(userIndex);\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    static fromIndexDescriptionArray(parent, collectionName, indexes, options) {\n        return new CreateIndexesOperation(parent, collectionName, indexes, options);\n    }\n    static fromIndexSpecification(parent, collectionName, indexSpec, options = {}) {\n        const key = constructIndexDescriptionMap(indexSpec);\n        const description = { ...options, key };\n        return new CreateIndexesOperation(parent, collectionName, [description], options);\n    }\n    get commandName() {\n        return 'createIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd, timeoutContext);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return 'dropIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return await super.executeCommand(server, session, cmd, timeoutContext);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, responses_1.CursorResponse);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/insert.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/insert.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, utils_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n            insertOne: { document }\n        })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session, timeoutContext);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2luc2VydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUI7QUFDbEYsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsd0JBQXdCLG1CQUFPLENBQUMsaUhBQWtCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLHFIQUFjO0FBQzNDLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLG1IQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcaW5zZXJ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnNlcnRNYW55T3BlcmF0aW9uID0gZXhwb3J0cy5JbnNlcnRPbmVPcGVyYXRpb24gPSBleHBvcnRzLkluc2VydE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBidWxrX3dyaXRlXzEgPSByZXF1aXJlKFwiLi9idWxrX3dyaXRlXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSW5zZXJ0T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBkb2N1bWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zLCBjaGVja0tleXM6IG9wdGlvbnMuY2hlY2tLZXlzID8/IGZhbHNlIH07XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5kb2N1bWVudHMgPSBkb2N1bWVudHM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyA/PyB7fTtcbiAgICAgICAgY29uc3Qgb3JkZXJlZCA9IHR5cGVvZiBvcHRpb25zLm9yZGVyZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMub3JkZXJlZCA6IHRydWU7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBpbnNlcnQ6IHRoaXMubnMuY29sbGVjdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50czogdGhpcy5kb2N1bWVudHMsXG4gICAgICAgICAgICBvcmRlcmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29tbWFuZC5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCwgdGltZW91dENvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gSW5zZXJ0T3BlcmF0aW9uO1xuY2xhc3MgSW5zZXJ0T25lT3BlcmF0aW9uIGV4dGVuZHMgSW5zZXJ0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2MsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgKDAsIHV0aWxzXzEubWF5YmVBZGRJZFRvRG9jdW1lbnRzKShjb2xsZWN0aW9uLCBbZG9jXSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBhIFdyaXRlRXJyb3IgYnV0IHdlIGNhbid0IGNoYW5nZSBpdCBub3cgYmVjYXVzZSBvZiBlcnJvciBoaWVyYXJjaHlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIGluc2VydGVkSWQ6IHRoaXMuZG9jdW1lbnRzWzBdLl9pZFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T25lT3BlcmF0aW9uID0gSW5zZXJ0T25lT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSW5zZXJ0TWFueU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2NzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZG9jcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IFwiZG9jc1wiIG11c3QgYmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kb2NzID0gZG9jcztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIGNvbnN0IHdyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGJ1bGtXcml0ZU9wZXJhdGlvbiA9IG5ldyBidWxrX3dyaXRlXzEuQnVsa1dyaXRlT3BlcmF0aW9uKGNvbGwsIHRoaXMuZG9jcy5tYXAoZG9jdW1lbnQgPT4gKHtcbiAgICAgICAgICAgIGluc2VydE9uZTogeyBkb2N1bWVudCB9XG4gICAgICAgIH0pKSwgb3B0aW9ucyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBidWxrV3JpdGVPcGVyYXRpb24uZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB3cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRDb3VudDogcmVzLmluc2VydGVkQ291bnQsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRJZHM6IHJlcy5pbnNlcnRlZElkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyICYmIGVyci5tZXNzYWdlID09PSAnT3BlcmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYW4gb3BlcmF0aW9uIGtleScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb2xsZWN0aW9uLmluc2VydE1hbnkoKSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggYW4gYXJyYXkgdGhhdCBoYXMgbnVsbC91bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBJbnNlcnRNYW55T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRPbmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0TWFueU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/is_capped.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/is_capped.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2lzX2NhcHBlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkJBQTJCLElBQUksZ0ZBQWdGO0FBQzlJO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxpc19jYXBwZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSXNDYXBwZWRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IFtjb2xsZWN0aW9uXSA9IGF3YWl0IGNvbGwucy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IGNvbGwuY29sbGVjdGlvbk5hbWUgfSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiBmYWxzZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgY29sbGVjdGlvbi5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYGNvbGxlY3Rpb24gJHtjb2xsLm5hbWVzcGFjZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhY29sbGVjdGlvbi5vcHRpb25zPy5jYXBwZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Jc0NhcHBlZE9wZXJhdGlvbiA9IElzQ2FwcGVkT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNfY2FwcGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/kill_cursors.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'killCursors';\n    }\n    async execute(server, session, timeoutContext) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, {\n                session,\n                timeoutContext\n            });\n        }\n        catch (error) {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n            (0, utils_1.squashError)(error);\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2tpbGxfY3Vyc29ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xca2lsbF9jdXJzb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG5jbGFzcyBLaWxsQ3Vyc29yc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihjdXJzb3JJZCwgbnMsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAna2lsbEN1cnNvcnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdLaWxsY3Vyc29yIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBraWxsQ3Vyc29ycyA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGtpbGxDdXJzb3JzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGtpbGxDdXJzb3JzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnNDb21tYW5kID0ge1xuICAgICAgICAgICAga2lsbEN1cnNvcnMsXG4gICAgICAgICAgICBjdXJzb3JzOiBbdGhpcy5jdXJzb3JJZF1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIGtpbGxDdXJzb3JzQ29tbWFuZCwge1xuICAgICAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICAgICAgdGltZW91dENvbnRleHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhlIGRyaXZlciBzaG91bGQgbmV2ZXIgZW1pdCBlcnJvcnMgZnJvbSBraWxsQ3Vyc29ycywgdGhpcyBpcyBzcGVjLWVkIGJlaGF2aW9yXG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5zcXVhc2hFcnJvcikoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IEtpbGxDdXJzb3JzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEtpbGxDdXJzb3JzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1raWxsX2N1cnNvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_collections.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_collections.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session, timeoutContext) {\n        return await super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), timeoutContext, responses_1.CursorResponse);\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLCtJQUFpQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDRCQUE0QixJQUFJO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxsaXN0X2NvbGxlY3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCByZXNwb25zZXNfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL3dpcmVfcHJvdG9jb2wvcmVzcG9uc2VzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgICAgICB0aGlzLm5hbWVPbmx5ID0gISF0aGlzLm9wdGlvbnMubmFtZU9ubHk7XG4gICAgICAgIHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zID0gISF0aGlzLm9wdGlvbnMuYXV0aG9yaXplZENvbGxlY3Rpb25zO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IHRoaXMub3B0aW9ucy5iYXRjaFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB0aGlzLmdlbmVyYXRlQ29tbWFuZCgoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSksIHRpbWVvdXRDb250ZXh0LCByZXNwb25zZXNfMS5DdXJzb3JSZXNwb25zZSk7XG4gICAgfVxuICAgIC8qIFRoaXMgaXMgaGVyZSBmb3IgdGhlIHB1cnBvc2Ugb2YgdW5pdCB0ZXN0aW5nIHRoZSBmaW5hbCBjb21tYW5kIHRoYXQgZ2V0cyBzZW50LiAqL1xuICAgIGdlbmVyYXRlQ29tbWFuZCh3aXJlVmVyc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgbGlzdENvbGxlY3Rpb25zOiAxLFxuICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5iYXRjaFNpemUgPyB7IGJhdGNoU2l6ZTogdGhpcy5iYXRjaFNpemUgfSA6IHt9LFxuICAgICAgICAgICAgbmFtZU9ubHk6IHRoaXMubmFtZU9ubHksXG4gICAgICAgICAgICBhdXRob3JpemVkQ29sbGVjdGlvbnM6IHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zXG4gICAgICAgIH07XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAod2lyZVZlcnNpb24gPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_databases.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_databases.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'listDatabases';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, cmd, timeoutContext);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfZGF0YWJhc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcbGlzdF9kYXRhYmFzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3REYXRhYmFzZXNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgTGlzdERhdGFiYXNlc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0RGF0YWJhc2VzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgbGlzdERhdGFiYXNlczogMSB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5uYW1lT25seSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQubmFtZU9ubHkgPSB0aGlzLm9wdGlvbnMubmFtZU9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGNtZC5maWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmF1dGhvcml6ZWREYXRhYmFzZXMgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY21kLmF1dGhvcml6ZWREYXRhYmFzZXMgPSB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpID49IDkgJiYgdGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQsIHRpbWVvdXRDb250ZXh0KTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3REYXRhYmFzZXNPcGVyYXRpb24gPSBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKExpc3REYXRhYmFzZXNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEVdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfZGF0YWJhc2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractOperation = exports.Aspect = void 0;\nexports.defineAspects = defineAspects;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER'),\n    COMMAND_BATCHING: Symbol('COMMAND_BATCHING')\n};\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : (read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary);\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this._session = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    // Make sure the session is not writable from outside this class.\n    get session() {\n        return this._session;\n    }\n    clearSession() {\n        this._session = undefined;\n    }\n    resetBatch() {\n        return true;\n    }\n    get canRetryRead() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.READ_OPERATION);\n    }\n    get canRetryWrite() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.WRITE_OPERATION);\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyxjQUFjO0FBQzFDLHFCQUFxQjtBQUNyQixlQUFlLG1CQUFPLENBQUMsK0ZBQVM7QUFDaEMsMEJBQTBCLG1CQUFPLENBQUMscUhBQW9CO0FBQ3RELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxvcGVyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic3RyYWN0T3BlcmF0aW9uID0gZXhwb3J0cy5Bc3BlY3QgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmluZUFzcGVjdHMgPSBkZWZpbmVBc3BlY3RzO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCByZWFkX3ByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuLi9yZWFkX3ByZWZlcmVuY2VcIik7XG5leHBvcnRzLkFzcGVjdCA9IHtcbiAgICBSRUFEX09QRVJBVElPTjogU3ltYm9sKCdSRUFEX09QRVJBVElPTicpLFxuICAgIFdSSVRFX09QRVJBVElPTjogU3ltYm9sKCdXUklURV9PUEVSQVRJT04nKSxcbiAgICBSRVRSWUFCTEU6IFN5bWJvbCgnUkVUUllBQkxFJyksXG4gICAgRVhQTEFJTkFCTEU6IFN5bWJvbCgnRVhQTEFJTkFCTEUnKSxcbiAgICBTS0lQX0NPTExBVElPTjogU3ltYm9sKCdTS0lQX0NPTExBVElPTicpLFxuICAgIENVUlNPUl9DUkVBVElORzogU3ltYm9sKCdDVVJTT1JfQ1JFQVRJTkcnKSxcbiAgICBNVVNUX1NFTEVDVF9TQU1FX1NFUlZFUjogU3ltYm9sKCdNVVNUX1NFTEVDVF9TQU1FX1NFUlZFUicpLFxuICAgIENPTU1BTkRfQkFUQ0hJTkc6IFN5bWJvbCgnQ09NTUFORF9CQVRDSElORycpXG59O1xuLyoqXG4gKiBUaGlzIGNsYXNzIGFjdHMgYXMgYSBwYXJlbnQgY2xhc3MgZm9yIGFueSBvcGVyYXRpb24gYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBzZXR0aW5nIHRoaXMub3B0aW9ucyxcbiAqIGFzIHdlbGwgYXMgc2V0dGluZyBhbmQgZ2V0dGluZyBhIHNlc3Npb24uXG4gKiBBZGRpdGlvbmFsbHksIHRoaXMgY2xhc3MgaW1wbGVtZW50cyBgaGFzQXNwZWN0YCwgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9wZXJhdGlvbiBoYXNcbiAqIGEgc3BlY2lmaWMgYXNwZWN0LlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5yZWFkUHJlZmVyZW5jZSA9IHRoaXMuaGFzQXNwZWN0KGV4cG9ydHMuQXNwZWN0LldSSVRFX09QRVJBVElPTilcbiAgICAgICAgICAgID8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeVxuICAgICAgICAgICAgOiAocmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuZnJvbU9wdGlvbnMob3B0aW9ucykgPz8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeSk7XG4gICAgICAgIC8vIFB1bGwgdGhlIEJTT04gc2VyaWFsaXplIG9wdGlvbnMgZnJvbSB0aGUgYWxyZWFkeS1yZXNvbHZlZCBvcHRpb25zXG4gICAgICAgIHRoaXMuYnNvbk9wdGlvbnMgPSAoMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24gPSBvcHRpb25zLnNlc3Npb24gIT0gbnVsbCA/IG9wdGlvbnMuc2Vzc2lvbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ieXBhc3NQaW5uaW5nQ2hlY2sgPSAhIW9wdGlvbnMuYnlwYXNzUGlubmluZ0NoZWNrO1xuICAgICAgICB0aGlzLnRyeVNlY29uZGFyeVdyaXRlID0gZmFsc2U7XG4gICAgfVxuICAgIGhhc0FzcGVjdChhc3BlY3QpIHtcbiAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChjdG9yLmFzcGVjdHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdG9yLmFzcGVjdHMuaGFzKGFzcGVjdCk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgc2Vzc2lvbiBpcyBub3Qgd3JpdGFibGUgZnJvbSBvdXRzaWRlIHRoaXMgY2xhc3MuXG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uO1xuICAgIH1cbiAgICBjbGVhclNlc3Npb24oKSB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJlc2V0QmF0Y2goKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuUkVUUllBQkxFKSAmJiB0aGlzLmhhc0FzcGVjdChleHBvcnRzLkFzcGVjdC5SRUFEX09QRVJBVElPTik7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuUkVUUllBQkxFKSAmJiB0aGlzLmhhc0FzcGVjdChleHBvcnRzLkFzcGVjdC5XUklURV9PUEVSQVRJT04pO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBBYnN0cmFjdE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGRlZmluZUFzcGVjdHMob3BlcmF0aW9uLCBhc3BlY3RzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzcGVjdHMpICYmICEoYXNwZWN0cyBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgICAgYXNwZWN0cyA9IFthc3BlY3RzXTtcbiAgICB9XG4gICAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ2FzcGVjdHMnLCB7XG4gICAgICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYXNwZWN0cztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/options_operation.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/options_operation.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wdGlvbnNfb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkIsSUFBSSxnRkFBZ0Y7QUFDOUk7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXG9wdGlvbnNfb3BlcmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcHRpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgT3B0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5vcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IE9wdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb25zX29wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/profiling_level.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/profiling_level.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session, timeoutContext) {\n        const doc = await super.executeCommand(server, session, { profile: -1 }, timeoutContext);\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3Byb2ZpbGluZ19sZXZlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsYUFBYTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHLElBQUk7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxwcm9maWxpbmdfbGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdwcm9maWxlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBwcm9maWxlOiAtMSB9LCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIGlmIChkb2Mub2sgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhcyA9IGRvYy53YXM7XG4gICAgICAgICAgICBpZiAod2FzID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdzbG93X29ubHknO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMilcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FsbCc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKGBJbGxlZ2FsIHByb2ZpbGluZyBsZXZlbCB2YWx1ZSAke3dhc31gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggcHJvZmlsZSBjb21tYW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmdfbGV2ZWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/remove_user.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/remove_user.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return 'dropUser';\n    }\n    async execute(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { dropUser: this.username }, timeoutContext);\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbW92ZV91c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQixrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xccmVtb3ZlX3VzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZVVzZXJPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBSZW1vdmVVc2VyT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCB1c2VybmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BVc2VyJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBkcm9wVXNlcjogdGhpcy51c2VybmFtZSB9LCB0aW1lb3V0Q29udGV4dCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IFJlbW92ZVVzZXJPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVtb3ZlVXNlck9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92ZV91c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/rename.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/rename.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'renameCollection';\n    }\n    async execute(server, session, timeoutContext) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command, timeoutContext);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIscUJBQXFCLG1CQUFPLENBQUMsMkdBQWU7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsK0dBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsbUhBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxyZW5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbmFtZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbmFtZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuZXdOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5ld05hbWUgPSBuZXdOYW1lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncmVuYW1lQ29sbGVjdGlvbic7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICAvLyBCdWlsZCB0aGUgY29tbWFuZFxuICAgICAgICBjb25zdCByZW5hbWVDb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uLm5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgdG9Db2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uLnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKHRoaXMubmV3TmFtZSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRpb25zLmRyb3BUYXJnZXQgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHJlbmFtZUNvbGxlY3Rpb246IHJlbmFtZUNvbGxlY3Rpb24sXG4gICAgICAgICAgICB0bzogdG9Db2xsZWN0aW9uLFxuICAgICAgICAgICAgZHJvcFRhcmdldDogZHJvcFRhcmdldFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQsIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb24ucy5kYiwgdGhpcy5uZXdOYW1lLCB0aGlzLmNvbGxlY3Rpb24ucy5vcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLlJlbmFtZU9wZXJhdGlvbiA9IFJlbmFtZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZW5hbWVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5hbWUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session,\n            timeoutContext\n        }, this.options.responseType);\n        return res;\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session,\n            timeoutContext\n        });\n        return res;\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3J1bl9jb21tYW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxHQUFHLDJCQUEyQjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxydW5fY29tbWFuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uID0gZXhwb3J0cy5SdW5Db21tYW5kT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUnVuQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBwYXJlbnQucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3J1bkNvbW1hbmQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgdGltZW91dENvbnRleHRcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLnJlc3BvbnNlVHlwZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5Db21tYW5kT3BlcmF0aW9uID0gUnVuQ29tbWFuZE9wZXJhdGlvbjtcbmNsYXNzIFJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncnVuQ29tbWFuZCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bl9jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return 'createSearchIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, {\n            session,\n            timeoutContext\n        });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2NyZWF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsb0JBQW9CLG1CQUFPLENBQUMsb0hBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxzZWFyY2hfaW5kZXhlc1xcY3JlYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbnMgPSBkZXNjcmlwdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjcmVhdGVTZWFyY2hJbmRleGVzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgY3JlYXRlU2VhcmNoSW5kZXhlczogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBpbmRleGVzOiB0aGlzLmRlc2NyaXB0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzZXJ2ZXIuY29tbWFuZChuYW1lc3BhY2UsIGNvbW1hbmQsIHtcbiAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICB0aW1lb3V0Q29udGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW5kZXhlc0NyZWF0ZWQgPSByZXM/LmluZGV4ZXNDcmVhdGVkID8/IFtdO1xuICAgICAgICByZXR1cm4gaW5kZXhlc0NyZWF0ZWQubWFwKCh7IG5hbWUgfSkgPT4gbmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return 'dropSearchIndex';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, { session, timeoutContext });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2Ryb3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFhO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLG9IQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELHlCQUF5QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXHNlYXJjaF9pbmRleGVzXFxkcm9wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BTZWFyY2hJbmRleCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCkge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRyb3BTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb21tYW5kLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uLCB0aW1lb3V0Q29udGV4dCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTmFtZXNwYWNlTm90Rm91bmRFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yICYmIGVycm9yLmNvZGUgPT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5OYW1lc3BhY2VOb3RGb3VuZDtcbiAgICAgICAgICAgIGlmICghaXNOYW1lc3BhY2VOb3RGb3VuZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiA9IERyb3BTZWFyY2hJbmRleE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3AuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return 'updateSearchIndex';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, { session, timeoutContext });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL3VwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsb0hBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHlCQUF5QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXG9wZXJhdGlvbnNcXHNlYXJjaF9pbmRleGVzXFx1cGRhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSwgZGVmaW5pdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndXBkYXRlU2VhcmNoSW5kZXgnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5jb2xsZWN0aW9uLmZ1bGxOYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICB1cGRhdGVTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZWZpbml0aW9uOiB0aGlzLmRlZmluaXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24sIHRpbWVvdXRDb250ZXh0IH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuZXhwb3J0cy5VcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiA9IFVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session, timeoutContext) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile }, timeoutContext);\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsc0JBQXNCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFXO0FBQ3JDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRixrREFBa0Q7QUFDN0k7QUFDQTtBQUNBLHNEQUFzRCx1QkFBdUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxvcGVyYXRpb25zXFxzZXRfcHJvZmlsaW5nX2xldmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBsZXZlbFZhbHVlcyA9IG5ldyBTZXQoWydvZmYnLCAnc2xvd19vbmx5JywgJ2FsbCddKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlByb2ZpbGluZ0xldmVsID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgb2ZmOiAnb2ZmJyxcbiAgICBzbG93T25seTogJ3Nsb3dfb25seScsXG4gICAgYWxsOiAnYWxsJ1xufSk7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbGV2ZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwub2ZmOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwuc2xvd09ubHk6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5hbGw6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdwcm9maWxlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24sIHRpbWVvdXRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5sZXZlbDtcbiAgICAgICAgaWYgKCFsZXZlbFZhbHVlcy5oYXMobGV2ZWwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBQcm9maWxpbmcgbGV2ZWwgbXVzdCBiZSBvbmUgb2YgXCIkeygwLCB1dGlsc18xLmVudW1Ub1N0cmluZykoZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCl9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IERldGVybWluZSBlcnJvciB0byBwdXQgaGVyZVxuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgcHJvZmlsZTogdGhpcy5wcm9maWxlIH0sIHRpbWVvdXRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH1cbn1cbmV4cG9ydHMuU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldF9wcm9maWxpbmdfbGV2ZWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/stats.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/stats.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dbStats';\n    }\n    async execute(server, session, timeoutContext) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3N0YXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxtSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcc3RhdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEYlN0YXRzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2RiU3RhdHMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgZGJTdGF0czogdHJ1ZSB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuc2NhbGUgPSB0aGlzLm9wdGlvbnMuc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCwgdGltZW91dENvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGJTdGF0c09wZXJhdGlvbiA9IERiU3RhdHNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGJTdGF0c09wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/update.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/update.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nexports.makeUpdateStatement = makeUpdateStatement;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'update';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command, timeoutContext);\n        return res;\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/validate_collection.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/validate_collection.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'validate';\n    }\n    async execute(server, session, timeoutContext) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command, timeoutContext);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsZUFBZTtBQUN0RztBQUNBLHVGQUF1RixlQUFlO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcb3BlcmF0aW9uc1xcdmFsaWRhdGVfY29sbGVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYWRtaW4sIGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIERlY29yYXRlIGNvbW1hbmQgd2l0aCBleHRyYSBvcHRpb25zXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IHZhbGlkYXRlOiBjb2xsZWN0aW9uTmFtZSB9O1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrZXlzW2ldKSAmJiBrZXlzW2ldICE9PSAnc2Vzc2lvbicpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kW2tleXNbaV1dID0gb3B0aW9uc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlcihhZG1pbi5zLmRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndmFsaWRhdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbiwgdGltZW91dENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSB0aGlzLmNvbGxlY3Rpb25OYW1lO1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHRoaXMuY29tbWFuZCwgdGltZW91dENvbnRleHQpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiBkb2MucmVzdWx0ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggdmFsaWRhdGlvbiBkYXRhJyk7XG4gICAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5tYXRjaCgvZXhjZXB0aW9ufGNvcnJ1cHQvKSAhPSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIGlmIChkb2MudmFsaWQgIT0gbnVsbCAmJiAhZG9jLnZhbGlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZV9jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX2NvbmNlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsd0JBQXdCO0FBQzlDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxyZWFkX2NvbmNlcm4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWRDb25jZXJuID0gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIGxvY2FsOiAnbG9jYWwnLFxuICAgIG1ham9yaXR5OiAnbWFqb3JpdHknLFxuICAgIGxpbmVhcml6YWJsZTogJ2xpbmVhcml6YWJsZScsXG4gICAgYXZhaWxhYmxlOiAnYXZhaWxhYmxlJyxcbiAgICBzbmFwc2hvdDogJ3NuYXBzaG90J1xufSk7XG4vKipcbiAqIFRoZSBNb25nb0RCIFJlYWRDb25jZXJuLCB3aGljaCBhbGxvd3MgZm9yIGNvbnRyb2wgb2YgdGhlIGNvbnNpc3RlbmN5IGFuZCBpc29sYXRpb24gcHJvcGVydGllc1xuICogb2YgdGhlIGRhdGEgcmVhZCBmcm9tIHJlcGxpY2Egc2V0cyBhbmQgcmVwbGljYSBzZXQgc2hhcmRzLlxuICogQHB1YmxpY1xuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3JlYWQtY29uY2Vybi9pbmRleC5odG1sXG4gKi9cbmNsYXNzIFJlYWRDb25jZXJuIHtcbiAgICAvKiogQ29uc3RydWN0cyBhIFJlYWRDb25jZXJuIGZyb20gdGhlIHJlYWQgY29uY2VybiBsZXZlbC4qL1xuICAgIGNvbnN0cnVjdG9yKGxldmVsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNwZWMgdGVzdCBleGlzdHMgdGhhdCBhbGxvd3MgbGV2ZWwgdG8gYmUgYW55IHN0cmluZy5cbiAgICAgICAgICogXCJpbnZhbGlkIHJlYWRDb25jZXJuIHdpdGggb3V0IHN0YWdlXCJcbiAgICAgICAgICogQHNlZSAuL3Rlc3Qvc3BlYy9jcnVkL3YyL2FnZ3JlZ2F0ZS1vdXQtcmVhZENvbmNlcm4uanNvblxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9yZWFkLXdyaXRlLWNvbmNlcm4vcmVhZC13cml0ZS1jb25jZXJuLm1kI3Vua25vd24tbGV2ZWxzLWFuZC1hZGRpdGlvbmFsLW9wdGlvbnMtZm9yLXN0cmluZy1iYXNlZC1yZWFkY29uY2VybnNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGV2ZWwgPSBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWxbbGV2ZWxdID8/IGxldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBSZWFkQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgd3JpdGUgY29uY2Vybi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVhZENvbmNlcm4pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZENvbmNlcm4gfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBpZiAocmVhZENvbmNlcm4gaW5zdGFuY2VvZiBSZWFkQ29uY2Vybikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFkQ29uY2VybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiByZWFkQ29uY2VybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKHJlYWRDb25jZXJuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdsZXZlbCcgaW4gcmVhZENvbmNlcm4gJiYgcmVhZENvbmNlcm4ubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKHJlYWRDb25jZXJuLmxldmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihvcHRpb25zLmxldmVsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTUFKT1JJVFkoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwubWFqb3JpdHk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgQVZBSUxBQkxFKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLmF2YWlsYWJsZTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBMSU5FQVJJWkFCTEUoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwubGluZWFyaXphYmxlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IFNOQVBTSE9UKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLnNuYXBzaG90O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IGxldmVsOiB0aGlzLmxldmVsIH07XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkQ29uY2VybiA9IFJlYWRDb25jZXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZF9jb25jZXJuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\n//# sourceMappingURL=read_preference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX3ByZWZlcmVuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsMEJBQTBCO0FBQ25ELGdCQUFnQixtQkFBTyxDQUFDLGdHQUFTO0FBQ2pDO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLHFCQUFxQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixFQUFFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXHJlYWRfcHJlZmVyZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVhZFByZWZlcmVuY2UgPSBleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIHByaW1hcnk6ICdwcmltYXJ5JyxcbiAgICBwcmltYXJ5UHJlZmVycmVkOiAncHJpbWFyeVByZWZlcnJlZCcsXG4gICAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5JyxcbiAgICBzZWNvbmRhcnlQcmVmZXJyZWQ6ICdzZWNvbmRhcnlQcmVmZXJyZWQnLFxuICAgIG5lYXJlc3Q6ICduZWFyZXN0J1xufSk7XG4vKipcbiAqIFRoZSAqKlJlYWRQcmVmZXJlbmNlKiogY2xhc3MgaXMgYSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBNb25nb0RCIFJlYWRQcmVmZXJlbmNlIGFuZCBpc1xuICogdXNlZCB0byBjb25zdHJ1Y3QgY29ubmVjdGlvbnMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9jb3JlL3JlYWQtcHJlZmVyZW5jZS9cbiAqL1xuY2xhc3MgUmVhZFByZWZlcmVuY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtb2RlIC0gQSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgcmVhZCBwcmVmZXJlbmNlIG1vZGUgKHByaW1hcnl8cHJpbWFyeVByZWZlcnJlZHxzZWNvbmRhcnl8c2Vjb25kYXJ5UHJlZmVycmVkfG5lYXJlc3QpXG4gICAgICogQHBhcmFtIHRhZ3MgLSBBIHRhZyBzZXQgdXNlZCB0byB0YXJnZXQgcmVhZHMgdG8gbWVtYmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgdGFnKHMpLiB0YWdTZXQgaXMgbm90IGF2YWlsYWJsZSBpZiB1c2luZyByZWFkIHByZWZlcmVuY2UgbW9kZSBwcmltYXJ5LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCByZWFkIHByZWZlcmVuY2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGUsIHRhZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFSZWFkUHJlZmVyZW5jZS5pc1ZhbGlkKG1vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHJlYWQgcHJlZmVyZW5jZSBtb2RlICR7SlNPTi5zdHJpbmdpZnkobW9kZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJiB0eXBlb2YgdGFncyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodGFncykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0YWdzO1xuICAgICAgICAgICAgdGFncyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YWdzICYmICFBcnJheS5pc0FycmF5KHRhZ3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdSZWFkUHJlZmVyZW5jZSB0YWdzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICAgICAgICB0aGlzLmhlZGdlID0gb3B0aW9ucz8uaGVkZ2U7XG4gICAgICAgIHRoaXMubWF4U3RhbGVuZXNzU2Vjb25kcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIGlmIChvcHRpb25zLm1heFN0YWxlbmVzc1NlY29uZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4U3RhbGVuZXNzU2Vjb25kcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignbWF4U3RhbGVuZXNzU2Vjb25kcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzID0gb3B0aW9ucy5tYXhTdGFsZW5lc3NTZWNvbmRzO1xuICAgICAgICAgICAgLy8gTk9URTogVGhlIG1pbmltdW0gcmVxdWlyZWQgd2lyZSB2ZXJzaW9uIGlzIDUgZm9yIHRoaXMgcmVhZCBwcmVmZXJlbmNlLiBJZiB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vICAgICAgIHRvcG9sb2d5IGhhcyBhIGxvd2VyIHZhbHVlIHRoZW4gYSBNb25nb0Vycm9yIHdpbGwgYmUgdGhyb3duIGR1cmluZyBzZXJ2ZXIgc2VsZWN0aW9uLlxuICAgICAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IDU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gUmVhZFByZWZlcmVuY2UuUFJJTUFSWSkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFncyAmJiBBcnJheS5pc0FycmF5KHRoaXMudGFncykgJiYgdGhpcy50YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdQcmltYXJ5IHJlYWQgcHJlZmVyZW5jZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCB0YWdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignUHJpbWFyeSByZWFkIHByZWZlcmVuY2UgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbWF4U3RhbGVuZXNzU2Vjb25kcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGVkZ2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdQcmltYXJ5IHJlYWQgcHJlZmVyZW5jZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBoZWRnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFN1cHBvcnQgdGhlIGRlcHJlY2F0ZWQgYHByZWZlcmVuY2VgIHByb3BlcnR5IGludHJvZHVjZWQgaW4gdGhlIHBvcmNlbGFpbiBsYXllclxuICAgIGdldCBwcmVmZXJlbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhtb2RlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVhZFByZWZlcmVuY2UobW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlYWRQcmVmZXJlbmNlIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSByZWFkIHByZWZlcmVuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPz8gb3B0aW9ucy5zZXNzaW9uPy50cmFuc2FjdGlvbi5vcHRpb25zLnJlYWRQcmVmZXJlbmNlO1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZVRhZ3MgPSBvcHRpb25zLnJlYWRQcmVmZXJlbmNlVGFncztcbiAgICAgICAgaWYgKHJlYWRQcmVmZXJlbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJlYWRQcmVmZXJlbmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkUHJlZmVyZW5jZShyZWFkUHJlZmVyZW5jZSwgcmVhZFByZWZlcmVuY2VUYWdzLCB7XG4gICAgICAgICAgICAgICAgbWF4U3RhbGVuZXNzU2Vjb25kczogb3B0aW9ucy5tYXhTdGFsZW5lc3NTZWNvbmRzLFxuICAgICAgICAgICAgICAgIGhlZGdlOiBvcHRpb25zLmhlZGdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKHJlYWRQcmVmZXJlbmNlIGluc3RhbmNlb2YgUmVhZFByZWZlcmVuY2UpICYmIHR5cGVvZiByZWFkUHJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGUgPSByZWFkUHJlZmVyZW5jZS5tb2RlIHx8IHJlYWRQcmVmZXJlbmNlLnByZWZlcmVuY2U7XG4gICAgICAgICAgICBpZiAobW9kZSAmJiB0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRQcmVmZXJlbmNlKG1vZGUsIHJlYWRQcmVmZXJlbmNlLnRhZ3MgPz8gcmVhZFByZWZlcmVuY2VUYWdzLCB7XG4gICAgICAgICAgICAgICAgICAgIG1heFN0YWxlbmVzc1NlY29uZHM6IHJlYWRQcmVmZXJlbmNlLm1heFN0YWxlbmVzc1NlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgIGhlZGdlOiBvcHRpb25zLmhlZGdlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlYWRQcmVmZXJlbmNlVGFncykge1xuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UudGFncyA9IHJlYWRQcmVmZXJlbmNlVGFncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG9wdGlvbnMucmVhZFByZWZlcmVuY2Ugd2l0aCBhIFJlYWRQcmVmZXJlbmNlIGluc3RhbmNlXG4gICAgICovXG4gICAgc3RhdGljIHRyYW5zbGF0ZShvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRQcmVmZXJlbmNlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgY29uc3QgciA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgICAgIGlmICh0eXBlb2YgciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSBuZXcgUmVhZFByZWZlcmVuY2Uocik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAociAmJiAhKHIgaW5zdGFuY2VvZiBSZWFkUHJlZmVyZW5jZSkgJiYgdHlwZW9mIHIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RlID0gci5tb2RlIHx8IHIucHJlZmVyZW5jZTtcbiAgICAgICAgICAgIGlmIChtb2RlICYmIHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSBuZXcgUmVhZFByZWZlcmVuY2UobW9kZSwgci50YWdzLCB7XG4gICAgICAgICAgICAgICAgICAgIG1heFN0YWxlbmVzc1NlY29uZHM6IHIubWF4U3RhbGVuZXNzU2Vjb25kc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEociBpbnN0YW5jZW9mIFJlYWRQcmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCByZWFkIHByZWZlcmVuY2U6ICR7cn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgaWYgYSBtb2RlIGlzIGxlZ2FsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZSAtIFRoZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZWFkIHByZWZlcmVuY2UgbW9kZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNWYWxpZChtb2RlKSB7XG4gICAgICAgIGNvbnN0IFZBTElEX01PREVTID0gbmV3IFNldChbXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5QUklNQVJZLFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuTkVBUkVTVCxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBWQUxJRF9NT0RFUy5oYXMobW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGlmIGEgbW9kZSBpcyBsZWdhbFxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGUgLSBUaGUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcmVhZCBwcmVmZXJlbmNlIG1vZGUuXG4gICAgICovXG4gICAgaXNWYWxpZChtb2RlKSB7XG4gICAgICAgIHJldHVybiBSZWFkUHJlZmVyZW5jZS5pc1ZhbGlkKHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJyA/IG1vZGUgOiB0aGlzLm1vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIHJlYWRQcmVmZXJlbmNlIG5lZWRzIHRoZSBcIlNlY29uZGFyeU9rXCIgYml0IHdoZW4gc2VudCBvdmVyIHRoZSB3aXJlXG4gICAgICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvbW9uZ29kYi13aXJlLXByb3RvY29sLyNvcC1xdWVyeVxuICAgICAqL1xuICAgIHNlY29uZGFyeU9rKCkge1xuICAgICAgICBjb25zdCBORUVEU19TRUNPTkRBUllPSyA9IG5ldyBTZXQoW1xuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuTkVBUkVTVFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIE5FRURTX1NFQ09OREFSWU9LLmhhcyh0aGlzLm1vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdHdvIFJlYWRQcmVmZXJlbmNlcyBhcmUgZXF1aXZhbGVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYWRQcmVmZXJlbmNlIC0gVGhlIHJlYWQgcHJlZmVyZW5jZSB3aXRoIHdoaWNoIHRvIGNoZWNrIGVxdWFsaXR5XG4gICAgICovXG4gICAgZXF1YWxzKHJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgIHJldHVybiByZWFkUHJlZmVyZW5jZS5tb2RlID09PSB0aGlzLm1vZGU7XG4gICAgfVxuICAgIC8qKiBSZXR1cm4gSlNPTiByZXByZXNlbnRhdGlvbiAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSB7IG1vZGU6IHRoaXMubW9kZSB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ3MpKVxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UudGFncyA9IHRoaXMudGFncztcbiAgICAgICAgaWYgKHRoaXMubWF4U3RhbGVuZXNzU2Vjb25kcylcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlLm1heFN0YWxlbmVzc1NlY29uZHMgPSB0aGlzLm1heFN0YWxlbmVzc1NlY29uZHM7XG4gICAgICAgIGlmICh0aGlzLmhlZGdlKVxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UuaGVkZ2UgPSB0aGlzLmhlZGdlO1xuICAgICAgICByZXR1cm4gcmVhZFByZWZlcmVuY2U7XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkUHJlZmVyZW5jZSA9IFJlYWRQcmVmZXJlbmNlO1xuUmVhZFByZWZlcmVuY2UuUFJJTUFSWSA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnk7XG5SZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnlQcmVmZXJyZWQ7XG5SZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlkgPSBleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5zZWNvbmRhcnk7XG5SZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEID0gZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUuc2Vjb25kYXJ5UHJlZmVycmVkO1xuUmVhZFByZWZlcmVuY2UuTkVBUkVTVCA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLm5lYXJlc3Q7XG5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5ID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnkpO1xuUmVhZFByZWZlcmVuY2UucHJpbWFyeVByZWZlcnJlZCA9IG5ldyBSZWFkUHJlZmVyZW5jZShleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5wcmltYXJ5UHJlZmVycmVkKTtcblJlYWRQcmVmZXJlbmNlLnNlY29uZGFyeSA9IG5ldyBSZWFkUHJlZmVyZW5jZShleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5zZWNvbmRhcnkpO1xuUmVhZFByZWZlcmVuY2Uuc2Vjb25kYXJ5UHJlZmVycmVkID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnNlY29uZGFyeVByZWZlcnJlZCk7XG5SZWFkUHJlZmVyZW5jZS5uZWFyZXN0ID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLm5lYXJlc3QpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZF9wcmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.configureResourceManagement = configureResourceManagement;\nexports.configureExplicitResourceManagement = configureExplicitResourceManagement;\n/** @internal */\nfunction configureResourceManagement(target) {\n    Symbol.asyncDispose &&\n        Object.defineProperty(target, Symbol.asyncDispose, {\n            value: async function asyncDispose() {\n                await this.asyncDispose();\n            },\n            enumerable: false,\n            configurable: true,\n            writable: true\n        });\n}\n/**\n * @beta\n * @experimental\n *\n * Attaches `Symbol.asyncDispose` methods to the MongoClient, Cursors, sessions and change streams\n * if Symbol.asyncDispose is defined.\n *\n * It's usually not necessary to call this method - the driver attempts to attach these methods\n * itself when its loaded.  However, sometimes the driver may be loaded before `Symbol.asyncDispose`\n * is defined, in which case it is necessary to call this method directly.  This can happen if the\n * application is polyfilling `Symbol.asyncDispose`.\n *\n * Example:\n *\n * ```typescript\n * import { configureExplicitResourceManagement, MongoClient } from 'mongodb/lib/beta';\n *\n * Symbol.asyncDispose ??= Symbol('dispose');\n * load();\n *\n * await using client = new MongoClient(...);\n * ```\n */\nfunction configureExplicitResourceManagement() {\n    // We must import lazily here, because there's a circular dependency between the resource management\n    // file and each resources' file.  We could move `configureResourceManagement` to a separate\n    // function, but keeping all resource-management related code together seemed preferable and I chose\n    // lazy requiring of resources instead.\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { MongoClient } = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_client.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ClientSession } = __webpack_require__(/*! ./sessions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { AbstractCursor } = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ChangeStream } = __webpack_require__(/*! ./change_stream */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/change_stream.js\");\n    configureResourceManagement(MongoClient.prototype);\n    configureResourceManagement(ClientSession.prototype);\n    configureResourceManagement(AbstractCursor.prototype);\n    configureResourceManagement(ChangeStream.prototype);\n}\n//# sourceMappingURL=resource_management.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZXNvdXJjZV9tYW5hZ2VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbURBQW1EO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjLEVBQUUsbUJBQU8sQ0FBQyw4R0FBZ0I7QUFDcEQ7QUFDQSxZQUFZLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsc0dBQVk7QUFDbEQ7QUFDQSxZQUFZLGlCQUFpQixFQUFFLG1CQUFPLENBQUMsa0lBQTBCO0FBQ2pFO0FBQ0EsWUFBWSxlQUFlLEVBQUUsbUJBQU8sQ0FBQyxnSEFBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxyZXNvdXJjZV9tYW5hZ2VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQgPSBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQ7XG5leHBvcnRzLmNvbmZpZ3VyZUV4cGxpY2l0UmVzb3VyY2VNYW5hZ2VtZW50ID0gY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQ7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQodGFyZ2V0KSB7XG4gICAgU3ltYm9sLmFzeW5jRGlzcG9zZSAmJlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBTeW1ib2wuYXN5bmNEaXNwb3NlLCB7XG4gICAgICAgICAgICB2YWx1ZTogYXN5bmMgZnVuY3Rpb24gYXN5bmNEaXNwb3NlKCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXN5bmNEaXNwb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbn1cbi8qKlxuICogQGJldGFcbiAqIEBleHBlcmltZW50YWxcbiAqXG4gKiBBdHRhY2hlcyBgU3ltYm9sLmFzeW5jRGlzcG9zZWAgbWV0aG9kcyB0byB0aGUgTW9uZ29DbGllbnQsIEN1cnNvcnMsIHNlc3Npb25zIGFuZCBjaGFuZ2Ugc3RyZWFtc1xuICogaWYgU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBkZWZpbmVkLlxuICpcbiAqIEl0J3MgdXN1YWxseSBub3QgbmVjZXNzYXJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgLSB0aGUgZHJpdmVyIGF0dGVtcHRzIHRvIGF0dGFjaCB0aGVzZSBtZXRob2RzXG4gKiBpdHNlbGYgd2hlbiBpdHMgbG9hZGVkLiAgSG93ZXZlciwgc29tZXRpbWVzIHRoZSBkcml2ZXIgbWF5IGJlIGxvYWRlZCBiZWZvcmUgYFN5bWJvbC5hc3luY0Rpc3Bvc2VgXG4gKiBpcyBkZWZpbmVkLCBpbiB3aGljaCBjYXNlIGl0IGlzIG5lY2Vzc2FyeSB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiAgVGhpcyBjYW4gaGFwcGVuIGlmIHRoZVxuICogYXBwbGljYXRpb24gaXMgcG9seWZpbGxpbmcgYFN5bWJvbC5hc3luY0Rpc3Bvc2VgLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQsIE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYi9saWIvYmV0YSc7XG4gKlxuICogU3ltYm9sLmFzeW5jRGlzcG9zZSA/Pz0gU3ltYm9sKCdkaXNwb3NlJyk7XG4gKiBsb2FkKCk7XG4gKlxuICogYXdhaXQgdXNpbmcgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KC4uLik7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQoKSB7XG4gICAgLy8gV2UgbXVzdCBpbXBvcnQgbGF6aWx5IGhlcmUsIGJlY2F1c2UgdGhlcmUncyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgcmVzb3VyY2UgbWFuYWdlbWVudFxuICAgIC8vIGZpbGUgYW5kIGVhY2ggcmVzb3VyY2VzJyBmaWxlLiAgV2UgY291bGQgbW92ZSBgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50YCB0byBhIHNlcGFyYXRlXG4gICAgLy8gZnVuY3Rpb24sIGJ1dCBrZWVwaW5nIGFsbCByZXNvdXJjZS1tYW5hZ2VtZW50IHJlbGF0ZWQgY29kZSB0b2dldGhlciBzZWVtZWQgcHJlZmVyYWJsZSBhbmQgSSBjaG9zZVxuICAgIC8vIGxhenkgcmVxdWlyaW5nIG9mIHJlc291cmNlcyBpbnN0ZWFkLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgY29uc3QgeyBNb25nb0NsaWVudCB9ID0gcmVxdWlyZSgnLi9tb25nb19jbGllbnQnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgIGNvbnN0IHsgQ2xpZW50U2Vzc2lvbiB9ID0gcmVxdWlyZSgnLi9zZXNzaW9ucycpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgY29uc3QgeyBBYnN0cmFjdEN1cnNvciB9ID0gcmVxdWlyZSgnLi9jdXJzb3IvYWJzdHJhY3RfY3Vyc29yJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICBjb25zdCB7IENoYW5nZVN0cmVhbSB9ID0gcmVxdWlyZSgnLi9jaGFuZ2Vfc3RyZWFtJyk7XG4gICAgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50KE1vbmdvQ2xpZW50LnByb3RvdHlwZSk7XG4gICAgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50KENsaWVudFNlc3Npb24ucHJvdG90eXBlKTtcbiAgICBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQoQWJzdHJhY3RDdXJzb3IucHJvdG90eXBlKTtcbiAgICBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQoQ2hhbmdlU3RyZWFtLnByb3RvdHlwZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZV9tYW5hZ2VtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nexports._advanceClusterTime = _advanceClusterTime;\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxxQkFBcUI7QUFDN0ksMkJBQTJCO0FBQzNCO0FBQ0EscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXHNkYW1cXGNvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVyVHlwZSA9IGV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gZXhwb3J0cy5TVEFURV9DT05ORUNURUQgPSBleHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSBleHBvcnRzLlNUQVRFX0NMT1NFRCA9IGV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9IHZvaWQgMDtcbmV4cG9ydHMuX2FkdmFuY2VDbHVzdGVyVGltZSA9IF9hZHZhbmNlQ2x1c3RlclRpbWU7XG4vLyBzaGFyZWQgc3RhdGUgbmFtZXNcbmV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9ICdjbG9zaW5nJztcbmV4cG9ydHMuU1RBVEVfQ0xPU0VEID0gJ2Nsb3NlZCc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSAnY29ubmVjdGluZyc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RFRCA9ICdjb25uZWN0ZWQnO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB0b3BvbG9neSB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU2luZ2xlOiAnU2luZ2xlJyxcbiAgICBSZXBsaWNhU2V0Tm9QcmltYXJ5OiAnUmVwbGljYVNldE5vUHJpbWFyeScsXG4gICAgUmVwbGljYVNldFdpdGhQcmltYXJ5OiAnUmVwbGljYVNldFdpdGhQcmltYXJ5JyxcbiAgICBTaGFyZGVkOiAnU2hhcmRlZCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlZDogJ0xvYWRCYWxhbmNlZCdcbn0pO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiBzZXJ2ZXIgdHlwZXMgd2Uga25vdyBhYm91dFxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlNlcnZlclR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFuZGFsb25lOiAnU3RhbmRhbG9uZScsXG4gICAgTW9uZ29zOiAnTW9uZ29zJyxcbiAgICBQb3NzaWJsZVByaW1hcnk6ICdQb3NzaWJsZVByaW1hcnknLFxuICAgIFJTUHJpbWFyeTogJ1JTUHJpbWFyeScsXG4gICAgUlNTZWNvbmRhcnk6ICdSU1NlY29uZGFyeScsXG4gICAgUlNBcmJpdGVyOiAnUlNBcmJpdGVyJyxcbiAgICBSU090aGVyOiAnUlNPdGhlcicsXG4gICAgUlNHaG9zdDogJ1JTR2hvc3QnLFxuICAgIFVua25vd246ICdVbmtub3duJyxcbiAgICBMb2FkQmFsYW5jZXI6ICdMb2FkQmFsYW5jZXInXG59KTtcbi8qKiBTaGFyZWQgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGNsdXN0ZXJUaW1lIGZvciBhIGdpdmVuIHRvcG9sb2d5IG9yIHNlc3Npb24gKi9cbmZ1bmN0aW9uIF9hZHZhbmNlQ2x1c3RlclRpbWUoZW50aXR5LCAkY2x1c3RlclRpbWUpIHtcbiAgICBpZiAoZW50aXR5LmNsdXN0ZXJUaW1lID09IG51bGwpIHtcbiAgICAgICAgZW50aXR5LmNsdXN0ZXJUaW1lID0gJGNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCRjbHVzdGVyVGltZS5jbHVzdGVyVGltZS5ncmVhdGVyVGhhbihlbnRpdHkuY2x1c3RlclRpbWUuY2x1c3RlclRpbWUpKSB7XG4gICAgICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxxQ0FBcUMsR0FBRyxtQ0FBbUMsR0FBRywyQkFBMkIsR0FBRyw0QkFBNEIsR0FBRyx1Q0FBdUMsR0FBRyx5QkFBeUIsR0FBRywwQkFBMEIsR0FBRyxxQ0FBcUM7QUFDeFQsb0JBQW9CLG1CQUFPLENBQUMseUdBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXHNkYW1cXGV2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQgPSBleHBvcnRzLlRvcG9sb2d5Q2xvc2VkRXZlbnQgPSBleHBvcnRzLlRvcG9sb2d5T3BlbmluZ0V2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJDbG9zZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyT3BlbmluZ0V2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBkZXNjcmlwdGlvbiBjaGFuZ2VzLCBidXQgZG9lcyBOT1QgaW5jbHVkZSBjaGFuZ2VzIHRvIHRoZSBSVFQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzLCBwcmV2aW91c0Rlc2NyaXB0aW9uLCBuZXdEZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRDtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy5wcmV2aW91c0Rlc2NyaXB0aW9uID0gcHJldmlvdXNEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uZXdEZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBTZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJPcGVuaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX09QRU5JTkc7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJPcGVuaW5nRXZlbnQgPSBTZXJ2ZXJPcGVuaW5nRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckNsb3NlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcykge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9DTE9TRUQ7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJDbG9zZWRFdmVudCA9IFNlcnZlckNsb3NlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgZGVzY3JpcHRpb24gY2hhbmdlcy5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgcHJldmlvdXNEZXNjcmlwdGlvbiwgbmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLnByZXZpb3VzRGVzY3JpcHRpb24gPSBwcmV2aW91c0Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLm5ld0Rlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRvcG9sb2d5IGlzIGluaXRpYWxpemVkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5T3BlbmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlRPUE9MT0dZX09QRU5JTkc7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neU9wZW5pbmdFdmVudCA9IFRvcG9sb2d5T3BlbmluZ0V2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5Q2xvc2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfQ0xPU0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9wb2xvZ3lDbG9zZWRFdmVudCA9IFRvcG9sb2d5Q2xvc2VkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIGNvbW1hbmQgaXMgc3RhcnRlZCAtIGltbWVkaWF0ZWx5IGJlZm9yZVxuICogdGhlIGhlbGxvIGNvbW1hbmQgaXMgc2VyaWFsaXplZCBpbnRvIHJhdyBCU09OIGFuZCB3cml0dGVuIHRvIHRoZSBzb2NrZXQuXG4gKlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgYXdhaXRlZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfU1RBUlRFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuYXdhaXRlZCA9IGF3YWl0ZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQgPSBTZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIHN1Y2NlZWRzLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBkdXJhdGlvbiwgcmVwbHksIGF3YWl0ZWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX1NVQ0NFRURFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5yZXBseSA9IHJlcGx5ID8/IHt9O1xuICAgICAgICB0aGlzLmF3YWl0ZWQgPSBhd2FpdGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQgPSBTZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgbW9uaXRvcuKAmXMgaGVsbG8gZmFpbHMsIGVpdGhlciB3aXRoIGFuIOKAnG9rOiAw4oCdIG9yIGEgc29ja2V0IGV4Y2VwdGlvbi5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgZHVyYXRpb24sIGZhaWx1cmUsIGF3YWl0ZWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5mYWlsdXJlID0gZmFpbHVyZTtcbiAgICAgICAgdGhpcy5hd2FpdGVkID0gYXdhaXRlZDtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/monitor.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/monitor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RTTSampler = exports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connect.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server.js\");\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        /** @internal */\n        this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this.on('error', utils_1.noop);\n        this.server = server;\n        this.connection = null;\n        this.cancellationToken = new mongo_types_1.CancellationToken();\n        this.cancellationToken.setMaxListeners(Infinity);\n        this.monitorId = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this.server.topology.client?.mongoLogger;\n        this.rttSampler = new RTTSampler(10);\n        const cancellationToken = this.cancellationToken;\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: '<monitor>',\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this.monitorId = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this.monitorId?.wake();\n    }\n    reset() {\n        const topologyVersion = this.server.description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this.monitorId = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n    get roundTripTime() {\n        return this.rttSampler.average();\n    }\n    get minRoundTripTime() {\n        return this.rttSampler.min();\n    }\n    get latestRtt() {\n        return this.rttSampler.last;\n    }\n    addRttSample(rtt) {\n        this.rttSampler.addSample(rtt);\n    }\n    clearRttSamples() {\n        this.rttSampler.clear();\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor.monitorId?.stop();\n    monitor.monitorId = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor.cancellationToken.emit('cancel');\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.clearRttSamples();\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor.server.description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy();\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!('isWritablePrimary' in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        // NOTE: here we use the latestRtt as this measurement corresponds with the value\n        // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the\n        // duration\n        const duration = isAwaitable && monitor.rttPinger\n            ? (monitor.rttPinger.latestRtt ?? (0, utils_1.calculateDurationInMs)(start))\n            : (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        }\n        else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor);\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n                if (error)\n                    return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection\n            .command((0, utils_1.ns)('admin.$cmd'), cmd, options)\n            .then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async () => {\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        }\n        catch (error) {\n            connection.destroy();\n            throw error;\n        }\n    })().then(connection => {\n        if (isInCloseState(monitor)) {\n            connection.destroy();\n            return;\n        }\n        const duration = (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, error => {\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor.server.description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor.monitorId?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(monitor) {\n        this.connection = undefined;\n        this.cancellationToken = monitor.cancellationToken;\n        this.closed = false;\n        this.monitor = monitor;\n        this.latestRtt = monitor.latestRtt ?? undefined;\n        const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n        this.monitorId = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this.monitor.roundTripTime;\n    }\n    get minRoundTripTime() {\n        return this.monitor.minRoundTripTime;\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this.monitorId);\n        this.connection?.destroy();\n        this.connection = undefined;\n    }\n    measureAndReschedule(start, conn) {\n        if (this.closed) {\n            conn?.destroy();\n            return;\n        }\n        if (this.connection == null) {\n            this.connection = conn;\n        }\n        this.latestRtt = (0, utils_1.calculateDurationInMs)(start);\n        this.monitorId = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), this.monitor.options.heartbeatFrequencyMS);\n    }\n    measureRoundTripTime() {\n        const start = (0, utils_1.now)();\n        if (this.closed) {\n            return;\n        }\n        const connection = this.connection;\n        if (connection == null) {\n            (0, connect_1.connect)(this.monitor.connectOptions).then(connection => {\n                this.measureAndReschedule(start, connection);\n            }, () => {\n                this.connection = undefined;\n            });\n            return;\n        }\n        const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n        connection.command((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => this.measureAndReschedule(start), () => {\n            this.connection?.destroy();\n            this.connection = undefined;\n            return;\n        });\n    }\n}\nexports.RTTPinger = RTTPinger;\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n/** @internal\n * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)\n *\n * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping\n * the most recent `windowSize` samples\n * */\nclass RTTSampler {\n    constructor(windowSize = 10) {\n        this.rttSamples = new Float64Array(windowSize);\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n    /**\n     * Adds an rtt sample to the end of the circular buffer\n     * When `windowSize` samples have been collected, `addSample` overwrites the least recently added\n     * sample\n     */\n    addSample(sample) {\n        this.rttSamples[this.writeIndex++] = sample;\n        if (this.length < this.rttSamples.length) {\n            this.length++;\n        }\n        this.writeIndex %= this.rttSamples.length;\n    }\n    /**\n     * When \\< 2 samples have been collected, returns 0\n     * Otherwise computes the minimum value samples contained in the buffer\n     */\n    min() {\n        if (this.length < 2)\n            return 0;\n        let min = this.rttSamples[0];\n        for (let i = 1; i < this.length; i++) {\n            if (this.rttSamples[i] < min)\n                min = this.rttSamples[i];\n        }\n        return min;\n    }\n    /**\n     * Returns mean of samples contained in the buffer\n     */\n    average() {\n        if (this.length === 0)\n            return 0;\n        let sum = 0;\n        for (let i = 0; i < this.length; i++) {\n            sum += this.rttSamples[i];\n        }\n        return sum / this.length;\n    }\n    /**\n     * Returns most recently inserted element in the buffer\n     * Returns null if the buffer is empty\n     * */\n    get last() {\n        if (this.length === 0)\n            return null;\n        return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];\n    }\n    /**\n     * Clear the buffer\n     * NOTE: this does not overwrite the data held in the internal array, just the pointers into\n     * this array\n     */\n    clear() {\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n}\nexports.RTTSampler = RTTSampler;\n//# sourceMappingURL=monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: this.monitor?.roundTripTime,\n                minRoundTripTime: this.monitor?.minRoundTripTime\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy() {\n        if (this.s.state === common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close();\n        stateTransition(this, common_1.STATE_CLOSED);\n        this.emit('closed');\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    async command(ns, cmd, { ...options }, responseType) {\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        options.directConnection = this.topology.s.options.directConnection;\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (options.omitReadPreference) {\n            delete options.readPreference;\n        }\n        if (this.description.iscryptd) {\n            options.omitMaxTimeMS = true;\n        }\n        const session = options.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut(options);\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            }\n            catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError))\n                    this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        let reauthPromise = null;\n        try {\n            try {\n                const res = await conn.command(ns, cmd, options, responseType);\n                (0, write_concern_1.throwIfWriteConcernError)(res);\n                return res;\n            }\n            catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, options, commandError);\n            }\n        }\n        catch (operationError) {\n            if (operationError instanceof error_1.MongoError &&\n                operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                reauthPromise = this.pool.reauthenticate(conn);\n                reauthPromise.then(undefined, error => {\n                    reauthPromise = null;\n                    (0, utils_1.squashError)(error);\n                });\n                await (0, utils_1.abortable)(reauthPromise, options);\n                reauthPromise = null; // only reachable if reauth succeeds\n                try {\n                    const res = await conn.command(ns, cmd, options, responseType);\n                    (0, write_concern_1.throwIfWriteConcernError)(res);\n                    return res;\n                }\n                catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, options, commandError);\n                }\n            }\n            else {\n                throw operationError;\n            }\n        }\n        finally {\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                if (reauthPromise != null) {\n                    // The reauth promise only exists if it hasn't thrown.\n                    const checkBackIn = () => {\n                        this.pool.checkIn(conn);\n                    };\n                    void reauthPromise.then(checkBackIn, checkBackIn);\n                }\n                else {\n                    this.pool.checkIn(conn);\n                }\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = error instanceof error_1.MongoNetworkError && error.beforeHandshake;\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */\n    decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== 'object' || error == null || !('name' in error)) {\n            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n        }\n        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(this) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this), this.description.type) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd ||\n            'bulkWrite' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerDescription = void 0;\nexports.parseServerType = parseServerType;\nexports.compareTopologyVersion = compareTopologyVersion;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.minRoundTripTime = options?.minRoundTripTime ?? 0;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        // NOTE: This actually builds the stack string instead of holding onto the getter and all its\n        // associated references. This is done to prevent a memory leak.\n        this.error = options.error ?? null;\n        this.error?.stack;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.maxMessageSizeBytes = hello?.maxMessageSizeBytes ?? null;\n        this.maxWriteBatchSize = hello?.maxWriteBatchSize ?? null;\n        this.maxBsonObjectSize = hello?.maxBsonObjectSize ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n        this.iscryptd = Boolean(hello?.iscryptd);\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined in the SDAM specification.\n     * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            other.iscryptd === this.iscryptd &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = typeof currentTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(currentTv.counter)\n        : bson_1.Long.isLong(currentTv.counter)\n            ? currentTv.counter\n            : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = typeof newTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(newTv.counter)\n        : bson_1.Long.isLong(newTv.counter)\n            ? newTv.counter\n            : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\n//# sourceMappingURL=server_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nexports.writableServerSelector = writableServerSelector;\nexports.sameServerSelector = sameServerSelector;\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n    };\n}\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here:\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.md\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => Math.min(server.roundTripTime, min), Infinity);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter(server => {\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\n//# sourceMappingURL=server_selection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection_events.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection_events.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = __webpack_require__(/*! .././utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = 'Server selection started';\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, error, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = 'Server selection failed';\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, address, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = 'Server selection succeeded';\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, remainingTimeMS, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = 'Waiting for suitable server to become available';\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;\n//# sourceMappingURL=server_selection_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3NlcnZlcl9zZWxlY3Rpb25fZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQyxHQUFHLHFDQUFxQyxHQUFHLGtDQUFrQyxHQUFHLG1DQUFtQyxHQUFHLDRCQUE0QjtBQUN2TCxnQkFBZ0IsbUJBQU8sQ0FBQyxtR0FBWTtBQUNwQyxvQkFBb0IsbUJBQU8sQ0FBQyx5R0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXJpY19cXERlc2t0b3BcXHN5bmVyZ3ktbWF0Y2gtYXBwXFxub2RlX21vZHVsZXNcXC5wbnBtXFxtb25nb2RiQDYuMTYuMFxcbm9kZV9tb2R1bGVzXFxtb25nb2RiXFxsaWJcXHNkYW1cXHNlcnZlcl9zZWxlY3Rpb25fZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkV2ZW50ID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uL3V0aWxzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBUaGUgYmFzZSBleHBvcnQgY2xhc3MgZm9yIGFsbCBsb2dzIHB1Ymxpc2hlZCBmcm9tIHNlcnZlciBzZWxlY3Rpb25cbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IExvZyBUeXBlXG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gb3BlcmF0aW9uO1xuICAgICAgICB0aGlzLnRvcG9sb2d5RGVzY3JpcHRpb24gPSB0b3BvbG9neURlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25FdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBzdGFydHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NUQVJURUQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdTZXJ2ZXIgc2VsZWN0aW9uIHN0YXJ0ZWQnO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50ID0gU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIHNlcnZlciBzZWxlY3Rpb24gZmFpbHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgZXJyb3IsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gZmFpbGVkJztcbiAgICAgICAgdGhpcy5mYWlsdXJlID0gZXJyb3I7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCA9IFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBzZXJ2ZXIgc2VsZWN0aW9uIHN1Y2NlZWRzXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIGFkZHJlc3MsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NVQ0NFRURFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gc3VjY2VlZGVkJztcbiAgICAgICAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykudG9Ib3N0UG9ydCgpO1xuICAgICAgICB0aGlzLnNlcnZlckhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLnNlcnZlclBvcnQgPSBwb3J0O1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBpcyB3YWl0aW5nIGZvciBhIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBXYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIHJlbWFpbmluZ1RpbWVNUywgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLldBSVRJTkdfRk9SX1NVSVRBQkxFX1NFUlZFUjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1dhaXRpbmcgZm9yIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlJztcbiAgICAgICAgdGhpcy5yZW1haW5pbmdUaW1lTVMgPSByZW1haW5pbmdUaW1lTVM7XG4gICAgfVxufVxuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IFdhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyX3NlbGVjdGlvbl9ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection_events.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/srv_polling.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        this.on('error', utils_1.noop);\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().then(undefined, utils_1.squashError);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            try {\n                (0, utils_1.checkParentDomainMatch)(record.name, this.srvHost);\n                finalAddresses.push(record);\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\n//# sourceMappingURL=srv_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3Nydl9wb2xsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLHVCQUF1QjtBQUMzQyxZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQVU7QUFDbEMsc0JBQXNCLG1CQUFPLENBQUMsNkdBQWdCO0FBQzlDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CLFFBQVEsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcc2RhbVxcc3J2X3BvbGxpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNydlBvbGxlciA9IGV4cG9ydHMuU3J2UG9sbGluZ0V2ZW50ID0gdm9pZCAwO1xuY29uc3QgZG5zID0gcmVxdWlyZShcImRuc1wiKTtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBtb25nb190eXBlc18xID0gcmVxdWlyZShcIi4uL21vbmdvX3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU3J2UG9sbGluZ0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzcnZSZWNvcmRzKSB7XG4gICAgICAgIHRoaXMuc3J2UmVjb3JkcyA9IHNydlJlY29yZHM7XG4gICAgfVxuICAgIGhvc3RuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQodGhpcy5zcnZSZWNvcmRzLm1hcChyID0+IHV0aWxzXzEuSG9zdEFkZHJlc3MuZnJvbVNydlJlY29yZChyKS50b1N0cmluZygpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5TcnZQb2xsaW5nRXZlbnQgPSBTcnZQb2xsaW5nRXZlbnQ7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTcnZQb2xsZXIgZXh0ZW5kcyBtb25nb190eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub24oJ2Vycm9yJywgdXRpbHNfMS5ub29wKTtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnNydkhvc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdPcHRpb25zIGZvciBTcnZQb2xsZXIgbXVzdCBleGlzdCBhbmQgaW5jbHVkZSBzcnZIb3N0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcnZIb3N0ID0gb3B0aW9ucy5zcnZIb3N0O1xuICAgICAgICB0aGlzLnNydk1heEhvc3RzID0gb3B0aW9ucy5zcnZNYXhIb3N0cyA/PyAwO1xuICAgICAgICB0aGlzLnNydlNlcnZpY2VOYW1lID0gb3B0aW9ucy5zcnZTZXJ2aWNlTmFtZSA/PyAnbW9uZ29kYic7XG4gICAgICAgIHRoaXMucmVzY2FuU3J2SW50ZXJ2YWxNUyA9IDYwMDAwO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TID0gb3B0aW9ucy5oZWFydGJlYXRGcmVxdWVuY3lNUyA/PyAxMDAwMDtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nZW5lcmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IHNydkFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiBgXyR7dGhpcy5zcnZTZXJ2aWNlTmFtZX0uX3RjcC4ke3RoaXMuc3J2SG9zdH1gO1xuICAgIH1cbiAgICBnZXQgaW50ZXJ2YWxNUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFNb2RlID8gdGhpcy5oZWFydGJlYXRGcmVxdWVuY3lNUyA6IHRoaXMucmVzY2FuU3J2SW50ZXJ2YWxNUztcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGlvbiArPSAxO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPKE5PREUtNDk5NCk6IGltcGxlbWVudCBuZXcgbG9nZ2luZyBsb2dpYyBmb3IgU3J2UG9sbGVyIGZhaWx1cmVzXG4gICAgc2NoZWR1bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gKDAsIHRpbWVyc18xLnNldFRpbWVvdXQpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3BvbGwoKS50aGVuKHVuZGVmaW5lZCwgdXRpbHNfMS5zcXVhc2hFcnJvcik7XG4gICAgICAgIH0sIHRoaXMuaW50ZXJ2YWxNUyk7XG4gICAgfVxuICAgIHN1Y2Nlc3Moc3J2UmVjb3Jkcykge1xuICAgICAgICB0aGlzLmhhTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgIHRoaXMuZW1pdChTcnZQb2xsZXIuU1JWX1JFQ09SRF9ESVNDT1ZFUlksIG5ldyBTcnZQb2xsaW5nRXZlbnQoc3J2UmVjb3JkcykpO1xuICAgIH1cbiAgICBmYWlsdXJlKCkge1xuICAgICAgICB0aGlzLmhhTW9kZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB9XG4gICAgYXN5bmMgX3BvbGwoKSB7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSB0aGlzLmdlbmVyYXRpb247XG4gICAgICAgIGxldCBzcnZSZWNvcmRzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3J2UmVjb3JkcyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlU3J2KHRoaXMuc3J2QWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlbmVyYXRpb24gIT09IHRoaXMuZ2VuZXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbmFsQWRkcmVzc2VzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHNydlJlY29yZHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuY2hlY2tQYXJlbnREb21haW5NYXRjaCkocmVjb3JkLm5hbWUsIHRoaXMuc3J2SG9zdCk7XG4gICAgICAgICAgICAgICAgZmluYWxBZGRyZXNzZXMucHVzaChyZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuc3F1YXNoRXJyb3IpKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZpbmFsQWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWNjZXNzKGZpbmFsQWRkcmVzc2VzKTtcbiAgICB9XG59XG5leHBvcnRzLlNydlBvbGxlciA9IFNydlBvbGxlcjtcbi8qKiBAZXZlbnQgKi9cblNydlBvbGxlci5TUlZfUkVDT1JEX0RJU0NPVkVSWSA9ICdzcnZSZWNvcmREaXNjb3ZlcnknO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3J2X3BvbGxpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst server_selection_events_1 = __webpack_require__(/*! ./server_selection_events */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_selection_events.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.client = client;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this.waitQueue = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = 'topology';\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n        this.connectionLock = undefined;\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    /** Initiate server connect */\n    async connect(options) {\n        this.connectionLock ??= this._connect(options);\n        try {\n            await this.connectionLock;\n            return this;\n        }\n        finally {\n            this.connectionLock = undefined;\n        }\n    }\n    async _connect(options) {\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            return this;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const serverSelectionTimeoutMS = this.client.s.options.serverSelectionTimeoutMS;\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const timeoutContext = timeout_1.TimeoutContext.create({\n            // TODO(NODE-6448): auto-connect ignores timeoutMS; potential future feature\n            timeoutMS: undefined,\n            serverSelectionTimeoutMS,\n            waitQueueTimeoutMS: this.client.s.options.waitQueueTimeoutMS\n        });\n        const selectServerOptions = {\n            operationName: 'ping',\n            ...options,\n            timeoutContext\n        };\n        try {\n            const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n            const skipPingOnConnect = this.s.options.__skipPingOnConnect === true;\n            if (!skipPingOnConnect && this.s.credentials) {\n                await server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, { timeoutContext });\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Topology.OPEN, this);\n                this.emit(Topology.CONNECT, this);\n                return this;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            return this;\n        }\n        catch (error) {\n            this.close();\n            throw error;\n        }\n    }\n    /** Close this topology */\n    close() {\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return;\n        }\n        for (const server of this.s.servers.values()) {\n            destroyServer(server, this);\n        }\n        this.s.servers.clear();\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this.waitQueue, new error_1.MongoTopologyClosedError());\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        stateTransition(this, common_1.STATE_CLOSED);\n        // emit an event for close\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    async selectServer(selector, options) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        let timeout;\n        if (options.timeoutContext)\n            timeout = options.timeoutContext.serverSelectionTimeout;\n        else {\n            timeout = timeout_1.Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            if (options.timeoutContext?.clearServerSelectionTimeout)\n                timeout?.clear();\n            return transaction.server;\n        }\n        const { promise: serverPromise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            resolve,\n            reject,\n            cancelled: false,\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        const abortListener = (0, utils_1.addAbortListener)(options.signal, function () {\n            waitQueueMember.cancelled = true;\n            reject(this.reason);\n        });\n        this.waitQueue.push(waitQueueMember);\n        processWaitQueue(this);\n        try {\n            timeout?.throwIfExpired();\n            const server = await (timeout ? Promise.race([serverPromise, timeout]) : serverPromise);\n            if (options.timeoutContext?.csotEnabled() && server.description.minRoundTripTime !== 0) {\n                options.timeoutContext.minRoundTripTime = server.description.minRoundTripTime;\n            }\n            return server;\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                // Timeout\n                waitQueueMember.cancelled = true;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${timeout?.duration} ms`, this.description);\n                if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n                }\n                if (options.timeoutContext?.csotEnabled()) {\n                    throw new error_1.MongoOperationTimeoutError('Timed out during server selection', {\n                        cause: timeoutError\n                    });\n                }\n                throw timeoutError;\n            }\n            // Other server selection error\n            throw error;\n        }\n        finally {\n            abortListener?.[utils_1.kDispose]();\n            if (options.timeoutContext?.clearServerSelectionTimeout)\n                timeout?.clear();\n        }\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this.waitQueue.length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy();\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.removeAllListeners(event);\n    }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, drainError) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (!waitQueueMember.cancelled) {\n            if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(drainError);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology.waitQueue, new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology.waitQueue.length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology.waitQueue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.cancelled) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : [])\n                : serverDescriptions;\n        }\n        catch (selectorError) {\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(selectorError);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0\n                        ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime)\n                        : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology.waitQueue.push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(serverSelectionError);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.resolve(selectedServer);\n    }\n    if (topology.waitQueue.length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology_description.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology_description.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TopologyDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n    /**\n     * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n     * intended for use with JSON.stringify().\n     *\n     * This method will not throw.\n     */\n    toJSON() {\n        return bson_1.EJSON.serialize(this);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    const setVersionElectionIdMismatch = (serverDescription, maxSetVersion, maxElectionId) => {\n        return (`primary marked stale due to electionId/setVersion mismatch:` +\n            ` server setVersion: ${serverDescription.setVersion},` +\n            ` server electionId: ${serverDescription.electionId},` +\n            ` topology setVersion: ${maxSetVersion},` +\n            ` topology electionId: ${maxElectionId}`);\n    };\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {\n                error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))\n            }));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {\n                        error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))\n                    }));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address, undefined, {\n                error: new error_1.MongoStalePrimaryError('primary marked stale due to discovery of newer primary')\n            }));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerSessionPool = exports.ServerSession = exports.ClientSession = void 0;\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nexports.applySession = applySession;\nexports.updateSessionFromResponse = updateSessionFromResponse;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/resource_management.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this.timeoutContext = null;\n        this.on('error', utils_1.noop);\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        this.snapshotEnabled = options.snapshot === true;\n        if (options.causalConsistency === true && this.snapshotEnabled) {\n            throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.timeoutMS = options.defaultTimeoutMS ?? client.s.options?.timeoutMS;\n        this.explicit = !!options.explicit;\n        this._serverSession = this.explicit ? this.sessionPool.acquire() : null;\n        this.txnNumberIncrement = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = { ...options.defaultTransactionOptions };\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this.serverSession?.id;\n    }\n    get serverSession() {\n        let serverSession = this._serverSession;\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this._serverSession = serverSession;\n        }\n        return serverSession;\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    pin(conn) {\n        if (this.pinnedConnection) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this.pinnedConnection = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this.pinnedConnection : this.transaction.isPinned;\n    }\n    /**\n     * Frees any client-side resources held by the current session.  If a session is in a transaction,\n     * the transaction is aborted.\n     *\n     * Does not end the session on the server.\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction({ ...options, throwTimeout: true });\n            }\n        }\n        catch (error) {\n            // spec indicates that we should ignore all errors for `endSessions`\n            if (error.name === 'MongoOperationTimeoutError')\n                throw error;\n            (0, utils_1.squashError)(error);\n        }\n        finally {\n            if (!this.hasEnded) {\n                const serverSession = this.serverSession;\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Store a clone of the server session for reference (debugging)\n                    this._serverSession = new ServerSession(serverSession);\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.endSession({ force: true });\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this.txnNumberIncrement += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @remarks\n     * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this.snapshotEnabled) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        this.commitAttempted = false;\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     *\n     * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n     */\n    async commitTransaction(options) {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction');\n        }\n        const command = { commitTransaction: 1 };\n        const timeoutMS = typeof options?.timeoutMS === 'number'\n            ? options.timeoutMS\n            : typeof this.timeoutMS === 'number'\n                ? this.timeoutMS\n                : null;\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null) {\n            if (timeoutMS == null && this.timeoutContext == null) {\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n            }\n            else {\n                const wcKeys = Object.keys(wc);\n                if (wcKeys.length > 2 || (!wcKeys.includes('wtimeoutMS') && !wcKeys.includes('wTimeoutMS')))\n                    // if the write concern was specified with wTimeoutMS, then we set both wtimeoutMS and wTimeoutMS, guaranteeing at least two keys, so if we have more than two keys, then we can automatically assume that we should add the write concern to the command. If it has 2 or fewer keys, we need to check that those keys aren't the wtimeoutMS or wTimeoutMS options before we add the write concern to the command\n                    write_concern_1.WriteConcern.apply(command, { ...wc, wtimeoutMS: undefined });\n            }\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.commitAttempted) {\n            if (timeoutMS == null && this.timeoutContext == null) {\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n            }\n            else {\n                write_concern_1.WriteConcern.apply(command, { w: 'majority', ...wc, wtimeoutMS: undefined });\n            }\n        }\n        if (typeof this.transaction.options.maxTimeMS === 'number') {\n            command.maxTimeMS = this.transaction.options.maxTimeMS;\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        const timeoutContext = this.timeoutContext ??\n            (typeof timeoutMS === 'number'\n                ? timeout_1.TimeoutContext.create({\n                    serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                    socketTimeoutMS: this.clientOptions.socketTimeoutMS,\n                    timeoutMS\n                })\n                : null);\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n            this.commitAttempted = undefined;\n            return;\n        }\n        catch (firstCommitError) {\n            this.commitAttempted = true;\n            if (firstCommitError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstCommitError)) {\n                // SPEC-1185: apply majority write concern when retrying commitTransaction\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n                // per txns spec, must unpin session in this case\n                this.unpin({ force: true });\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunAdminCommandOperation(command, {\n                        session: this,\n                        readPreference: read_preference_1.ReadPreference.primary,\n                        bypassPinningCheck: true\n                    }), timeoutContext);\n                    return;\n                }\n                catch (retryCommitError) {\n                    // If the retry failed, we process that error instead of the original\n                    if (shouldAddUnknownTransactionCommitResultLabel(retryCommitError)) {\n                        retryCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    }\n                    if (shouldUnpinAfterCommitError(retryCommitError)) {\n                        this.unpin({ error: retryCommitError });\n                    }\n                    throw retryCommitError;\n                }\n            }\n            if (shouldAddUnknownTransactionCommitResultLabel(firstCommitError)) {\n                firstCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            if (shouldUnpinAfterCommitError(firstCommitError)) {\n                this.unpin({ error: firstCommitError });\n            }\n            throw firstCommitError;\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        }\n    }\n    async abortTransaction(options) {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction twice');\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction');\n        }\n        const command = { abortTransaction: 1 };\n        const timeoutMS = typeof options?.timeoutMS === 'number'\n            ? options.timeoutMS\n            : this.timeoutContext?.csotEnabled()\n                ? this.timeoutContext.timeoutMS // refresh timeoutMS for abort operation\n                : typeof this.timeoutMS === 'number'\n                    ? this.timeoutMS\n                    : null;\n        const timeoutContext = timeoutMS != null\n            ? timeout_1.TimeoutContext.create({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                socketTimeoutMS: this.clientOptions.socketTimeoutMS\n            })\n            : null;\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null && timeoutMS == null) {\n            write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n            this.unpin();\n            return;\n        }\n        catch (firstAbortError) {\n            this.unpin();\n            if (firstAbortError.name === 'MongoRuntimeError')\n                throw firstAbortError;\n            if (options?.throwTimeout && firstAbortError.name === 'MongoOperationTimeoutError') {\n                throw firstAbortError;\n            }\n            if (firstAbortError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstAbortError)) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n                    return;\n                }\n                catch (secondAbortError) {\n                    if (secondAbortError.name === 'MongoRuntimeError')\n                        throw secondAbortError;\n                    if (options?.throwTimeout && secondAbortError.name === 'MongoOperationTimeoutError') {\n                        throw secondAbortError;\n                    }\n                    // we do not retry the retry\n                }\n            }\n            // The spec indicates that if the operation times out or fails with a non-retryable error, we should ignore all errors on `abortTransaction`\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (this.loadBalanced) {\n                maybeClearPinnedConnection(this, { force: false });\n            }\n        }\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n     *\n     * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not\n     * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.\n     *\n     *\n     * @remarks\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * If a command inside withTransaction fails:\n     * - It may cause the transaction on the server to be aborted.\n     * - This situation is normally handled transparently by the driver.\n     * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n     * - The driver will then retry the transaction indefinitely.\n     *\n     * To avoid this situation, the application must not silently handle errors within the provided function.\n     * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const MAX_TIMEOUT = 120000;\n        const timeoutMS = options?.timeoutMS ?? this.timeoutMS ?? null;\n        this.timeoutContext =\n            timeoutMS != null\n                ? timeout_1.TimeoutContext.create({\n                    timeoutMS,\n                    serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                    socketTimeoutMS: this.clientOptions.socketTimeoutMS\n                })\n                : null;\n        const startTime = this.timeoutContext?.csotEnabled() ? this.timeoutContext.start : (0, utils_1.now)();\n        let committed = false;\n        let result;\n        try {\n            while (!committed) {\n                this.startTransaction(options); // may throw on error\n                try {\n                    const promise = fn(this);\n                    if (!(0, utils_1.isPromiseLike)(promise)) {\n                        throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n                    }\n                    result = await promise;\n                    if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n                        // Assume callback intentionally ended the transaction\n                        return result;\n                    }\n                }\n                catch (fnError) {\n                    if (!(fnError instanceof error_1.MongoError) || fnError instanceof error_1.MongoInvalidArgumentError) {\n                        await this.abortTransaction();\n                        throw fnError;\n                    }\n                    if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_IN_PROGRESS) {\n                        await this.abortTransaction();\n                    }\n                    if (fnError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                        (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                        continue;\n                    }\n                    throw fnError;\n                }\n                while (!committed) {\n                    try {\n                        /*\n                         * We will rely on ClientSession.commitTransaction() to\n                         * apply a majority write concern if commitTransaction is\n                         * being retried (see: DRIVERS-601)\n                         */\n                        await this.commitTransaction();\n                        committed = true;\n                    }\n                    catch (commitError) {\n                        /*\n                         * Note: a maxTimeMS error will have the MaxTimeMSExpired\n                         * code (50) and can be reported as a top-level error or\n                         * inside writeConcernError, ex.\n                         * { ok:0, code: 50, codeName: 'MaxTimeMSExpired' }\n                         * { ok:1, writeConcernError: { code: 50, codeName: 'MaxTimeMSExpired' } }\n                         */\n                        if (!isMaxTimeMSExpiredError(commitError) &&\n                            commitError.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult) &&\n                            (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                            continue;\n                        }\n                        if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                            (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                            break;\n                        }\n                        throw commitError;\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this.timeoutContext = null;\n        }\n    }\n}\nexports.ClientSession = ClientSession;\n(0, resource_management_1.configureResourceManagement)(ClientSession.prototype);\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction shouldUnpinAfterCommitError(commitError) {\n    if (commitError instanceof error_1.MongoError) {\n        if ((0, error_1.isRetryableWriteError)(commitError) ||\n            commitError instanceof error_1.MongoWriteConcernError ||\n            isMaxTimeMSExpiredError(commitError)) {\n            if (isUnknownTransactionCommitResult(commitError)) {\n                // per txns spec, must unpin session in this case\n                return true;\n            }\n        }\n        else if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction shouldAddUnknownTransactionCommitResultLabel(commitError) {\n    let ok = (0, error_1.isRetryableWriteError)(commitError);\n    ok ||= commitError instanceof error_1.MongoWriteConcernError;\n    ok ||= isMaxTimeMSExpiredError(commitError);\n    ok &&= isUnknownTransactionCommitResult(commitError);\n    return ok;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session.pinnedConnection;\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            session.pinnedConnection = undefined;\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n    }\n}\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        err.writeConcernError?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor(cloned) {\n        if (cloned != null) {\n            const idBytes = Buffer.allocUnsafe(16);\n            idBytes.set(cloned.id.id.buffer);\n            this.id = { id: new bson_1.Binary(idBytes, cloned.id.id.sub_type) };\n            this.lastUse = cloned.lastUse;\n            this.txnNumber = cloned.txnNumber;\n            this.isDirty = cloned.isDirty;\n            return;\n        }\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session.txnNumberIncrement;\n        session.txnNumberIncrement = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session.snapshotEnabled) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session.snapshotTime != null) {\n                Object.assign(command.readConcern, { atClusterTime: session.snapshotTime });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.snapshotEnabled && session.snapshotTime == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.atClusterTime;\n        if (atClusterTime) {\n            session.snapshotTime = atClusterTime;\n        }\n    }\n}\n//# sourceMappingURL=sessions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSort = formatSort;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyxnR0FBUztBQUNqQztBQUNBO0FBQ0EscUJBQXFCLFVBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLDBCQUEwQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsS0FBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsRUFBRTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxJQUFJO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsc0JBQXNCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVyaWNfXFxEZXNrdG9wXFxzeW5lcmd5LW1hdGNoLWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbW9uZ29kYkA2LjE2LjBcXG5vZGVfbW9kdWxlc1xcbW9uZ29kYlxcbGliXFxzb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRTb3J0ID0gZm9ybWF0U29ydDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uID0gMSkge1xuICAgIGNvbnN0IHZhbHVlID0gYCR7ZGlyZWN0aW9ufWAudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNNZXRhKGRpcmVjdGlvbikpXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlICdhc2NlbmRpbmcnOlxuICAgICAgICBjYXNlICdhc2MnOlxuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICdkZXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnZGVzYyc6XG4gICAgICAgIGNhc2UgJy0xJzpcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBkaXJlY3Rpb246ICR7SlNPTi5zdHJpbmdpZnkoZGlyZWN0aW9uKX1gKTtcbiAgICB9XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc01ldGEodCkge1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ29iamVjdCcgJiYgdCAhPSBudWxsICYmICckbWV0YScgaW4gdCAmJiB0eXBlb2YgdC4kbWV0YSA9PT0gJ3N0cmluZyc7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc1BhaXIodCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHQpICYmIHQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRGVlcCh0KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCkgJiYgQXJyYXkuaXNBcnJheSh0WzBdKTtcbn1cbmZ1bmN0aW9uIGlzTWFwKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIE1hcCAmJiB0LnNpemUgPiAwO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gcGFpclRvTWFwKHYpIHtcbiAgICByZXR1cm4gbmV3IE1hcChbW2Ake3ZbMF19YCwgcHJlcGFyZURpcmVjdGlvbihbdlsxXV0pXV0pO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZGVlcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IHQubWFwKChbaywgdl0pID0+IFtgJHtrfWAsIHByZXBhcmVEaXJlY3Rpb24odildKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBzdHJpbmdzVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoa2V5ID0+IFtgJHtrZXl9YCwgMV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG9iamVjdFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHQpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICAgIGAke2t9YCxcbiAgICAgICAgcHJlcGFyZURpcmVjdGlvbih2KVxuICAgIF0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG1hcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IEFycmF5LmZyb20odCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIGNvbnZlcnRzIGEgU29ydCB0eXBlIGludG8gYSB0eXBlIHRoYXQgaXMgdmFsaWQgZm9yIHRoZSBzZXJ2ZXIgKFNvcnRGb3JDbWQpICovXG5mdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnQsIGRpcmVjdGlvbikge1xuICAgIGlmIChzb3J0ID09IG51bGwpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoW1tzb3J0LCBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbildXSk7XG4gICAgaWYgKHR5cGVvZiBzb3J0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZm9ybWF0OiAke0pTT04uc3RyaW5naWZ5KHNvcnQpfSBTb3J0IG11c3QgYmUgYSB2YWxpZCBvYmplY3RgKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNvcnQpKSB7XG4gICAgICAgIHJldHVybiBpc01hcChzb3J0KSA/IG1hcFRvTWFwKHNvcnQpIDogT2JqZWN0LmtleXMoc29ydCkubGVuZ3RoID8gb2JqZWN0VG9NYXAoc29ydCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghc29ydC5sZW5ndGgpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVlcChzb3J0KSlcbiAgICAgICAgcmV0dXJuIGRlZXBUb01hcChzb3J0KTtcbiAgICBpZiAoaXNQYWlyKHNvcnQpKVxuICAgICAgICByZXR1cm4gcGFpclRvTWFwKHNvcnQpO1xuICAgIHJldHVybiBzdHJpbmdzVG9NYXAoc29ydCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LegacyTimeoutContext = exports.CSOTTimeoutContext = exports.TimeoutContext = exports.Timeout = exports.TimeoutError = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\");\n/** @internal */\nclass TimeoutError extends Error {\n    get name() {\n        return 'TimeoutError';\n    }\n    constructor(message, options) {\n        super(message, options);\n        this.duration = options.duration;\n    }\n    static is(error) {\n        return (error != null && typeof error === 'object' && 'name' in error && error.name === 'TimeoutError');\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * @internal\n * This class is an abstraction over timeouts\n * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve\n * if interacted with exclusively through its public API\n * */\nclass Timeout extends Promise {\n    get remainingTime() {\n        if (this.timedOut)\n            return 0;\n        if (this.duration === 0)\n            return Infinity;\n        return this.start + this.duration - Math.trunc(performance.now());\n    }\n    get timeElapsed() {\n        return Math.trunc(performance.now()) - this.start;\n    }\n    /** Create a new timeout that expires in `duration` ms */\n    constructor(executor = () => null, options) {\n        const duration = options?.duration ?? 0;\n        const unref = !!options?.unref;\n        const rejection = options?.rejection;\n        if (duration < 0) {\n            throw new error_1.MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');\n        }\n        let reject;\n        super((_, promiseReject) => {\n            reject = promiseReject;\n            executor(utils_1.noop, promiseReject);\n        });\n        this.ended = null;\n        this.timedOut = false;\n        this.cleared = false;\n        this.duration = duration;\n        this.start = Math.trunc(performance.now());\n        if (rejection == null && this.duration > 0) {\n            this.id = (0, timers_1.setTimeout)(() => {\n                this.ended = Math.trunc(performance.now());\n                this.timedOut = true;\n                reject(new TimeoutError(`Expired after ${duration}ms`, { duration }));\n            }, this.duration);\n            if (typeof this.id.unref === 'function' && unref) {\n                // Ensure we do not keep the Node.js event loop running\n                this.id.unref();\n            }\n        }\n        else if (rejection != null) {\n            this.ended = Math.trunc(performance.now());\n            this.timedOut = true;\n            reject(rejection);\n        }\n    }\n    /**\n     * Clears the underlying timeout. This method is idempotent\n     */\n    clear() {\n        (0, timers_1.clearTimeout)(this.id);\n        this.id = undefined;\n        this.timedOut = false;\n        this.cleared = true;\n    }\n    throwIfExpired() {\n        if (this.timedOut) {\n            // This method is invoked when someone wants to throw immediately instead of await the result of this promise\n            // Since they won't be handling the rejection from the promise (because we're about to throw here)\n            // attach handling to prevent this from bubbling up to Node.js\n            this.then(undefined, utils_1.squashError);\n            throw new TimeoutError('Timed out', { duration: this.duration });\n        }\n    }\n    static expires(duration, unref) {\n        return new Timeout(undefined, { duration, unref });\n    }\n    static reject(rejection) {\n        return new Timeout(undefined, { duration: 0, unref: true, rejection });\n    }\n}\nexports.Timeout = Timeout;\nfunction isLegacyTimeoutContextOptions(v) {\n    return (v != null &&\n        typeof v === 'object' &&\n        'serverSelectionTimeoutMS' in v &&\n        typeof v.serverSelectionTimeoutMS === 'number' &&\n        'waitQueueTimeoutMS' in v &&\n        typeof v.waitQueueTimeoutMS === 'number');\n}\nfunction isCSOTTimeoutContextOptions(v) {\n    return (v != null &&\n        typeof v === 'object' &&\n        'serverSelectionTimeoutMS' in v &&\n        typeof v.serverSelectionTimeoutMS === 'number' &&\n        'timeoutMS' in v &&\n        typeof v.timeoutMS === 'number');\n}\n/** @internal */\nclass TimeoutContext {\n    static create(options) {\n        if (options.session?.timeoutContext != null)\n            return options.session?.timeoutContext;\n        if (isCSOTTimeoutContextOptions(options))\n            return new CSOTTimeoutContext(options);\n        else if (isLegacyTimeoutContextOptions(options))\n            return new LegacyTimeoutContext(options);\n        else\n            throw new error_1.MongoRuntimeError('Unrecognized options');\n    }\n}\nexports.TimeoutContext = TimeoutContext;\n/** @internal */\nclass CSOTTimeoutContext extends TimeoutContext {\n    constructor(options) {\n        super();\n        this.minRoundTripTime = 0;\n        this.start = Math.trunc(performance.now());\n        this.timeoutMS = options.timeoutMS;\n        this.serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        this.socketTimeoutMS = options.socketTimeoutMS;\n        this.clearServerSelectionTimeout = false;\n    }\n    get maxTimeMS() {\n        return this.remainingTimeMS - this.minRoundTripTime;\n    }\n    get remainingTimeMS() {\n        const timePassed = Math.trunc(performance.now()) - this.start;\n        return this.timeoutMS <= 0 ? Infinity : this.timeoutMS - timePassed;\n    }\n    csotEnabled() {\n        return true;\n    }\n    get serverSelectionTimeout() {\n        // check for undefined\n        if (typeof this._serverSelectionTimeout !== 'object' || this._serverSelectionTimeout?.cleared) {\n            const { remainingTimeMS, serverSelectionTimeoutMS } = this;\n            if (remainingTimeMS <= 0)\n                return Timeout.reject(new error_1.MongoOperationTimeoutError(`Timed out in server selection after ${this.timeoutMS}ms`));\n            const usingServerSelectionTimeoutMS = serverSelectionTimeoutMS !== 0 &&\n                (0, utils_1.csotMin)(remainingTimeMS, serverSelectionTimeoutMS) === serverSelectionTimeoutMS;\n            if (usingServerSelectionTimeoutMS) {\n                this._serverSelectionTimeout = Timeout.expires(serverSelectionTimeoutMS);\n            }\n            else {\n                if (remainingTimeMS > 0 && Number.isFinite(remainingTimeMS)) {\n                    this._serverSelectionTimeout = Timeout.expires(remainingTimeMS);\n                }\n                else {\n                    this._serverSelectionTimeout = null;\n                }\n            }\n        }\n        return this._serverSelectionTimeout;\n    }\n    get connectionCheckoutTimeout() {\n        if (typeof this._connectionCheckoutTimeout !== 'object' ||\n            this._connectionCheckoutTimeout?.cleared) {\n            if (typeof this._serverSelectionTimeout === 'object') {\n                // null or Timeout\n                this._connectionCheckoutTimeout = this._serverSelectionTimeout;\n            }\n            else {\n                throw new error_1.MongoRuntimeError('Unreachable. If you are seeing this error, please file a ticket on the NODE driver project on Jira');\n            }\n        }\n        return this._connectionCheckoutTimeout;\n    }\n    get timeoutForSocketWrite() {\n        const { remainingTimeMS } = this;\n        if (!Number.isFinite(remainingTimeMS))\n            return null;\n        if (remainingTimeMS > 0)\n            return Timeout.expires(remainingTimeMS);\n        return Timeout.reject(new error_1.MongoOperationTimeoutError('Timed out before socket write'));\n    }\n    get timeoutForSocketRead() {\n        const { remainingTimeMS } = this;\n        if (!Number.isFinite(remainingTimeMS))\n            return null;\n        if (remainingTimeMS > 0)\n            return Timeout.expires(remainingTimeMS);\n        return Timeout.reject(new error_1.MongoOperationTimeoutError('Timed out before socket read'));\n    }\n    refresh() {\n        this.start = Math.trunc(performance.now());\n        this.minRoundTripTime = 0;\n        this._serverSelectionTimeout?.clear();\n        this._connectionCheckoutTimeout?.clear();\n    }\n    clear() {\n        this._serverSelectionTimeout?.clear();\n        this._connectionCheckoutTimeout?.clear();\n    }\n    /**\n     * @internal\n     * Throws a MongoOperationTimeoutError if the context has expired.\n     * If the context has not expired, returns the `remainingTimeMS`\n     **/\n    getRemainingTimeMSOrThrow(message) {\n        const { remainingTimeMS } = this;\n        if (remainingTimeMS <= 0)\n            throw new error_1.MongoOperationTimeoutError(message ?? `Expired after ${this.timeoutMS}ms`);\n        return remainingTimeMS;\n    }\n    /**\n     * @internal\n     * This method is intended to be used in situations where concurrent operation are on the same deadline, but cannot share a single `TimeoutContext` instance.\n     * Returns a new instance of `CSOTTimeoutContext` constructed with identical options, but setting the `start` property to `this.start`.\n     */\n    clone() {\n        const timeoutContext = new CSOTTimeoutContext({\n            timeoutMS: this.timeoutMS,\n            serverSelectionTimeoutMS: this.serverSelectionTimeoutMS\n        });\n        timeoutContext.start = this.start;\n        return timeoutContext;\n    }\n    refreshed() {\n        return new CSOTTimeoutContext(this);\n    }\n    addMaxTimeMSToCommand(command, options) {\n        if (options.omitMaxTimeMS)\n            return;\n        const maxTimeMS = this.remainingTimeMS - this.minRoundTripTime;\n        if (maxTimeMS > 0 && Number.isFinite(maxTimeMS))\n            command.maxTimeMS = maxTimeMS;\n    }\n    getSocketTimeoutMS() {\n        return 0;\n    }\n}\nexports.CSOTTimeoutContext = CSOTTimeoutContext;\n/** @internal */\nclass LegacyTimeoutContext extends TimeoutContext {\n    constructor(options) {\n        super();\n        this.options = options;\n        this.clearServerSelectionTimeout = true;\n    }\n    csotEnabled() {\n        return false;\n    }\n    get serverSelectionTimeout() {\n        if (this.options.serverSelectionTimeoutMS != null && this.options.serverSelectionTimeoutMS > 0)\n            return Timeout.expires(this.options.serverSelectionTimeoutMS);\n        return null;\n    }\n    get connectionCheckoutTimeout() {\n        if (this.options.waitQueueTimeoutMS != null && this.options.waitQueueTimeoutMS > 0)\n            return Timeout.expires(this.options.waitQueueTimeoutMS);\n        return null;\n    }\n    get timeoutForSocketWrite() {\n        return null;\n    }\n    get timeoutForSocketRead() {\n        return null;\n    }\n    refresh() {\n        return;\n    }\n    clear() {\n        return;\n    }\n    get maxTimeMS() {\n        return null;\n    }\n    refreshed() {\n        return new LegacyTimeoutContext(this.options);\n    }\n    addMaxTimeMSToCommand(_command, _options) {\n        // No max timeMS is added to commands in legacy timeout mode.\n    }\n    getSocketTimeoutMS() {\n        return this.options.socketTimeoutMS;\n    }\n}\nexports.LegacyTimeoutContext = LegacyTimeoutContext;\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/timeout.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/transactions.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/transactions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = exports.TxnState = void 0;\nexports.isTransactionCommand = isTransactionCommand;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.kDispose = exports.randomBytes = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ByteUtils = void 0;\nexports.isUint8Array = isUint8Array;\nexports.hostMatchesWildcards = hostMatchesWildcards;\nexports.normalizeHintField = normalizeHintField;\nexports.isObject = isObject;\nexports.mergeOptions = mergeOptions;\nexports.filterOptions = filterOptions;\nexports.applyRetryableWrites = applyRetryableWrites;\nexports.isPromiseLike = isPromiseLike;\nexports.decorateWithCollation = decorateWithCollation;\nexports.decorateWithReadConcern = decorateWithReadConcern;\nexports.getTopology = getTopology;\nexports.ns = ns;\nexports.makeCounter = makeCounter;\nexports.uuidV4 = uuidV4;\nexports.maxWireVersion = maxWireVersion;\nexports.arrayStrictEqual = arrayStrictEqual;\nexports.errorStrictEqual = errorStrictEqual;\nexports.makeStateMachine = makeStateMachine;\nexports.now = now;\nexports.calculateDurationInMs = calculateDurationInMs;\nexports.hasAtomicOperators = hasAtomicOperators;\nexports.resolveTimeoutOptions = resolveTimeoutOptions;\nexports.resolveOptions = resolveOptions;\nexports.isSuperset = isSuperset;\nexports.isHello = isHello;\nexports.setDifference = setDifference;\nexports.isRecord = isRecord;\nexports.emitWarning = emitWarning;\nexports.emitWarningOnce = emitWarningOnce;\nexports.enumToString = enumToString;\nexports.supportsRetryableWrites = supportsRetryableWrites;\nexports.shuffle = shuffle;\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\nexports.compareObjectId = compareObjectId;\nexports.parseInteger = parseInteger;\nexports.parseUnsignedInteger = parseUnsignedInteger;\nexports.checkParentDomainMatch = checkParentDomainMatch;\nexports.get = get;\nexports.request = request;\nexports.isHostMatch = isHostMatch;\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.squashError = squashError;\nexports.once = once;\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\nexports.fileIsAccessible = fileIsAccessible;\nexports.csotMin = csotMin;\nexports.noop = noop;\nexports.decorateDecryptionResult = decorateDecryptionResult;\nexports.addAbortListener = addAbortListener;\nexports.abortable = abortable;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nfunction isUint8Array(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        Symbol.toStringTag in value &&\n        value[Symbol.toStringTag] === 'Uint8Array');\n}\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        'then' in value &&\n        typeof value.then === 'function');\n}\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nfunction resolveTimeoutOptions(client, options) {\n    const { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS } = client.s.options;\n    return { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS, ...options };\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n *\n * @param parent - An optional owning class of the operation being run. ex. Db/Collection/MongoClient.\n * @param options - The options passed to the operation method.\n *\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    const timeoutMS = options?.timeoutMS ?? parent?.timeoutMS;\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        let writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            if (timeoutMS != null) {\n                writeConcern = write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...writeConcern,\n                        wtimeout: undefined,\n                        wtimeoutMS: undefined\n                    }\n                });\n            }\n            result.writeConcern = writeConcern;\n        }\n    }\n    result.timeoutMS = timeoutMS;\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    const isConvenientTransaction = session?.explicit && session?.timeoutContext != null;\n    if (isConvenientTransaction && options?.timeoutMS != null) {\n        throw new error_1.MongoInvalidArgumentError('An operation cannot be given a timeoutMS setting when inside a withTransaction call that has a timeoutMS setting');\n    }\n    return result;\n}\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n/**\n * TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n * @internal\n * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#read-concern\n */\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nfunction checkParentDomainMatch(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    let srvHostDomain = srvIsLessThanThreeParts\n        ? normalizedSrvHost\n        : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    if (!srvHostDomain.startsWith('.')) {\n        srvHostDomain = '.' + srvHostDomain;\n    }\n    if (srvIsLessThanThreeParts &&\n        normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length) {\n        throw new error_1.MongoAPIError('Server record does not have at least one more domain level than parent URI');\n    }\n    if (!addressDomain.endsWith(srvHostDomain)) {\n        throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n}\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new error_1.MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nasync function request(uri, options = {}) {\n    return await new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { promise, resolve, reject };\n}\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nfunction squashError(_error) {\n    return;\n}\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name, options) {\n    options?.signal?.throwIfAborted();\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const onEvent = (data) => resolve(data);\n    const onError = (error) => reject(error);\n    const abortListener = addAbortListener(options?.signal, function () {\n        reject(this.reason);\n    });\n    ee.once(name, onEvent).once('error', onError);\n    try {\n        return await promise;\n    }\n    finally {\n        ee.off(name, onEvent);\n        ee.off('error', onError);\n        abortListener?.[exports.kDispose]();\n    }\n}\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docOrDocs;\n    }\n    const transform = (doc) => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    };\n    return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nasync function fileIsAccessible(fileName, mode) {\n    try {\n        await fs_1.promises.access(fileName, mode);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction csotMin(duration1, duration2) {\n    if (duration1 === 0)\n        return duration2;\n    if (duration2 === 0)\n        return duration1;\n    return Math.min(duration1, duration2);\n}\nfunction noop() {\n    return;\n}\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[constants_2.kDecoratedKeys]) {\n                Object.defineProperty(decrypted, constants_2.kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[constants_2.kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n/** @internal */\nexports.kDispose = Symbol.dispose ?? Symbol('dispose');\n/**\n * A utility that helps with writing listener code idiomatically\n *\n * @example\n * ```js\n * using listener = addAbortListener(signal, function () {\n *   console.log('aborted', this.reason);\n * });\n * ```\n *\n * @param signal - if exists adds an abort listener\n * @param listener - the listener to be added to signal\n * @returns A disposable that will remove the abort listener\n */\nfunction addAbortListener(signal, listener) {\n    if (signal == null)\n        return;\n    signal.addEventListener('abort', listener, { once: true });\n    return { [exports.kDispose]: () => signal.removeEventListener('abort', listener) };\n}\n/**\n * Takes a promise and races it with a promise wrapping the abort event of the optionally provided signal.\n * The given promise is _always_ ordered before the signal's abort promise.\n * When given an already rejected promise and an already aborted signal, the promise's rejection takes precedence.\n *\n * Any asynchronous processing in `promise` will continue even after the abort signal has fired,\n * but control will be returned to the caller\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n *\n * @param promise - A promise to discard if the signal aborts\n * @param options - An options object carrying an optional signal\n */\nasync function abortable(promise, { signal }) {\n    if (signal == null) {\n        return await promise;\n    }\n    const { promise: aborted, reject } = promiseWithResolvers();\n    const abortListener = signal.aborted\n        ? reject(signal.reason)\n        : addAbortListener(signal, function () {\n            reject(this.reason);\n        });\n    try {\n        return await Promise.race([promise, aborted]);\n    }\n    finally {\n        abortListener?.[exports.kDispose]();\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.throwIfWriteConcernError = throwIfWriteConcernError;\nconst responses_1 = __webpack_require__(/*! ./cmap/wire_protocol/responses */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/error.js\");\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n/** Called with either a plain object or MongoDBResponse */\nfunction throwIfWriteConcernError(response) {\n    if (typeof response === 'object' && response != null) {\n        const writeConcernError = responses_1.MongoDBResponse.is(response) && response.has('writeConcernError')\n            ? response.toObject()\n            : !responses_1.MongoDBResponse.is(response) && 'writeConcernError' in response\n                ? response\n                : null;\n        if (writeConcernError != null) {\n            throw new error_1.MongoWriteConcernError(writeConcernError);\n        }\n    }\n}\n//# sourceMappingURL=write_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xNi4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi93cml0ZV9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLDBCQUEwQjtBQUNqRCxnQ0FBZ0M7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsOElBQWdDO0FBQzVELGdCQUFnQixtQkFBTyxDQUFDLGdHQUFTO0FBQ2pDLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUhBQXFIO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxlcmljX1xcRGVza3RvcFxcc3luZXJneS1tYXRjaC1hcHBcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG1vbmdvZGJANi4xNi4wXFxub2RlX21vZHVsZXNcXG1vbmdvZGJcXGxpYlxcd3JpdGVfY29uY2Vybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSB2b2lkIDA7XG5leHBvcnRzLnRocm93SWZXcml0ZUNvbmNlcm5FcnJvciA9IHRocm93SWZXcml0ZUNvbmNlcm5FcnJvcjtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4vY21hcC93aXJlX3Byb3RvY29sL3Jlc3BvbnNlc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmV4cG9ydHMuV1JJVEVfQ09OQ0VSTl9LRVlTID0gWyd3JywgJ3d0aW1lb3V0JywgJ2onLCAnam91cm5hbCcsICdmc3luYyddO1xuLyoqXG4gKiBBIE1vbmdvREIgV3JpdGVDb25jZXJuLCB3aGljaCBkZXNjcmliZXMgdGhlIGxldmVsIG9mIGFja25vd2xlZGdlbWVudFxuICogcmVxdWVzdGVkIGZyb20gTW9uZ29EQiBmb3Igd3JpdGUgb3BlcmF0aW9ucy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuL1xuICovXG5jbGFzcyBXcml0ZUNvbmNlcm4ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBXcml0ZUNvbmNlcm4gZnJvbSB0aGUgd3JpdGUgY29uY2VybiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB3IC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIHByb3BhZ2F0ZWQgdG8gYSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbmdvZCBpbnN0YW5jZXMgb3IgdG8gbW9uZ29kIGluc3RhbmNlcyB3aXRoIHNwZWNpZmllZCB0YWdzLlxuICAgICAqIEBwYXJhbSB3dGltZW91dE1TIC0gc3BlY2lmeSBhIHRpbWUgbGltaXQgdG8gcHJldmVudCB3cml0ZSBvcGVyYXRpb25zIGZyb20gYmxvY2tpbmcgaW5kZWZpbml0ZWx5XG4gICAgICogQHBhcmFtIGpvdXJuYWwgLSByZXF1ZXN0IGFja25vd2xlZGdtZW50IHRoYXQgdGhlIHdyaXRlIG9wZXJhdGlvbiBoYXMgYmVlbiB3cml0dGVuIHRvIHRoZSBvbi1kaXNrIGpvdXJuYWxcbiAgICAgKiBAcGFyYW0gZnN5bmMgLSBlcXVpdmFsZW50IHRvIHRoZSBqIG9wdGlvbi4gSXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodywgd3RpbWVvdXRNUywgam91cm5hbCwgZnN5bmMpIHtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oTnVtYmVyKHcpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IE51bWJlcih3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IHc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHd0aW1lb3V0TVMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy53dGltZW91dE1TID0gdGhpcy53dGltZW91dCA9IHd0aW1lb3V0TVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvdXJuYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gam91cm5hbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gZnN5bmMgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgYSB3cml0ZSBjb25jZXJuIHRvIGEgY29tbWFuZCBkb2N1bWVudC4gV2lsbCBtb2RpZnkgYW5kIHJldHVybiB0aGUgY29tbWFuZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHkoY29tbWFuZCwgd3JpdGVDb25jZXJuKSB7XG4gICAgICAgIGNvbnN0IHdjID0ge307XG4gICAgICAgIC8vIFRoZSB3cml0ZSBjb25jZXJuIGRvY3VtZW50IHNlbnQgdG8gdGhlIHNlcnZlciBoYXMgdy93dGltZW91dC9qIGZpZWxkcy5cbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi53ICE9IG51bGwpXG4gICAgICAgICAgICB3Yy53ID0gd3JpdGVDb25jZXJuLnc7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUyAhPSBudWxsKVxuICAgICAgICAgICAgd2Mud3RpbWVvdXQgPSB3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUztcbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi5qb3VybmFsICE9IG51bGwpXG4gICAgICAgICAgICB3Yy5qID0gd3JpdGVDb25jZXJuLmo7XG4gICAgICAgIGNvbW1hbmQud3JpdGVDb25jZXJuID0gd2M7XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbiAgICAvKiogQ29uc3RydWN0IGEgV3JpdGVDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LiAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zLCBpbmhlcml0KSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpbmhlcml0ID0gaW5oZXJpdCA/PyB7fTtcbiAgICAgICAgbGV0IG9wdHM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBvcHRzID0geyB3OiBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFdyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50T3B0cyA9IGluaGVyaXQgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4gPyBpbmhlcml0IDogaW5oZXJpdC53cml0ZUNvbmNlcm47XG4gICAgICAgIGNvbnN0IHsgdyA9IHVuZGVmaW5lZCwgd3RpbWVvdXQgPSB1bmRlZmluZWQsIGogPSB1bmRlZmluZWQsIGZzeW5jID0gdW5kZWZpbmVkLCBqb3VybmFsID0gdW5kZWZpbmVkLCB3dGltZW91dE1TID0gdW5kZWZpbmVkIH0gPSB7XG4gICAgICAgICAgICAuLi5wYXJlbnRPcHRzLFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9O1xuICAgICAgICBpZiAodyAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dCAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dE1TICE9IG51bGwgfHxcbiAgICAgICAgICAgIGogIT0gbnVsbCB8fFxuICAgICAgICAgICAgam91cm5hbCAhPSBudWxsIHx8XG4gICAgICAgICAgICBmc3luYyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlQ29uY2Vybih3LCB3dGltZW91dCA/PyB3dGltZW91dE1TLCBqID8/IGpvdXJuYWwsIGZzeW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gV3JpdGVDb25jZXJuO1xuLyoqIENhbGxlZCB3aXRoIGVpdGhlciBhIHBsYWluIG9iamVjdCBvciBNb25nb0RCUmVzcG9uc2UgKi9cbmZ1bmN0aW9uIHRocm93SWZXcml0ZUNvbmNlcm5FcnJvcihyZXNwb25zZSkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVDb25jZXJuRXJyb3IgPSByZXNwb25zZXNfMS5Nb25nb0RCUmVzcG9uc2UuaXMocmVzcG9uc2UpICYmIHJlc3BvbnNlLmhhcygnd3JpdGVDb25jZXJuRXJyb3InKVxuICAgICAgICAgICAgPyByZXNwb25zZS50b09iamVjdCgpXG4gICAgICAgICAgICA6ICFyZXNwb25zZXNfMS5Nb25nb0RCUmVzcG9uc2UuaXMocmVzcG9uc2UpICYmICd3cml0ZUNvbmNlcm5FcnJvcicgaW4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICA/IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuRXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Xcml0ZUNvbmNlcm5FcnJvcih3cml0ZUNvbmNlcm5FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cml0ZV9jb25jZXJuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/package.json":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/mongodb@6.16.0/node_modules/mongodb/package.json ***!
  \*********************************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"mongodb","version":"6.16.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.9","bson":"^6.10.3","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0 || ^2.0.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@aws-sdk/credential-providers":"^3.632.0","@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.49.2","@microsoft/tsdoc-config":"^0.17.1","@mongodb-js/zstd":"^2.0.0","@types/chai":"^4.3.17","@types/chai-subset":"^1.3.5","@types/express":"^4.17.21","@types/kerberos":"^1.1.5","@types/mocha":"^10.0.9","@types/node":"^22.13.0","@types/saslprep":"^1.0.3","@types/semver":"^7.5.8","@types/sinon":"^17.0.3","@types/sinon-chai":"^3.2.12","@types/whatwg-url":"^11.0.5","@typescript-eslint/eslint-plugin":"8.4.0","@typescript-eslint/parser":"8.4.0","chai":"^4.4.1","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"9.9.0","eslint-config-prettier":"^9.1.0","eslint-plugin-mocha":"^10.4.1","eslint-plugin-prettier":"^5.2.3","eslint-plugin-simple-import-sort":"^12.1.1","eslint-plugin-tsdoc":"^0.4.0","eslint-plugin-unused-imports":"^4.1.4","express":"^4.21.2","gcp-metadata":"^5.3.0","js-yaml":"^4.1.0","mocha":"^10.8.2","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.3.0","mongodb-legacy":"^6.1.3","nyc":"^15.1.0","prettier":"^3.4.2","semver":"^7.7.0","sinon":"^18.0.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.8.1","source-map-support":"^0.5.21","ts-node":"^10.9.2","tsd":"^0.31.2","typescript":"5.5","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && ESLINT_USE_FLAT_CONFIG=false eslint --no-ignore --fix mongodb.d.ts lib/beta.d.ts","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"npm --prefix test/benchmarks/driver_bench start","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"nyc mocha --config test/mocha_lambda.js test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"nyc mocha --config test/mocha_lambda.js test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"npm run build:dts && ESLINT_USE_FLAT_CONFIG=false eslint -v && ESLINT_USE_FLAT_CONFIG=false eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.js test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.js test/integration","check:unit":"nyc mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"nyc mocha --config test/manual/mocharc.js test/manual/atlas_connectivity.test.ts","check:resource-management":"nyc mocha --config test/manual/mocharc.js test/manual/resource_management.test.ts","check:drivers-atlas-testing":"nyc mocha --config test/mocha_mongodb.js test/atlas/drivers_atlas_testing.test.ts","check:adl":"nyc mocha --config test/mocha_mongodb.js test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/mongodb_aws.test.ts","check:oidc-auth":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/auth.spec.test.ts","check:oidc-test":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/mongodb_oidc.prose.test.ts","check:oidc-azure":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/mongodb_oidc_azure.prose.05.test.ts","check:oidc-gcp":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/mongodb_oidc_gcp.prose.06.test.ts","check:oidc-k8s":"nyc mocha --config test/mocha_mongodb.js test/integration/auth/mongodb_oidc_k8s.prose.07.test.ts","check:kerberos":"nyc mocha --config test/manual/mocharc.js test/manual/kerberos.test.ts","check:tls":"nyc mocha --config test/manual/mocharc.js test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.js test/manual/ldap.test.ts","check:socks5":"nyc mocha --config test/manual/mocharc.js test/manual/socks5.test.ts","check:csfle":"nyc mocha --config test/mocha_mongodb.js test/integration/client-side-encryption","check:snappy":"nyc mocha test/unit/assorted/snappy.test.js","check:x509":"nyc mocha test/manual/x509_auth.test.ts","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;